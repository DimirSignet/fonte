{"sha": "d46523cf9c6371475f375c6c0b9df8d59fe26013", "log": "Adding a StringUtils.repeat(String, String separator, int) method per request in LANG-348  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n     }\n \n     /**\n+     * <p>Repeat a String <code>repeat</code> times to form a\n+     * new String, with a String separator injected each time. </p>\n+     *\n+     * <pre>\n+     * StringUtils.repeat(null, null, 2) = null\n+     * StringUtils.repeat(null, \"x\", 2)  = null\n+     * StringUtils.repeat(\"\", null, 0)   = \"\"\n+     * StringUtils.repeat(\"\", \"\", 2)     = \"\"\n+     * StringUtils.repeat(\"\", \"x\", 3)    = \"xxx\"\n+     * StringUtils.repeat(\"?\", \", \", 3)  = \"?, ?, ?\"\n+     * </pre>\n+     *\n+     * @param str        the String to repeat, may be null\n+     * @param separator  the String to inject, may be null\n+     * @param repeat     number of times to repeat str, negative treated as zero\n+     * @return a new String consisting of the original String repeated,\n+     *  <code>null</code> if null String input\n+     */\n+    public static String repeat(String str, String separator, int repeat) {\n+        if(str == null || separator == null) {\n+            return repeat(str, repeat);\n+        } else {\n+            // given that repeat(String, int) is quite optimized, better to rely on it than try and splice this into it\n+            String result = repeat(str + separator, repeat);\n+            return removeEnd(result, separator);\n+        }\n+    }\n+\n+    /**\n      * <p>Returns padding using the specified delimiter repeated\n      * to a given length.</p>\n      *\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n         String str = StringUtils.repeat(\"a\", 10000);  // bigger than pad limit\n         assertEquals(10000, str.length());\n         assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n+    }\n+\n+    public void testRepeat_StringStringInt() {\n+        assertEquals(null, StringUtils.repeat(null, null, 2));\n+        assertEquals(null, StringUtils.repeat(null, \"x\", 2));\n+        assertEquals(\"\", StringUtils.repeat(\"\", null, 2));\n+\n+        assertEquals(\"\", StringUtils.repeat(\"ab\", \"\", 0));\n+        assertEquals(\"\", StringUtils.repeat(\"\", \"\", 2));\n+\n+        assertEquals(\"xx\", StringUtils.repeat(\"\", \"x\", 3));\n+\n+        assertEquals(\"?, ?, ?\", StringUtils.repeat(\"?\", \", \", 3));\n     }\n \n     public void testChop() {", "timestamp": 1256015937, "metainfo": ""}