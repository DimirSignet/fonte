{"sha": "fbe9c5381fa84cf51d86efcb8240e992c53d5db4", "log": "Moving indexOf(String, String) and indexOf(String, String, int) over to CharSequence. LANG-687  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n     }\n \n     /**\n-     * <p>Finds the first index within a String, handling {@code null}.\n-     * This method uses {@link String#indexOf(String)}.</p>\n-     *\n-     * <p>A {@code null} String will return {@code -1}.</p>\n+     * <p>Finds the first index within a CharSequence, handling {@code null}.\n+     * This method uses {@link String#indexOf(String, int)} if possible.</p>\n+     *\n+     * <p>A {@code null} CharSequence will return {@code -1}.</p>\n      *\n      * <pre>\n      * StringUtils.indexOf(null, *)          = -1\n      * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n      * </pre>\n      *\n-     * @param str  the String to check, may be null\n-     * @param searchStr  the String to find, may be null\n-     * @return the first index of the search String,\n+     * @param seq  the CharSequence to check, may be null\n+     * @param searchSeq  the CharSequence to find, may be null\n+     * @return the first index of the search CharSequence,\n      *  -1 if no match or {@code null} string input\n      * @since 2.0\n      */\n-    public static int indexOf(String str, String searchStr) {\n-        if (str == null || searchStr == null) {\n+    public static int indexOf(CharSequence seq, CharSequence searchSeq) {\n+        if (seq == null || searchSeq == null) {\n             return INDEX_NOT_FOUND;\n         }\n-        return str.indexOf(searchStr);\n-    }\n-\n-    /**\n-     * <p>Finds the first index within a String, handling {@code null}.\n-     * This method uses {@link String#indexOf(String, int)}.</p>\n-     *\n-     * <p>A {@code null} String will return {@code -1}.\n+        return StringUtils.indexOfSequence(seq, searchSeq, 0);\n+    }\n+\n+    /**\n+     * <p>Finds the first index within a CharSequence, handling {@code null}.\n+     * This method uses {@link String#indexOf(String, int)} if possible.</p>\n+     *\n+     * <p>A {@code null} CharSequence will return {@code -1}.\n      * A negative start position is treated as zero.\n-     * An empty (\"\") search String always matches.\n+     * An empty (\"\") search CharSequence always matches.\n      * A start position greater than the string length only matches\n-     * an empty search String.</p>\n+     * an empty search CharSequence.</p>\n      *\n      * <pre>\n      * StringUtils.indexOf(null, *, *)          = -1\n      * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n      * </pre>\n      *\n-     * @param str  the String to check, may be null\n-     * @param searchStr  the String to find, may be null\n+     * @param seq  the CharSequence to check, may be null\n+     * @param searchSeq  the CharSequence to find, may be null\n      * @param startPos  the start position, negative treated as zero\n-     * @return the first index of the search String,\n+     * @return the first index of the search CharSequence,\n      *  -1 if no match or {@code null} string input\n      * @since 2.0\n      */\n-    public static int indexOf(String str, String searchStr, int startPos) {\n-        if (str == null || searchStr == null) {\n+    public static int indexOf(CharSequence seq, CharSequence searchSeq, int startPos) {\n+        if (seq == null || searchSeq == null) {\n             return INDEX_NOT_FOUND;\n         }\n-        return str.indexOf(searchStr, startPos);\n+        return StringUtils.indexOfSequence(seq, searchSeq, startPos);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n         assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\"));\n         assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\"));\n         assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"\"));\n+\n+        assertEquals(2, StringUtils.indexOf(new StringBuilder(\"aabaabaa\"), \"b\"));\n     }\n \n     public void testIndexOf_StringInt() {\n         assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", \"b\", 9));\n         assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", -1));\n         assertEquals(2,StringUtils.indexOf(\"aabaabaa\", \"\", 2));\n+\n+        assertEquals(5, StringUtils.indexOf(new StringBuilder(\"aabaabaa\"), \"b\", 3));\n     }\n \n     public void testIndexOfAny_StringCharArray() {", "timestamp": 1300256322, "metainfo": ""}