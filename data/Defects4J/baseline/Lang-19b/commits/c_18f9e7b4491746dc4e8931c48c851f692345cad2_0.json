{"sha": "18f9e7b4491746dc4e8931c48c851f692345cad2", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/SystemUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SystemUtils.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * Helpers for {@code java.lang.System}.\n  * </p>\n- * \n  * <p>\n- * If a system property cannot be read due to security restrictions, the corresponding field in this class will be set to {@code null}\n- * and a message will be written to {@code System.err}.\n+ * If a system property cannot be read due to security restrictions, the corresponding field in this class will be set\n+ * to {@code null} and a message will be written to {@code System.err}.\n  * </p>\n- * \n  * <p>\n  * #ThreadSafe#\n  * </p>\n- * \n+ *\n  * @author Apache Software Foundation\n  * @author Based on code from Avalon Excalibur\n  * @author Based on code from Lucene\n      * <p>\n      * <b>On platforms without a GUI, this value is {@code null}.</b>\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.1\n      */\n     public static final String AWT_TOOLKIT = getSystemProperty(\"awt.toolkit\");\n      * <p>\n      * File encoding, such as {@code Cp1252}.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.0\n      * @since Java 1.2\n      */\n      * <p>\n      * The {@code file.separator} System Property. File separator (<code>&quot;/&quot;</code> on UNIX).\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String FILE_SEPARATOR = getSystemProperty(\"file.separator\");\n      * <p>\n      * The {@code java.awt.fonts} System Property.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.1\n      */\n     public static final String JAVA_AWT_FONTS = getSystemProperty(\"java.awt.fonts\");\n      * <p>\n      * The {@code java.awt.graphicsenv} System Property.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.1\n      */\n     public static final String JAVA_AWT_GRAPHICSENV = getSystemProperty(\"java.awt.graphicsenv\");\n      * The {@code java.awt.headless} System Property. The value of this property is the String {@code \"true\"} or\n      * {@code \"false\"}.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @see #isJavaAwtHeadless()\n      * @since 2.1\n      * @since Java 1.4\n      * <p>\n      * The {@code java.awt.printerjob} System Property.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.1\n      */\n     public static final String JAVA_AWT_PRINTERJOB = getSystemProperty(\"java.awt.printerjob\");\n      * <p>\n      * The {@code java.class.path} System Property. Java class path.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String JAVA_CLASS_PATH = getSystemProperty(\"java.class.path\");\n      * <p>\n      * The {@code java.class.version} System Property. Java class format version number.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String JAVA_CLASS_VERSION = getSystemProperty(\"java.class.version\");\n \n     /**\n      * <p>\n-     * The {@code java.compiler} System Property. Name of JIT compiler to use. First in JDK version 1.2. Not used in Sun JDKs after\n-     * 1.2.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * The {@code java.compiler} System Property. Name of JIT compiler to use. First in JDK version 1.2. Not used in Sun\n+     * JDKs after 1.2.\n+     * </p>\n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.2. Not used in Sun versions after 1.2.\n      */\n     public static final String JAVA_COMPILER = getSystemProperty(\"java.compiler\");\n      * <p>\n      * The {@code java.endorsed.dirs} System Property. Path of endorsed directory or directories.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.4\n      */\n     public static final String JAVA_ENDORSED_DIRS = getSystemProperty(\"java.endorsed.dirs\");\n      * <p>\n      * The {@code java.ext.dirs} System Property. Path of extension directory or directories.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.3\n      */\n     public static final String JAVA_EXT_DIRS = getSystemProperty(\"java.ext.dirs\");\n      * <p>\n      * The {@code java.home} System Property. Java installation directory.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String JAVA_HOME = getSystemProperty(JAVA_HOME_KEY);\n      * <p>\n      * The {@code java.io.tmpdir} System Property. Default temp file path.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.2\n      */\n     public static final String JAVA_IO_TMPDIR = getSystemProperty(JAVA_IO_TMPDIR_KEY);\n      * <p>\n      * The {@code java.library.path} System Property. List of paths to search when loading libraries.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.2\n      */\n     public static final String JAVA_LIBRARY_PATH = getSystemProperty(\"java.library.path\");\n      * <p>\n      * The {@code java.runtime.name} System Property. Java Runtime Environment name.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.0\n      * @since Java 1.3\n      */\n      * <p>\n      * The {@code java.runtime.version} System Property. Java Runtime Environment version.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.0\n      * @since Java 1.3\n      */\n      * <p>\n      * The {@code java.specification.name} System Property. Java Runtime Environment specification name.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.2\n      */\n     public static final String JAVA_SPECIFICATION_NAME = getSystemProperty(\"java.specification.name\");\n      * <p>\n      * The {@code java.specification.vendor} System Property. Java Runtime Environment specification vendor.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.2\n      */\n     public static final String JAVA_SPECIFICATION_VENDOR = getSystemProperty(\"java.specification.vendor\");\n      * <p>\n      * The {@code java.specification.version} System Property. Java Runtime Environment specification version.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.3\n      */\n     public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(\"java.specification.version\");\n      * <p>\n      * The {@code java.util.prefs.PreferencesFactory} System Property. A class name.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.1\n      * @since Java 1.4\n      */\n-    public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = getSystemProperty(\"java.util.prefs.PreferencesFactory\");\n+    public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY =\n+        getSystemProperty(\"java.util.prefs.PreferencesFactory\");\n \n     /**\n      * <p>\n      * The {@code java.vendor} System Property. Java vendor-specific string.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String JAVA_VENDOR = getSystemProperty(\"java.vendor\");\n      * <p>\n      * The {@code java.vendor.url} System Property. Java vendor URL.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String JAVA_VENDOR_URL = getSystemProperty(\"java.vendor.url\");\n      * <p>\n      * The {@code java.version} System Property. Java version number.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String JAVA_VERSION = getSystemProperty(\"java.version\");\n      * <p>\n      * The {@code java.vm.info} System Property. Java Virtual Machine implementation info.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.0\n      * @since Java 1.2\n      */\n      * <p>\n      * The {@code java.vm.name} System Property. Java Virtual Machine implementation name.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.2\n      */\n     public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\");\n      * <p>\n      * The {@code java.vm.specification.name} System Property. Java Virtual Machine specification name.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.2\n      */\n     public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\");\n      * <p>\n      * The {@code java.vm.specification.vendor} System Property. Java Virtual Machine specification vendor.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.2\n      */\n     public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\");\n      * <p>\n      * The {@code java.vm.specification.version} System Property. Java Virtual Machine specification version.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.2\n      */\n     public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\");\n      * <p>\n      * The {@code java.vm.vendor} System Property. Java Virtual Machine implementation vendor.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.2\n      */\n     public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\");\n      * <p>\n      * The {@code java.vm.version} System Property. Java Virtual Machine implementation version.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.2\n      */\n     public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\");\n      * <p>\n      * The {@code line.separator} System Property. Line separator (<code>&quot;\\n&quot;</code> on UNIX).\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\");\n      * <p>\n      * The {@code os.arch} System Property. Operating system architecture.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String OS_ARCH = getSystemProperty(\"os.arch\");\n      * <p>\n      * The {@code os.name} System Property. Operating system name.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String OS_NAME = getSystemProperty(\"os.name\");\n      * <p>\n      * The {@code os.version} System Property. Operating system version.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String OS_VERSION = getSystemProperty(\"os.version\");\n      * <p>\n      * The {@code path.separator} System Property. Path separator (<code>&quot;:&quot;</code> on UNIX).\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\");\n \n     /**\n      * <p>\n-     * The {@code user.country} or {@code user.region} System Property. User's country code, such as {@code GB}. First in\n-     * Java version 1.2 as {@code user.region}. Renamed to {@code user.country} in 1.4\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * The {@code user.country} or {@code user.region} System Property. User's country code, such as {@code GB}. First\n+     * in Java version 1.2 as {@code user.region}. Renamed to {@code user.country} in 1.4\n+     * </p>\n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.0\n      * @since Java 1.2\n      */\n-    public static final String USER_COUNTRY = getSystemProperty(\"user.country\") == null ? getSystemProperty(\"user.region\")\n-            : getSystemProperty(\"user.country\");\n+    public static final String USER_COUNTRY = getSystemProperty(\"user.country\") == null ?\n+            getSystemProperty(\"user.region\") : getSystemProperty(\"user.country\");\n \n     /**\n      * <p>\n      * The {@code user.dir} System Property. User's current working directory.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String USER_DIR = getSystemProperty(USER_DIR_KEY);\n      * <p>\n      * The {@code user.home} System Property. User's home directory.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String USER_HOME = getSystemProperty(USER_HOME_KEY);\n      * <p>\n      * The {@code user.language} System Property. User's language code, such as {@code \"en\"}.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.0\n      * @since Java 1.2\n      */\n      * <p>\n      * The {@code user.name} System Property. User's account name.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since Java 1.1\n      */\n     public static final String USER_NAME = getSystemProperty(\"user.name\");\n      * <p>\n      * The {@code user.timezone} System Property. For example: {@code \"America/Los_Angeles\"}.\n      * </p>\n-     * \n-     * <p>\n-     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n-     * </p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n-     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n-     * System property.\n-     * </p>\n-     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does\n+     * not exist.\n+     * </p>\n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of\n+     * sync with that System property.\n+     * </p>\n+     *\n      * @since 2.1\n      */\n     public static final String USER_TIMEZONE = getSystemProperty(\"user.timezone\");\n      * <p>\n      * Is {@code true} if this is Java version 1.1 (also 1.1.x versions).\n      * </p>\n-     * \n      * <p>\n      * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      * <p>\n      * Is {@code true} if this is Java version 1.2 (also 1.2.x versions).\n      * </p>\n-     * \n      * <p>\n      * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      * <p>\n      * Is {@code true} if this is Java version 1.3 (also 1.3.x versions).\n      * </p>\n-     * \n      * <p>\n      * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      * <p>\n      * Is {@code true} if this is Java version 1.4 (also 1.4.x versions).\n      * </p>\n-     * \n      * <p>\n      * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      * <p>\n      * Is {@code true} if this is Java version 1.5 (also 1.5.x versions).\n      * </p>\n-     * \n      * <p>\n      * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      * <p>\n      * Is {@code true} if this is Java version 1.6 (also 1.6.x versions).\n      * </p>\n-     * \n      * <p>\n      * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      * <p>\n      * Is {@code true} if this is Java version 1.7 (also 1.7.x versions).\n      * </p>\n-     * \n      * <p>\n      * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n-     * \n+     *\n      * @since 3.0\n      */\n     public static final boolean IS_JAVA_1_7 = getJavaVersionMatches(\"1.7\");\n      * <p>\n      * Is {@code true} if this is AIX.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_AIX = getOSMatchesName(\"AIX\");\n      * <p>\n      * Is {@code true} if this is HP-UX.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_HP_UX = getOSMatchesName(\"HP-UX\");\n      * <p>\n      * Is {@code true} if this is Irix.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_IRIX = getOSMatchesName(\"Irix\");\n      * <p>\n      * Is {@code true} if this is Linux.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_LINUX = getOSMatchesName(\"Linux\") || getOSMatchesName(\"LINUX\");\n      * <p>\n      * Is {@code true} if this is Mac.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_MAC = getOSMatchesName(\"Mac\");\n      * <p>\n      * Is {@code true} if this is Mac.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_MAC_OSX = getOSMatchesName(\"Mac OS X\");\n      * <p>\n      * Is {@code true} if this is OS/2.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_OS2 = getOSMatchesName(\"OS/2\");\n      * <p>\n      * Is {@code true} if this is Solaris.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_SOLARIS = getOSMatchesName(\"Solaris\");\n      * <p>\n      * Is {@code true} if this is SunOS.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_SUN_OS = getOSMatchesName(\"SunOS\");\n      * <p>\n      * Is {@code true} if this is a UNIX like system, as in any of AIX, HP-UX, Irix, Linux, MacOSX, Solaris or SUN OS.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.1\n      */\n-    public static final boolean IS_OS_UNIX = IS_OS_AIX || IS_OS_HP_UX || IS_OS_IRIX || IS_OS_LINUX || IS_OS_MAC_OSX || IS_OS_SOLARIS\n-            || IS_OS_SUN_OS;\n+    public static final boolean IS_OS_UNIX = IS_OS_AIX || IS_OS_HP_UX || IS_OS_IRIX || IS_OS_LINUX || IS_OS_MAC_OSX\n+            || IS_OS_SOLARIS || IS_OS_SUN_OS;\n \n     /**\n      * <p>\n      * Is {@code true} if this is Windows.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS = getOSMatchesName(OS_NAME_WINDOWS_PREFIX);\n      * <p>\n      * Is {@code true} if this is Windows 2000.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.0\");\n      * <p>\n      * Is {@code true} if this is Windows 95.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_95 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.0\");\n      * <p>\n      * Is {@code true} if this is Windows 98.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_98 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.1\");\n      * <p>\n      * Is {@code true} if this is Windows ME.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_ME = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"4.9\");\n      * <p>\n      * Is {@code true} if this is Windows NT.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_NT = getOSMatchesName(OS_NAME_WINDOWS_PREFIX + \" NT\");\n      * <p>\n      * Is {@code true} if this is Windows XP.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_XP = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.1\");\n      * <p>\n      * Is {@code true} if this is Windows Vista.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 2.4\n      */\n     public static final boolean IS_OS_WINDOWS_VISTA = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.0\");\n      * <p>\n      * Is {@code true} if this is Windows 7.\n      * </p>\n-     * \n-     * <p>\n-     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n-     * </p>\n-     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n+     * </p>\n+     *\n      * @since 3.0\n      */\n     public static final boolean IS_OS_WINDOWS_7 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.1\");\n      * <p>\n      * Gets the Java home directory as a {@code File}.\n      * </p>\n-     * \n+     *\n      * @return a directory\n-     * @throws SecurityException\n-     *             if a security manager exists and its {@code checkPropertyAccess} method doesn't allow access to the specified system\n-     *             property.\n+     * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allow\n+     * access to the specified system property.\n      * @see System#getProperty(String)\n      * @since 2.1\n      */\n      * <p>\n      * Gets the Java IO temporary directory as a {@code File}.\n      * </p>\n-     * \n+     *\n      * @return a directory\n-     * @throws SecurityException\n-     *             if a security manager exists and its {@code checkPropertyAccess} method doesn't allow access to the specified system\n-     *             property.\n+     * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allow\n+     * access to the specified system property.\n      * @see System#getProperty(String)\n      * @since 2.1\n      */\n      * <p>\n      * Decides if the Java version matches.\n      * </p>\n-     * \n-     * @param versionPrefix\n-     *            the prefix for the java version\n+     *\n+     * @param versionPrefix the prefix for the java version\n      * @return true if matches, or false if not or can't determine\n      */\n     private static boolean getJavaVersionMatches(String versionPrefix) {\n \n     /**\n      * Decides if the operating system matches.\n-     * \n-     * @param osNamePrefix\n-     *            the prefix for the os name\n-     * @param osVersionPrefix\n-     *            the prefix for the version\n+     *\n+     * @param osNamePrefix the prefix for the os name\n+     * @param osVersionPrefix the prefix for the version\n      * @return true if matches, or false if not or can't determine\n      */\n     private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n \n     /**\n      * Decides if the operating system matches.\n-     * \n-     * @param osNamePrefix\n-     *            the prefix for the os name\n+     *\n+     * @param osNamePrefix the prefix for the os name\n      * @return true if matches, or false if not or can't determine\n      */\n     private static boolean getOSMatchesName(String osNamePrefix) {\n      * <p>\n      * Gets a System property, defaulting to {@code null} if the property cannot be read.\n      * </p>\n-     * \n      * <p>\n      * If a {@code SecurityException} is caught, the return value is {@code null} and a message is written to\n      * {@code System.err}.\n      * </p>\n-     * \n-     * @param property\n-     *            the system property name\n+     *\n+     * @param property the system property name\n      * @return the system property value or {@code null} if a security problem occurs\n      */\n     private static String getSystemProperty(String property) {\n      * <p>\n      * Gets the user directory as a {@code File}.\n      * </p>\n-     * \n+     *\n      * @return a directory\n-     * @throws SecurityException\n-     *             if a security manager exists and its {@code checkPropertyAccess} method doesn't allow access to the specified system\n-     *             property.\n+     * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allow\n+     * access to the specified system property.\n      * @see System#getProperty(String)\n      * @since 2.1\n      */\n      * <p>\n      * Gets the user home directory as a {@code File}.\n      * </p>\n-     * \n+     *\n      * @return a directory\n-     * @throws SecurityException\n-     *             if a security manager exists and its {@code checkPropertyAccess} method doesn't allow access to the specified system\n-     *             property.\n+     * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allow\n+     * access to the specified system property.\n      * @see System#getProperty(String)\n      * @since 2.1\n      */\n \n     /**\n      * Returns whether the {@link #JAVA_AWT_HEADLESS} value is {@code true}.\n-     * \n+     *\n      * @return {@code true} if {@code JAVA_AWT_HEADLESS} is {@code \"true\"}, {@code false} otherwise.\n-     * \n      * @see #JAVA_AWT_HEADLESS\n      * @since 2.1\n      * @since Java 1.4\n      * <p>\n      * Is the Java version at least the requested version.\n      * </p>\n-     * \n      * <p>\n      * Example input:\n      * </p>\n      * <li>{@code 1.2f} to test for Java 1.2</li>\n      * <li>{@code 1.31f} to test for Java 1.3.1</li>\n      * </ul>\n-     * \n-     * @param requiredVersion\n-     *            the required version, for example 1.31f\n+     *\n+     * @param requiredVersion the required version, for example 1.31f\n      * @return {@code true} if the actual version is equal or greater than the required version\n      */\n     public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion) {\n      * <p>\n      * This method is package private instead of private to support unit test invocation.\n      * </p>\n-     * \n-     * @param version\n-     *            the actual Java version\n-     * @param versionPrefix\n-     *            the prefix for the expected Java version\n+     *\n+     * @param version the actual Java version\n+     * @param versionPrefix the prefix for the expected Java version\n      * @return true if matches, or false if not or can't determine\n      */\n     static boolean isJavaVersionMatch(String version, String versionPrefix) {\n      * <p>\n      * This method is package private instead of private to support unit test invocation.\n      * </p>\n-     * \n-     * @param osName\n-     *            the actual OS name\n-     * @param osVersion\n-     *            the actual OS version\n-     * @param osNamePrefix\n-     *            the prefix for the expected OS name\n-     * @param osVersionPrefix\n-     *            the prefix for the expected OS version\n+     *\n+     * @param osName the actual OS name\n+     * @param osVersion the actual OS version\n+     * @param osNamePrefix the prefix for the expected OS name\n+     * @param osVersionPrefix the prefix for the expected OS version\n      * @return true if matches, or false if not or can't determine\n      */\n     static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {\n      * <p>\n      * This method is package private instead of private to support unit test invocation.\n      * </p>\n-     * \n-     * @param osName\n-     *            the actual OS name\n-     * @param osNamePrefix\n-     *            the prefix for the expected OS name\n+     *\n+     * @param osName the actual OS name\n+     * @param osNamePrefix the prefix for the expected OS name\n      * @return true if matches, or false if not or can't determine\n      */\n     static boolean isOSNameMatch(String osName, String osNamePrefix) {\n      * SystemUtils instances should NOT be constructed in standard programming. Instead, the class should be used as\n      * {@code SystemUtils.FILE_SEPARATOR}.\n      * </p>\n-     * \n      * <p>\n      * This constructor is public to permit tools that require a JavaBean instance to operate.\n      * </p>", "timestamp": 1300553624, "metainfo": ""}