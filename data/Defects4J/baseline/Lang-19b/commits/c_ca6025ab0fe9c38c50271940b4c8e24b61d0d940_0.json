{"sha": "ca6025ab0fe9c38c50271940b4c8e24b61d0d940", "log": "Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharRange.java\n+++ b/src/main/java/org/apache/commons/lang3/CharRange.java\n     private transient String iToString;\n \n     /**\n-     * <p>Constructs a <code>CharRange</code> over a set of characters,\n+     * <p>Constructs a {@code CharRange} over a set of characters,\n      * optionally negating the range.</p>\n      *\n      * <p>A negated range includes everything except that defined by the\n      * start and end characters.</p>\n      * \n      * <p>If start and end are in the wrong order, they are reversed.\n-     * Thus <code>a-e</code> is the same as <code>e-a</code>.</p>\n+     * Thus {@code a-e} is the same as {@code e-a}.</p>\n      *\n      * @param start  first character, inclusive, in this range\n      * @param end  last character, inclusive, in this range\n     }\n \n     /**\n-     * <p>Constructs a <code>CharRange</code> over a single character.</p>\n+     * <p>Constructs a {@code CharRange} over a single character.</p>\n      *\n      * @param ch  only character in this range\n      * @return the new CharRange object\n     }\n \n     /**\n-     * <p>Constructs a negated <code>CharRange</code> over a single character.</p>\n+     * <p>Constructs a negated {@code CharRange} over a single character.</p>\n      *\n      * @param ch  only character in this range\n      * @return the new CharRange object\n     }\n \n     /**\n-     * <p>Constructs a <code>CharRange</code> over a set of characters.</p>\n+     * <p>Constructs a {@code CharRange} over a set of characters.</p>\n      *\n      * @param start  first character, inclusive, in this range\n      * @param end  last character, inclusive, in this range\n     }\n \n     /**\n-     * <p>Constructs a negated <code>CharRange</code> over a set of characters.</p>\n+     * <p>Constructs a negated {@code CharRange} over a set of characters.</p>\n      *\n      * @param start  first character, inclusive, in this range\n      * @param end  last character, inclusive, in this range\n     }\n \n     /**\n-     * <p>Is this <code>CharRange</code> negated.</p>\n+     * <p>Is this {@code CharRange} negated.</p>\n      * \n      * <p>A negated range includes everything except that defined by the\n      * start and end characters.</p>\n      *\n-     * @return <code>true</code> is negated\n+     * @return {@code true} if negated\n      */\n     public boolean isNegated() {\n         return negated;\n      * <p>Is the character specified contained in this range.</p>\n      *\n      * @param ch  the character to check\n-     * @return <code>true</code> if this range contains the input character\n+     * @return {@code true} if this range contains the input character\n      */\n     public boolean contains(char ch) {\n         return (ch >= start && ch <= end) != negated;\n      * this range.</p>\n      *\n      * @param range  the range to check against\n-     * @return <code>true</code> if this range entirely contains the input range\n-     * @throws IllegalArgumentException if <code>null</code> input\n+     * @return {@code true} if this range entirely contains the input range\n+     * @throws IllegalArgumentException if {@code null} input\n      */\n     public boolean contains(CharRange range) {\n         if (range == null) {\n         /**\n          * Has the iterator not reached the end character yet?\n          *\n-         * @return <code>true</code> if the iterator has yet to reach the character date\n+         * @return {@code true} if the iterator has yet to reach the character date\n          */\n         public boolean hasNext() {\n             return hasNext;\n         /**\n          * Return the next character in the iteration\n          *\n-         * @return <code>Character</code> for the next character\n+         * @return {@code Character} for the next character\n          */\n         public Character next() {\n             if (hasNext == false) {\n--- a/src/main/java/org/apache/commons/lang3/CharSet.java\n+++ b/src/main/java/org/apache/commons/lang3/CharSet.java\n      * <p>Factory method to create a new CharSet using a special syntax.</p>\n      *\n      * <ul>\n-     *  <li><code>null</code> or empty string (\"\")\n+     *  <li>{@code null} or empty string (\"\")\n      * - set containing no characters</li>\n      *  <li>Single character, such as \"a\"\n      *  - set containing just that character</li>\n      * Each string is merged in with the set.</p>\n      *\n      * @param set  Strings to merge into the initial set\n-     * @throws NullPointerException if set is <code>null</code>\n+     * @throws NullPointerException if set is {@code null}\n      */\n     protected CharSet(String[] set) {\n         super();\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Add a set definition string to the <code>CharSet</code>.</p>\n+     * <p>Add a set definition string to the {@code CharSet}.</p>\n      *\n      * @param str  set definition string\n      */\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Does the <code>CharSet</code> contain the specified\n-     * character <code>ch</code>.</p>\n+     * <p>Does the {@code CharSet} contain the specified\n+     * character {@code ch}.</p>\n      *\n      * @param ch  the character to check for\n-     * @return <code>true</code> if the set contains the characters\n+     * @return {@code true} if the set contains the characters\n      */\n     public boolean contains(char ch) {\n         for (CharRange range : set) {\n     // Basics\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Compares two CharSet objects, returning true if they represent\n+     * <p>Compares two {@code CharSet} objects, returning true if they represent\n      * exactly the same set of characters defined in the same way.</p>\n      *\n-     * <p>The two sets <code>abc</code> and <code>a-c</code> are <i>not</i>\n+     * <p>The two sets {@code abc} and {@code a-c} are <i>not</i>\n      * equal according to this method.</p>\n      *\n      * @param obj  the object to compare to\n     }\n \n     /**\n-     * <p>Gets a hashCode compatible with the equals method.</p>\n-     *\n-     * @return a suitable hashCode\n+     * <p>Gets a hash code compatible with the equals method.</p>\n+     *\n+     * @return a suitable hash code\n      * @since 2.0\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/lang3/CharSetUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/CharSetUtils.java\n package org.apache.commons.lang3;\n \n /**\n- * <p>Operations on <code>CharSet</code>s.</p>\n+ * <p>Operations on {@code CharSet} instances.</p>\n  *\n- * <p>This class handles <code>null</code> input gracefully.\n- * An exception will not be thrown for a <code>null</code> input.\n+ * <p>This class handles {@code null} input gracefully.\n+ * An exception will not be thrown for a {@code null} input.\n  * Each method documents its behaviour in more detail.</p>\n  * \n  * <p>#ThreadSafe#</p>\n \n     /**\n      * <p>CharSetUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>CharSetUtils.evaluateSet(null);</code>.</p>\n+     * Instead, the class should be used as {@code CharSetUtils.evaluateSet(null);}.</p>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean instance\n      * to operate.</p>\n      * @see CharSet#getInstance(java.lang.String) for set-syntax.\n      * @param str  the string to squeeze, may be null\n      * @param set  the character set to use for manipulation, may be null\n-     * @return modified String, <code>null</code> if null string input\n+     * @return the modified String, {@code null} if null string input\n      */\n     public static String squeeze(String str, String set) {\n         if (StringUtils.isEmpty(str) || StringUtils.isEmpty(set)) {\n      * @see CharSet#getInstance(java.lang.String) for set-syntax.\n      * @param str  the string to squeeze, may be null\n      * @param set  the character set to use for manipulation, may be null\n-     * @return modified String, <code>null</code> if null string input\n+     * @return the modified String, {@code null} if null string input\n      */\n     public static String squeeze(String str, String[] set) {\n         if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {\n      * @see CharSet#getInstance(java.lang.String) for set-syntax.\n      * @param str  String to count characters in, may be null\n      * @param set  String set of characters to count, may be null\n-     * @return character count, zero if null string input\n+     * @return the character count, zero if null string input\n      */\n     public static int count(String str, String set) {\n         if (StringUtils.isEmpty(str) || StringUtils.isEmpty(set)) {\n      * @see CharSet#getInstance(java.lang.String) for set-syntax.\n      * @param str  String to count characters in, may be null\n      * @param set  String[] set of characters to count, may be null\n-     * @return character count, zero if null string input\n+     * @return the character count, zero if null string input\n      */\n     public static int count(String str, String[] set) {\n         if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {\n      * @see CharSet#getInstance(java.lang.String) for set-syntax.\n      * @param str  String to keep characters from, may be null\n      * @param set  String set of characters to keep, may be null\n-     * @return modified String, <code>null</code> if null string input\n+     * @return the modified String, {@code null} if null string input\n      * @since 2.0\n      */\n     public static String keep(String str, String set) {\n      * @see CharSet#getInstance(java.lang.String) for set-syntax.\n      * @param str  String to keep characters from, may be null\n      * @param set  String[] set of characters to keep, may be null\n-     * @return modified String, <code>null</code> if null string input\n+     * @return the modified String, {@code null} if null string input\n      * @since 2.0\n      */\n     public static String keep(String str, String[] set) {\n      * @see CharSet#getInstance(java.lang.String) for set-syntax.\n      * @param str  String to delete characters from, may be null\n      * @param set  String set of characters to delete, may be null\n-     * @return modified String, <code>null</code> if null string input\n+     * @return the modified String, {@code null} if null string input\n      */\n     public static String delete(String str, String set) {\n         if (StringUtils.isEmpty(str) || StringUtils.isEmpty(set)) {\n      * @see CharSet#getInstance(java.lang.String) for set-syntax.\n      * @param str  String to delete characters from, may be null\n      * @param set  String[] set of characters to delete, may be null\n-     * @return modified String, <code>null</code> if null string input\n+     * @return the modified String, {@code null} if null string input\n      */\n     public static String delete(String str, String[] set) {\n         if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {\n      * @param str String to modify characters within\n      * @param set String[] set of characters to modify\n      * @param expect whether to evaluate on match, or non-match\n-     * @return modified String\n+     * @return the modified String, not null\n      */\n     private static String modify(String str, String[] set, boolean expect) {\n         CharSet chars = CharSet.getInstance(set);", "timestamp": 1299253360, "metainfo": ""}