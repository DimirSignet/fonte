{"sha": "a7e2ca8503a2cb04a0f501fc65967eb88e149419", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Extends <code>java.text.MessageFormat</code> to allow pluggable/additional formatting\n  * options for embedded format elements.  Client code should specify a registry\n  * of <code>FormatFactory</code> instances associated with <code>String</code>\n- * format names.  This registry will be consulted when the format elements are \n+ * format names.  This registry will be consulted when the format elements are\n  * parsed from the message pattern.  In this way custom patterns can be specified,\n  * and the formats supported by <code>java.text.MessageFormat</code> can be overridden\n  * at the format and/or format style level (see MessageFormat).  A \"format element\"\n  * embedded in the message pattern is specified (<b>()?</b> signifies optionality):<br />\n- * <code>{</code><i>argument-number</i><b>(</b><code>,</code><i>format-name</i><b>(</b><code>,</code><i>format-style</i><b>)?)?</b><code>}</code>\n+ * <code>{</code><i>argument-number</i><b>(</b><code>,</code><i>format-name</i><b>\n+ * (</b><code>,</code><i>format-style</i><b>)?)?</b><code>}</code>\n  *\n  * <p>\n  * <i>format-name</i> and <i>format-style</i> values are trimmed of surrounding whitespace\n  * a configurable fashion.  These methods have thus been disabled and will throw\n  * <code>UnsupportedOperationException</code> if called.\n  * </p>\n- * \n+ *\n  * <p>Limitations inherited from <code>java.text.MessageFormat</code>:\n  * <ul>\n  * <li>When using \"choice\" subformats, support for nested formatting instructions is limited\n  *     <code>ExtendedMessageFormat</code>, is not guaranteed.</li>\n  * </ul>\n  * </p>\n- * \n+ *\n  * @author Apache Software Foundation\n  * @author Matt Benson\n  * @since 2.4\n \n     /**\n      * Create a new ExtendedMessageFormat for the default locale.\n-     * \n+     *\n      * @param pattern  the pattern to use, not null\n      * @throws IllegalArgumentException in case of a bad pattern.\n      */\n \n     /**\n      * Create a new ExtendedMessageFormat.\n-     * \n+     *\n      * @param pattern  the pattern to use, not null\n      * @param locale  the locale to use, not null\n      * @throws IllegalArgumentException in case of a bad pattern.\n \n     /**\n      * Create a new ExtendedMessageFormat for the default locale.\n-     * \n+     *\n      * @param pattern  the pattern to use, not null\n      * @param registry  the registry of format factories, may be null\n      * @throws IllegalArgumentException in case of a bad pattern.\n \n     /**\n      * Create a new ExtendedMessageFormat.\n-     * \n+     *\n      * @param pattern  the pattern to use, not null\n      * @param locale  the locale to use, not null\n      * @param registry  the registry of format factories, may be null\n \n     /**\n      * Apply the specified pattern.\n-     * \n+     *\n      * @param pattern String\n      */\n     @Override\n         toPattern = insertFormats(super.toPattern(), foundDescriptions);\n         if (containsElements(foundFormats)) {\n             Format[] origFormats = getFormats();\n-            // only loop over what we know we have, as MessageFormat on Java 1.3 \n+            // only loop over what we know we have, as MessageFormat on Java 1.3\n             // seems to provide an extra format element:\n             int i = 0;\n             for (Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++) {\n \n     /**\n      * Throws UnsupportedOperationException - see class Javadoc for details.\n-     * \n+     *\n      * @param formatElementIndex format element index\n      * @param newFormat the new format\n      * @throws UnsupportedOperationException\n \n     /**\n      * Throws UnsupportedOperationException - see class Javadoc for details.\n-     * \n+     *\n      * @param argumentIndex argument index\n      * @param newFormat the new format\n      * @throws UnsupportedOperationException\n \n     /**\n      * Throws UnsupportedOperationException - see class Javadoc for details.\n-     * \n+     *\n      * @param newFormats new formats\n      * @throws UnsupportedOperationException\n      */\n \n     /**\n      * Throws UnsupportedOperationException - see class Javadoc for details.\n-     * \n+     *\n      * @param newFormats new formats\n      * @throws UnsupportedOperationException\n      */\n \n     /**\n      * Get a custom format from a format description.\n-     * \n+     *\n      * @param desc String\n      * @return Format\n      */\n \n     /**\n      * Read the argument index from the current format element\n-     * \n+     *\n      * @param pattern pattern to parse\n      * @param pos current parse position\n      * @return argument index\n \n     /**\n      * Parse the format component of a format element.\n-     * \n+     *\n      * @param pattern string to parse\n      * @param pos current parse position\n      * @return Format description String\n \n     /**\n      * Consume whitespace from the current parse position.\n-     * \n+     *\n      * @param pattern String to read\n      * @param pos current position\n      */\n \n     /**\n      * Convenience method to advance parse position by 1\n-     * \n+     *\n      * @param pos ParsePosition\n      * @return <code>pos</code>\n      */\n     /**\n      * Consume a quoted string, adding it to <code>appendTo</code> if\n      * specified.\n-     * \n+     *\n      * @param pattern pattern to parse\n      * @param pos current parse position\n      * @param appendTo optional StringBuffer to append\n \n     /**\n      * Consume quoted string only\n-     * \n+     *\n      * @param pattern pattern to parse\n      * @param pos current parse position\n      * @param escapingOn whether to process escaped quotes", "timestamp": 1300479791, "metainfo": ""}