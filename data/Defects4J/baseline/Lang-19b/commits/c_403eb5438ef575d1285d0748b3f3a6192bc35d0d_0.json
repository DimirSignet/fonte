{"sha": "403eb5438ef575d1285d0748b3f3a6192bc35d0d", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityEscaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityEscaper.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Translates codepoints to their XML numeric entity escaped value.\n- * \n+ *\n  * @author Apache Software Foundation\n  * @since 3.0\n  * @version $Id$\n     private final boolean between;\n \n     /**\n-     * <p>Constructs a <code>NumericEntityEscaper</code> for the specified range. This is \n+     * <p>Constructs a <code>NumericEntityEscaper</code> for the specified range. This is\n      * the underlying method for the other constructors/builders. The <code>below</code>\n-     * and <code>above</code> boundaries are inclusive when <code>between</code> is \n+     * and <code>above</code> boundaries are inclusive when <code>between</code> is\n      * <code>true</code> and exclusive when it is <code>false</code>. </p>\n      *\n      * @param below int value representing the lowest codepoint boundary\n     /**\n      * <p>Constructs a <code>NumericEntityEscaper</code> for all characters. </p>\n      */\n-    public NumericEntityEscaper() { \n+    public NumericEntityEscaper() {\n         this(0, Integer.MAX_VALUE, true);\n     }\n \n      * <p>Constructs a <code>NumericEntityEscaper</code> below the specified value (exclusive). </p>\n      *\n      * @param codepoint below which to escape\n+     * @return the newly created {@code NumericEntityEscaper} instance\n      */\n     public static NumericEntityEscaper below(int codepoint) {\n         return outsideOf(codepoint, Integer.MAX_VALUE);\n      * <p>Constructs a <code>NumericEntityEscaper</code> above the specified value (exclusive). </p>\n      *\n      * @param codepoint above which to escape\n+     * @return the newly created {@code NumericEntityEscaper} instance\n      */\n     public static NumericEntityEscaper above(int codepoint) {\n         return outsideOf(0, codepoint);\n      *\n      * @param codepointLow above which to escape\n      * @param codepointHigh below which to escape\n+     * @return the newly created {@code NumericEntityEscaper} instance\n      */\n     public static NumericEntityEscaper between(int codepointLow, int codepointHigh) {\n         return new NumericEntityEscaper(codepointLow, codepointHigh, true);\n      *\n      * @param codepointLow below which to escape\n      * @param codepointHigh above which to escape\n+     * @return the newly created {@code NumericEntityEscaper} instance\n      */\n     public static NumericEntityEscaper outsideOf(int codepointLow, int codepointHigh) {\n         return new NumericEntityEscaper(codepointLow, codepointHigh, false);", "timestamp": 1300480193, "metainfo": ""}