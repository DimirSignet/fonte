{"sha": "fc0b4fb3ae3a54cfde1f83c39a26b340f613c811", "log": "respect @javax.enterprise.util.Nonbinding  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n     };\n \n     /**\n+     * Statically cached class instance for the CDI Nonbinding annotation.\n+     */\n+    private static final Class<? extends Annotation> NONBINDING_ANNOTATION_TYPE;\n+    static {\n+        Class<?> nonbindingAnnotationType = null;\n+        try {\n+            nonbindingAnnotationType = ClassUtils.getClass(\"javax.enterprise.util.Nonbinding\");\n+        } catch (ClassNotFoundException e) {\n+        }\n+        if (nonbindingAnnotationType != null\n+                && Annotation.class.isAssignableFrom(nonbindingAnnotationType)) {\n+            //just checked:\n+            @SuppressWarnings(\"unchecked\")\n+            Class<? extends Annotation> stronglyTyped = (Class<? extends Annotation>) nonbindingAnnotationType;\n+            NONBINDING_ANNOTATION_TYPE = stronglyTyped;\n+        } else {\n+            NONBINDING_ANNOTATION_TYPE = null;\n+        }\n+    }\n+\n+    /**\n      * <p>{@code AnnotationUtils} instances should NOT be constructed in\n      * standard programming. Instead, the class should be used statically.</p>\n      *\n         try {\n             for (Method m : type.getDeclaredMethods()) {\n                 if (m.getParameterTypes().length == 0\n-                        && isValidAnnotationMemberType(m.getReturnType())) {\n+                        && isValidAnnotationMemberType(m.getReturnType())\n+                        && !isNonbindingMember(m)) {\n                     Object v1 = m.invoke(a1);\n                     Object v2 = m.invoke(a2);\n                     if (!memberEquals(m.getReturnType(), v1, v2)) {\n         return Arrays.hashCode((Object[]) o);\n     }\n \n+    /**\n+     * Helper method to look for the CDI Nonbinding annotation on an Annotation member.\n+     * @param accessor the accessor method to check\n+     * @return whether the Nonbinding annotation was found\n+     */\n+    private static boolean isNonbindingMember(Method accessor) {\n+        return NONBINDING_ANNOTATION_TYPE != null\n+                && accessor.isAnnotationPresent(NONBINDING_ANNOTATION_TYPE);\n+    }\n }", "timestamp": 1300490709, "metainfo": ""}