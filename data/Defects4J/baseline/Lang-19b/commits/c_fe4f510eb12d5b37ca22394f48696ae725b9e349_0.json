{"sha": "fe4f510eb12d5b37ca22394f48696ae725b9e349", "log": "Avoid throwing checked exceptions from AnnotationUtils.hashCode()  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n                     }\n                 }\n             }\n-        } catch (IllegalAccessException e) {\n-            return false;\n-        } catch (InvocationTargetException e) {\n+        } catch (IllegalAccessException ex) {\n+            return false;\n+        } catch (InvocationTargetException ex) {\n             return false;\n         }\n         return true;\n      * @throws IllegalAccessException if thrown during annotation access\n      * @throws InvocationTargetException if thrown during annotation access\n      */\n-    public static int hashCode(Annotation a)\n-            throws IllegalAccessException, InvocationTargetException {\n+    public static int hashCode(Annotation a) {\n         int result = 0;\n         Class<? extends Annotation> type = a.annotationType();\n         for (Method m : type.getDeclaredMethods()) {\n-            Object value = m.invoke(a);\n-            if (value == null) {\n-                throw new IllegalStateException(\n-                        String.format(\"Annotation method %s returned null\", m));\n-            }\n-            result += hashMember(m.getName(), value);\n+            try {\n+                Object value = m.invoke(a);\n+                if (value == null) {\n+                    throw new IllegalStateException(\n+                            String.format(\"Annotation method %s returned null\", m));\n+                }\n+                result += hashMember(m.getName(), value);\n+            } catch (RuntimeException ex) {\n+                throw ex;\n+            } catch (Exception ex) {\n+                throw new RuntimeException(ex);\n+            }\n         }\n         return result;\n     }\n             }\n             try {\n                 builder.append(m.getName(), m.invoke(a));\n-            } catch (RuntimeException e) {\n-                throw e;\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n+            } catch (RuntimeException ex) {\n+                throw ex;\n+            } catch (Exception ex) {\n+                throw new RuntimeException(ex);\n             }\n         }\n         return builder.build();", "timestamp": 1299240701, "metainfo": ""}