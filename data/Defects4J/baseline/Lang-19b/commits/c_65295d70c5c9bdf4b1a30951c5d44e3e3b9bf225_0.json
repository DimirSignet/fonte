{"sha": "65295d70c5c9bdf4b1a30951c5d44e3e3b9bf225", "log": "Removing the CharSequenceUtils.length method in favour of the StringUtils.length method  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n public class CharSequenceUtils {\n \n     /**\n-     * Gets a CharSequence length or <code>0</code> if the CharSequence is\n-     * <code>null</code>.\n-     *\n-     * @param cs\n-     *            a CharSequence or <code>null</code>\n-     * @return CharSequence length or <code>0</code> if the CharSequence is\n-     *         <code>null</code>.\n-     * @since 3.0\n-     */\n-    public static int length(CharSequence cs) {\n-        return cs == null ? 0 : cs.length();\n-    }\n-\n-    /**\n      * Returns a new <code>CharSequence</code> that is a subsequence of this\n      * sequence starting with the <code>char</code> value at the specified\n      * index. The length (in <code>char</code>s) of the returned sequence is\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n      * @return CharSequence length or <code>0</code> if the CharSequence is\n      *         <code>null</code>.\n      * @since 2.4\n-     * @deprecated See {@link CharSequenceUtils#length(CharSequence)}\n      * @since 3.0 Changed signature from length(String) to length(CharSequence)\n      */\n-    @Deprecated\n     public static int length(CharSequence cs) {\n-        return CharSequenceUtils.length(cs);\n+        return cs == null ? 0 : cs.length();\n     }\n \n     // Centering\n--- a/src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java\n  * @version $Id$\n  */\n public class CharSequenceUtilsTest extends TestCase {\n-\n-    public void testLength_CharBuffer() {\n-        Assert.assertEquals(0, CharSequenceUtils.length(CharBuffer.wrap(\"\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(CharBuffer.wrap(\"A\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(CharBuffer.wrap(\" \")));\n-        Assert.assertEquals(8, CharSequenceUtils.length(CharBuffer.wrap(\"ABCDEFGH\")));\n-    }\n-\n-    public void testLength_String() {\n-        Assert.assertEquals(0, CharSequenceUtils.length(null));\n-        Assert.assertEquals(0, CharSequenceUtils.length(\"\"));\n-        Assert.assertEquals(1, CharSequenceUtils.length(\"A\"));\n-        Assert.assertEquals(1, CharSequenceUtils.length(\" \"));\n-        Assert.assertEquals(8, CharSequenceUtils.length(\"ABCDEFGH\"));\n-    }\n-\n-    public void testLength_StringBuffer() {\n-        Assert.assertEquals(0, CharSequenceUtils.length(new StringBuffer(\"\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuffer(\"A\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuffer(\" \")));\n-        Assert.assertEquals(8, CharSequenceUtils.length(new StringBuffer(\"ABCDEFGH\")));\n-    }\n-\n-    public void testLength_StringBuilder() {\n-        Assert.assertEquals(0, CharSequenceUtils.length(new StringBuilder(\"\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuilder(\"A\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuilder(\" \")));\n-        Assert.assertEquals(8, CharSequenceUtils.length(new StringBuilder(\"ABCDEFGH\")));\n-    }\n \n     public void testSubSequence() {\n         //\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n         assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\n     }\n \n-    @SuppressWarnings(\"deprecation\")\n     public void testLengthString() {\n         assertEquals(0, StringUtils.length(null));\n         assertEquals(0, StringUtils.length(\"\"));\n         assertEquals(8, StringUtils.length(\"ABCDEFGH\"));\n     }\n \n-    @SuppressWarnings(\"deprecation\")\n     public void testLengthStringBuffer() {\n         assertEquals(0, StringUtils.length(new StringBuffer(\"\")));\n         assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY)));\n         assertEquals(8, StringUtils.length(new StringBuffer(\"ABCDEFGH\")));\n     }\n \n-    @SuppressWarnings(\"deprecation\")\n     public void testLengthStringBuilder() {\n         assertEquals(0, StringUtils.length(new StringBuilder(\"\")));\n         assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY)));\n         assertEquals(8, StringUtils.length(new StringBuilder(\"ABCDEFGH\")));\n     }\n     \n+    public void testLength_CharBuffer() {\n+        assertEquals(0, StringUtils.length(CharBuffer.wrap(\"\")));\n+        assertEquals(1, StringUtils.length(CharBuffer.wrap(\"A\")));\n+        assertEquals(1, StringUtils.length(CharBuffer.wrap(\" \")));\n+        assertEquals(8, StringUtils.length(CharBuffer.wrap(\"ABCDEFGH\")));\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testCenter_StringInt() {\n         assertEquals(null, StringUtils.center(null, -1));", "timestamp": 1282517871, "metainfo": ""}