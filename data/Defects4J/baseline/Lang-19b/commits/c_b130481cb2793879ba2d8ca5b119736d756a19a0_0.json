{"sha": "b130481cb2793879ba2d8ca5b119736d756a19a0", "log": "Reorder indexOf methods in file   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.90 2003/08/01 23:54:41 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.91 2003/08/01 23:58:30 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n         return (str.indexOf(searchStr) >= 0);\n     }\n     \n-    // IndexOfAny strings\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Find the first index of any of a set of potential substrings.</p>\n-     *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A <code>null</code> or zero length search array will return <code>-1</code>.\n-     * A <code>null</code> search array entry will be ignored, but a search\n-     * array containing \"\" will return <code>0</code> if <code>str</code> is not\n-     * null. This method uses {@link String#indexOf(String)}.</p>\n-     * \n-     * <pre>\n-     * StringUtils.indexOfAny(null, *)                     = -1\n-     * StringUtils.indexOfAny(*, null)                     = -1\n-     * StringUtils.indexOfAny(*, [])                       = -1\n-     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"])   = 2\n-     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"])   = 2\n-     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"])   = -1\n-     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"zab\",\"aby\"]) = 1\n-     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"\"])          = 0\n-     * StringUtils.indexOfAny(\"\", [\"\"])                    = 0\n-     * StringUtils.indexOfAny(\"\", [\"a\"])                   = -1\n-     * </pre>\n-     * \n-     * @param str  the String to check, may be null\n-     * @param searchStrs  the Strings to search for, may be null\n-     * @return the first index of any of the searchStrs in str, -1 if no match\n-     */\n-    public static int indexOfAny(String str, String[] searchStrs) {\n-        if ((str == null) || (searchStrs == null)) {\n-            return -1;\n-        }\n-        int sz = searchStrs.length;\n-\n-        // String's can't have a MAX_VALUEth index.\n-        int ret = Integer.MAX_VALUE;\n-\n-        int tmp = 0;\n-        for (int i = 0; i < sz; i++) {\n-            String search = searchStrs[i];\n-            if (search == null) {\n-                continue;\n-            }\n-            tmp = str.indexOf(search);\n-            if (tmp == -1) {\n-                continue;\n-            }\n-\n-            if (tmp < ret) {\n-                ret = tmp;\n-            }\n-        }\n-\n-        return (ret == Integer.MAX_VALUE) ? -1 : ret;\n-    }\n-\n-    /**\n-     * <p>Find the latest index of any of a set of potential substrings.</p>\n-     *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A <code>null</code> search array will return <code>-1</code>.\n-     * A <code>null</code> or zero length search array entry will be ignored,\n-     * but a search array containing \"\" will return the length of <code>str</code> \n-     * if <code>str</code> is not null. This method uses {@link String#indexOf(String)}</p>\n-     * \n-     * <pre>\n-     * StringUtils.lastIndexOfAny(null, *)                   = -1\n-     * StringUtils.lastIndexOfAny(*, null)                   = -1\n-     * StringUtils.lastIndexOfAny(*, [])                     = -1\n-     * StringUtils.lastIndexOfAny(*, [null])                 = -1\n-     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) = 6\n-     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"]) = 6\n-     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n-     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n-     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"\"])   = 10\n-     * </pre>\n-     * \n-     * @param str  the String to check, may be null\n-     * @param searchStrs  the Strings to search for, may be null\n-     * @return the last index of any of the Strings, -1 if no match\n-     */\n-    public static int lastIndexOfAny(String str, String[] searchStrs) {\n-        if ((str == null) || (searchStrs == null)) {\n-            return -1;\n-        }\n-        int sz = searchStrs.length;\n-        int ret = -1;\n-        int tmp = 0;\n-        for (int i = 0; i < sz; i++) {\n-            String search = searchStrs[i];\n-            if (search == null) {\n-                continue;\n-            }\n-            tmp = str.lastIndexOf(search);\n-            if (tmp > ret) {\n-                ret = tmp;\n-            }\n-        }\n-        return ret;\n-    }\n-\n     // IndexOfAny chars\n     //-----------------------------------------------------------------------\n     /**\n         return containsNone(str, invalidChars.toCharArray());\n     }\n     \n+    // IndexOfAny strings\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the first index of any of a set of potential substrings.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A <code>null</code> or zero length search array will return <code>-1</code>.\n+     * A <code>null</code> search array entry will be ignored, but a search\n+     * array containing \"\" will return <code>0</code> if <code>str</code> is not\n+     * null. This method uses {@link String#indexOf(String)}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.indexOfAny(null, *)                     = -1\n+     * StringUtils.indexOfAny(*, null)                     = -1\n+     * StringUtils.indexOfAny(*, [])                       = -1\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"])   = 2\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"])   = 2\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"])   = -1\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"zab\",\"aby\"]) = 1\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"\"])          = 0\n+     * StringUtils.indexOfAny(\"\", [\"\"])                    = 0\n+     * StringUtils.indexOfAny(\"\", [\"a\"])                   = -1\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchStrs  the Strings to search for, may be null\n+     * @return the first index of any of the searchStrs in str, -1 if no match\n+     */\n+    public static int indexOfAny(String str, String[] searchStrs) {\n+        if ((str == null) || (searchStrs == null)) {\n+            return -1;\n+        }\n+        int sz = searchStrs.length;\n+\n+        // String's can't have a MAX_VALUEth index.\n+        int ret = Integer.MAX_VALUE;\n+\n+        int tmp = 0;\n+        for (int i = 0; i < sz; i++) {\n+            String search = searchStrs[i];\n+            if (search == null) {\n+                continue;\n+            }\n+            tmp = str.indexOf(search);\n+            if (tmp == -1) {\n+                continue;\n+            }\n+\n+            if (tmp < ret) {\n+                ret = tmp;\n+            }\n+        }\n+\n+        return (ret == Integer.MAX_VALUE) ? -1 : ret;\n+    }\n+\n+    /**\n+     * <p>Find the latest index of any of a set of potential substrings.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A <code>null</code> search array will return <code>-1</code>.\n+     * A <code>null</code> or zero length search array entry will be ignored,\n+     * but a search array containing \"\" will return the length of <code>str</code> \n+     * if <code>str</code> is not null. This method uses {@link String#indexOf(String)}</p>\n+     * \n+     * <pre>\n+     * StringUtils.lastIndexOfAny(null, *)                   = -1\n+     * StringUtils.lastIndexOfAny(*, null)                   = -1\n+     * StringUtils.lastIndexOfAny(*, [])                     = -1\n+     * StringUtils.lastIndexOfAny(*, [null])                 = -1\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) = 6\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"]) = 6\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"\"])   = 10\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchStrs  the Strings to search for, may be null\n+     * @return the last index of any of the Strings, -1 if no match\n+     */\n+    public static int lastIndexOfAny(String str, String[] searchStrs) {\n+        if ((str == null) || (searchStrs == null)) {\n+            return -1;\n+        }\n+        int sz = searchStrs.length;\n+        int ret = -1;\n+        int tmp = 0;\n+        for (int i = 0; i < sz; i++) {\n+            String search = searchStrs[i];\n+            if (search == null) {\n+                continue;\n+            }\n+            tmp = str.lastIndexOf(search);\n+            if (tmp > ret) {\n+                ret = tmp;\n+            }\n+        }\n+        return ret;\n+    }\n+\n     // Substring\n     //-----------------------------------------------------------------------\n     /**", "timestamp": 1059782310, "metainfo": ""}