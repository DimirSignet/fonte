{"sha": "2b0b739b2e70a67ba7c6452b2ea5ced59bdfb855", "log": "Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n         return parseDateWithLeniency(str, parsePatterns, false);\n     }\n \n+    /**\n+     * <p>Parses a string representing a date by trying a variety of different parsers.</p>\n+     * \n+     * <p>The parse will try each parse pattern in turn.\n+     * A parse is only deemed successful if it parses the whole of the input string.\n+     * If no parse patterns match, a ParseException is thrown.</p>\n+     * \n+     * @param str  the date to parse, not null\n+     * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null\n+     * @param lenient Specify whether or not date/time parsing is to be lenient.\n+     * @return the parsed date\n+     * @throws IllegalArgumentException if the date string or pattern array is null\n+     * @throws ParseException if none of the date patterns were suitable\n+     * @see java.util.Calender#isLenient()\n+     */\n     private static Date parseDateWithLeniency(String str, String[] parsePatterns,\n             boolean lenient) throws ParseException {\n         if (str == null || parsePatterns == null) {", "timestamp": 1265025611, "metainfo": ""}