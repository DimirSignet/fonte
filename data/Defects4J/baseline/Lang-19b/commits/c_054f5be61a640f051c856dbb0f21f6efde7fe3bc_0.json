{"sha": "054f5be61a640f051c856dbb0f21f6efde7fe3bc", "log": "LANG-404 Add Calendar flavour format methods to DateFormatUtils  ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n  */\n package org.apache.commons.lang.time;\n \n+import java.util.Calendar;\n import java.util.Date;\n import java.util.Locale;\n import java.util.TimeZone;\n     public static String format(Date date, String pattern) {\n         return format(date, pattern, null, null);\n     }\n+\n+    /**\n+     * <p>Formats a calendar into a specific pattern.</p>\n+     * \n+     * @param calendar  the calendar to format\n+     * @param pattern  the pattern to use to format the calendar\n+     * @return the formatted calendar\n+     * @see FastDateFormat#format(Calendar)\n+     * @since 2.4\n+     */\n+    public static String format(Calendar calendar, String pattern) {\n+        return format(calendar, pattern, null, null);\n+    }\n     \n     /**\n      * <p>Formats a date/time into a specific pattern in a time zone.</p>\n     }\n \n     /**\n+     * <p>Formats a calendar into a specific pattern in a time zone.</p>\n+     * \n+     * @param calendar  the calendar to format\n+     * @param pattern  the pattern to use to format the calendar\n+     * @param timeZone  the time zone  to use, may be <code>null</code>\n+     * @return the formatted calendar\n+     * @see FastDateFormat#format(Calendar)\n+     * @since 2.4\n+     */\n+    public static String format(Calendar calendar, String pattern, TimeZone timeZone) {\n+        return format(calendar, pattern, timeZone, null);\n+    }\n+\n+    /**\n      * <p>Formats a date/time into a specific pattern in a locale.</p>\n      * \n      * @param millis  the date to format expressed in milliseconds\n      */\n     public static String format(Date date, String pattern, Locale locale) {\n         return format(date, pattern, null, locale);\n+    }\n+\n+    /**\n+     * <p>Formats a calendar into a specific pattern in a locale.</p>\n+     * \n+     * @param calendar  the calendar to format\n+     * @param pattern  the pattern to use to format the calendar\n+     * @param locale  the locale to use, may be <code>null</code>\n+     * @return the formatted calendar\n+     * @see FastDateFormat#format(Calendar)\n+     * @since 2.4\n+     */\n+    public static String format(Calendar calendar, String pattern, Locale locale) {\n+        return format(calendar, pattern, null, locale);\n     }\n \n     /**\n         return df.format(date);\n     }\n \n+    /**\n+     * <p>Formats a calendar into a specific pattern in a time zone  and locale.</p>\n+     * \n+     * @param calendar  the calendar to format\n+     * @param pattern  the pattern to use to format the calendar\n+     * @param timeZone  the time zone  to use, may be <code>null</code>\n+     * @param locale  the locale to use, may be <code>null</code>\n+     * @return the formatted calendar\n+     * @see FastDateFormat#format(Calendar)\n+     * @since 2.4\n+     */\n+    public static String format(Calendar calendar, String pattern, TimeZone timeZone, Locale locale) {\n+        FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);\n+        return df.format(calendar);\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java\n         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), \"yyyyMdH\", Locale.US));\n     }\n     \n+    //-----------------------------------------------------------------------\n+    public void testFormatCalendar() {\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        c.set(2005,0,1,12,0,0);\n+        c.setTimeZone(TimeZone.getDefault());\n+        StringBuffer buffer = new StringBuffer ();\n+        int year = c.get(Calendar.YEAR);\n+        int month = c.get(Calendar.MONTH) + 1;\n+        int day = c.get(Calendar.DAY_OF_MONTH);\n+        int hour = c.get(Calendar.HOUR_OF_DAY);\n+        buffer.append (year);\n+        buffer.append(month);\n+        buffer.append(day);\n+        buffer.append(hour);\n+        assertEquals(buffer.toString(), DateFormatUtils.format(c, \"yyyyMdH\"));\n+        \n+        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\"));\n+        \n+        assertEquals(buffer.toString(), DateFormatUtils.format(c, \"yyyyMdH\", Locale.US));\n+        \n+        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\", Locale.US));\n+    }\n+    \n     public void testFormatUTC() {\n         Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n         c.set(2005,0,1,12,0,0);", "timestamp": 1201274432, "metainfo": ""}