{"sha": "19d53c6033939393fbcb08d90415ff63ae3dfe27", "log": "Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n import org.apache.commons.lang3.exception.CloneFailedException;\n \n /**\n- * <p>Operations on <code>Object</code>.</p>\n+ * <p>Operations on {@code Object}.</p>\n  * \n- * <p>This class tries to handle <code>null</code> input gracefully.\n- * An exception will generally not be thrown for a <code>null</code> input.\n+ * <p>This class tries to handle {@code null} input gracefully.\n+ * An exception will generally not be thrown for a {@code null} input.\n  * Each method documents its behaviour in more detail.</p>\n  *\n  * <p>#ThreadSafe#</p>\n public class ObjectUtils {\n \n     /**\n-     * <p>Singleton used as a <code>null</code> placeholder where\n-     * <code>null</code> has another meaning.</p>\n-     *\n-     * <p>For example, in a <code>HashMap</code> the\n+     * <p>Singleton used as a {@code null} placeholder where\n+     * {@code null} has another meaning.</p>\n+     *\n+     * <p>For example, in a {@code HashMap} the\n      * {@link java.util.HashMap#get(java.lang.Object)} method returns\n-     * <code>null</code> if the <code>Map</code> contains\n-     * <code>null</code> or if there is no matching key. The\n-     * <code>Null</code> placeholder can be used to distinguish between\n-     * these two cases.</p>\n-     *\n-     * <p>Another example is <code>Hashtable</code>, where <code>null</code>\n+     * {@code null} if the {@code Map} contains {@code null} or if there\n+     * is no matching key. The {@code Null} placeholder can be used to\n+     * distinguish between these two cases.</p>\n+     *\n+     * <p>Another example is {@code Hashtable}, where {@code null}\n      * cannot be stored.</p>\n      *\n      * <p>This instance is Serializable.</p>\n     public static final Null NULL = new Null();\n     \n     /**\n-     * <p><code>ObjectUtils</code> instances should NOT be constructed in\n-     * standard programming. Instead, the class should be used as\n-     * <code>ObjectUtils.defaultIfNull(\"a\",\"b\");</code>.</p>\n-     *\n-     * <p>This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.</p>\n+     * <p>{@code ObjectUtils} instances should NOT be constructed in\n+     * standard programming. Instead, the static methods on the class should\n+     * be used, such as {@code ObjectUtils.defaultIfNull(\"a\",\"b\");}.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n      */\n     public ObjectUtils() {\n         super();\n     // Defaulting\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Returns a default value if the object passed is\n-     * <code>null</code>.</p>\n+     * <p>Returns a default value if the object passed is {@code null}.</p>\n      * \n      * <pre>\n      * ObjectUtils.defaultIfNull(null, null)      = null\n      * ObjectUtils.defaultIfNull(Boolean.TRUE, *) = Boolean.TRUE\n      * </pre>\n      *\n-     * @param object  the <code>Object</code> to test, may be <code>null</code>\n-     * @param defaultValue  the default value to return, may be <code>null</code>\n-     * @return <code>object</code> if it is not <code>null</code>, defaultValue otherwise\n+     * @param object  the {@code Object} to test, may be {@code null}\n+     * @param defaultValue  the default value to return, may be {@code null}\n+     * @return {@code object} if it is not {@code null}, defaultValue otherwise\n      */\n     public static <T> T defaultIfNull(T object, T defaultValue) {\n         return object != null ? object : defaultValue;\n     }\n \n     /**\n-     * <p>Returns the first value in the array which is not <code>null</code>.\n-     * If all the values are <code>null</code> or the array is <code>null</code>\n-     * or empty then <code>null</code> is returned.</p>\n+     * <p>Returns the first value in the array which is not {@code null}.\n+     * If all the values are {@code null} or the array is {@code null}\n+     * or empty then {@code null} is returned.</p>\n      * \n      * <pre>\n      * ObjectUtils.firstNonNull(null, null)      = null\n      * ObjectUtils.firstNonNull()                = null\n      * </pre>\n      *\n-     * @param values  the values to test, may be <code>null</code> or empty\n-     * @return the first value from <code>values</code> which is not <code>null</code>,\n-     *  or <code>null</code> if there are no non-null values\n+     * @param values  the values to test, may be {@code null} or empty\n+     * @return the first value from {@code values} which is not {@code null},\n+     *  or {@code null} if there are no non-null values\n      */\n     public static <T> T firstNonNull(T... values) {\n         if (values != null) {\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Compares two objects for equality, where either one or both\n-     * objects may be <code>null</code>.</p>\n+     * objects may be {@code null}.</p>\n      *\n      * <pre>\n      * ObjectUtils.equals(null, null)                  = true\n      * ObjectUtils.equals(Boolean.TRUE, Boolean.FALSE) = false\n      * </pre>\n      *\n-     * @param object1  the first object, may be <code>null</code>\n-     * @param object2  the second object, may be <code>null</code>\n-     * @return <code>true</code> if the values of both objects are the same\n+     * @param object1  the first object, may be {@code null}\n+     * @param object2  the second object, may be {@code null}\n+     * @return {@code true} if the values of both objects are the same\n      */\n     public static boolean equals(Object object1, Object object2) {\n         if (object1 == object2) {\n \n     /**\n      * <p>Compares two objects for inequality, where either one or both\n-     * objects may be <code>null</code>.</p>\n+     * objects may be {@code null}.</p>\n      *\n      * <pre>\n      * ObjectUtils.notEqual(null, null)                  = false\n      * ObjectUtils.notEqual(Boolean.TRUE, Boolean.FALSE) = true\n      * </pre>\n      *\n-     * @param object1  the first object, may be <code>null</code>\n-     * @param object2  the second object, may be <code>null</code>\n-     * @return <code>false</code> if the values of both objects are the same\n+     * @param object1  the first object, may be {@code null}\n+     * @param object2  the second object, may be {@code null}\n+     * @return {@code false} if the values of both objects are the same\n      */\n     public static boolean notEqual(Object object1, Object object2) {\n         return ObjectUtils.equals(object1, object2) == false;\n \n     /**\n      * <p>Gets the hash code of an object returning zero when the\n-     * object is <code>null</code>.</p>\n+     * object is {@code null}.</p>\n      *\n      * <pre>\n      * ObjectUtils.hashCode(null)   = 0\n      * ObjectUtils.hashCode(obj)    = obj.hashCode()\n      * </pre>\n      *\n-     * @param obj  the object to obtain the hash code of, may be <code>null</code>\n+     * @param obj  the object to obtain the hash code of, may be {@code null}\n      * @return the hash code of the object, or zero if null\n      * @since 2.1\n      */\n     // Identity ToString\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Gets the toString that would be produced by <code>Object</code>\n-     * if a class did not override toString itself. <code>null</code>\n-     * will return <code>null</code>.</p>\n+     * <p>Gets the toString that would be produced by {@code Object}\n+     * if a class did not override toString itself. {@code null}\n+     * will return {@code null}.</p>\n      *\n      * <pre>\n      * ObjectUtils.identityToString(null)         = null\n      * </pre>\n      *\n      * @param object  the object to create a toString for, may be\n-     *  <code>null</code>\n-     * @return the default toString text, or <code>null</code> if\n-     *  <code>null</code> passed in\n+     *  {@code null}\n+     * @return the default toString text, or {@code null} if\n+     *  {@code null} passed in\n      */\n     public static String identityToString(Object object) {\n         if (object == null) {\n     }\n \n     /**\n-     * <p>Appends the toString that would be produced by <code>Object</code>\n-     * if a class did not override toString itself. <code>null</code>\n+     * <p>Appends the toString that would be produced by {@code Object}\n+     * if a class did not override toString itself. {@code null}\n      * will throw a NullPointerException for either of the two parameters. </p>\n      *\n      * <pre>\n     // ToString\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Gets the <code>toString</code> of an <code>Object</code> returning\n-     * an empty string (\"\") if <code>null</code> input.</p>\n+     * <p>Gets the {@code toString} of an {@code Object} returning\n+     * an empty string (\"\") if {@code null} input.</p>\n      * \n      * <pre>\n      * ObjectUtils.toString(null)         = \"\"\n      * \n      * @see StringUtils#defaultString(String)\n      * @see String#valueOf(Object)\n-     * @param obj  the Object to <code>toString</code>, may be null\n-     * @return the passed in Object's toString, or nullStr if <code>null</code> input\n+     * @param obj  the Object to {@code toString}, may be null\n+     * @return the passed in Object's toString, or nullStr if {@code null} input\n      * @since 2.0\n      */\n     public static String toString(Object obj) {\n     }\n \n     /**\n-     * <p>Gets the <code>toString</code> of an <code>Object</code> returning\n-     * a specified text if <code>null</code> input.</p>\n+     * <p>Gets the {@code toString} of an {@code Object} returning\n+     * a specified text if {@code null} input.</p>\n      * \n      * <pre>\n      * ObjectUtils.toString(null, null)           = null\n      * \n      * @see StringUtils#defaultString(String,String)\n      * @see String#valueOf(Object)\n-     * @param obj  the Object to <code>toString</code>, may be null\n-     * @param nullStr  the String to return if <code>null</code> input, may be null\n-     * @return the passed in Object's toString, or nullStr if <code>null</code> input\n+     * @param obj  the Object to {@code toString}, may be null\n+     * @param nullStr  the String to return if {@code null} input, may be null\n+     * @return the passed in Object's toString, or nullStr if {@code null} input\n      * @since 2.0\n      */\n     public static String toString(Object obj, String nullStr) {\n     // Min/Max\n     //-----------------------------------------------------------------------\n     /**\n-     * Null safe comparison of Comparables.\n+     * <p>Null safe comparison of Comparables.</p>\n      * \n      * @param values the set of comparable values, may be null\n      * @return\n      *  <ul>\n      *   <li>If any objects are non-null and unequal, the lesser object.\n      *   <li>If all objects are non-null and equal, the first.\n-     *   <li>If any of the comparables are null, the lesser of the non-null object.\n+     *   <li>If any of the comparables are null, the lesser of the non-null objects.\n      *   <li>If all the comparables are null, null is returned.\n      *  </ul>\n      */\n     }\n \n     /**\n-     * Null safe comparison of Comparables.\n+     * <p>Null safe comparison of Comparables.</p>\n      * \n      * @param values the set of comparable values, may be null\n      * @return\n      *  <ul>\n      *   <li>If any objects are non-null and unequal, the greater object.\n      *   <li>If all objects are non-null and equal, the first.\n-     *   <li>If any of the comparables are null, the greater of the non-null object.\n+     *   <li>If any of the comparables are null, the greater of the non-null objects.\n      *   <li>If all the comparables are null, null is returned.\n      *  </ul>\n      */\n     }\n \n     /**\n-     * Null safe comparison of Comparables.\n-     * {@code null} is assumed to be less than a non-{@code null} value.\n+     * <p>Null safe comparison of Comparables.\n+     * {@code null} is assumed to be less than a non-{@code null} value.</p>\n      * \n      * @param c1  the first comparable, may be null\n      * @param c2  the second comparable, may be null\n      * @return a negative value if c1 < c2, zero if c1 = c2\n-     * and a positive value if c1 > c2\n+     *  and a positive value if c1 > c2\n      */\n     public static <T extends Comparable<? super T>> int compare(T c1, T c2) {\n         return compare(c1, c2, false);\n     }\n \n     /**\n-     * Null safe comparison of Comparables.\n+     * <p>Null safe comparison of Comparables.</p>\n      * \n      * @param c1  the first comparable, may be null\n      * @param c2  the second comparable, may be null\n-     * @param nullGreater if true <code>null</code> is considered greater\n-     * than a Non-<code>null</code> value or if false <code>null</code> is\n-     * considered less than a Non-<code>null</code> value\n+     * @param nullGreater if true {@code null} is considered greater\n+     *  than a non-{@code null} value or if false {@code null} is\n+     *  considered less than a Non-{@code null} value\n      * @return a negative value if c1 < c2, zero if c1 = c2\n-     * and a positive value if c1 > c2\n+     *  and a positive value if c1 > c2\n      * @see java.util.Comparator#compare(Object, Object)\n      */\n     public static <T extends Comparable<? super T>> int compare(T c1, T c2, boolean nullGreater) {\n     }\n     \n     /**\n-     * Clone an object.\n+     * <p>Clone an object.</p>\n      * \n      * @param <T> the type of the object\n-     * @param o the object to clone\n-     * @return the clone if the object implements {@link Cloneable} otherwise <code>null</code>\n+     * @param obj  the object to clone, null returns null\n+     * @return the clone if the object implements {@link Cloneable} otherwise {@code null}\n      * @throws CloneFailedException if the object is cloneable and the clone operation fails\n      * @since 3.0\n      */\n-    public static <T> T clone(final T o) {\n-        if (o instanceof Cloneable) {\n+    public static <T> T clone(final T obj) {\n+        if (obj instanceof Cloneable) {\n             final Object result;\n-            if (o.getClass().isArray()) {\n-                final Class<?> componentType = o.getClass().getComponentType();\n+            if (obj.getClass().isArray()) {\n+                final Class<?> componentType = obj.getClass().getComponentType();\n                 if (!componentType.isPrimitive()) {\n-                    result = ((Object[]) o).clone();\n+                    result = ((Object[]) obj).clone();\n                 } else {\n-                    int length = Array.getLength(o);\n+                    int length = Array.getLength(obj);\n                     result = Array.newInstance(componentType, length);\n                     while (length-- > 0) {\n-                        Array.set(result, length, Array.get(o, length));\n+                        Array.set(result, length, Array.get(obj, length));\n                     }\n                 }\n             } else {\n                 try {\n-                    final Method clone = o.getClass().getMethod(\"clone\");\n-                    result = clone.invoke(o);\n+                    final Method clone = obj.getClass().getMethod(\"clone\");\n+                    result = clone.invoke(obj);\n                 } catch (final NoSuchMethodException e) {\n                     throw new CloneFailedException(\"Cloneable type \"\n-                        + o.getClass().getName()\n+                        + obj.getClass().getName()\n                         + \" has no clone method\", e);\n                 } catch (final IllegalAccessException e) {\n                     throw new CloneFailedException(\"Cannot clone Cloneable type \"\n-                        + o.getClass().getName(), e);\n+                        + obj.getClass().getName(), e);\n                 } catch (final InvocationTargetException e) {\n                     throw new CloneFailedException(\"Exception cloning Cloneable type \"\n-                        + o.getClass().getName(), e.getCause());\n+                        + obj.getClass().getName(), e.getCause());\n                 }\n             }\n             @SuppressWarnings(\"unchecked\")\n     }\n \n     /**\n-     * Clone an object if possible. This method is similar to {@link #clone(Object)}, but will\n-     * return the provided instance as the return value instead of <code>null</code> if the instance\n+     * <p>Clone an object if possible.</p>\n+     * \n+     * <p>This method is similar to {@link #clone(Object)}, but will return the provided\n+     * instance as the return value instead of {@code null} if the instance\n      * is not cloneable. This is more convenient if the caller uses different\n      * implementations (e.g. of a service) and some of the implementations do not allow concurrent\n      * processing or have state. In such cases the implementation can simply provide a proper\n-     * clone implementation and the caller's code does not have to change.\n+     * clone implementation and the caller's code does not have to change.</p>\n      * \n      * @param <T> the type of the object\n-     * @param o the object to clone\n+     * @param obj  the object to clone, null returns null\n      * @return the clone if the object implements {@link Cloneable} otherwise the object itself\n      * @throws CloneFailedException if the object is cloneable and the clone operation fails\n      * @since 3.0\n      */\n-    public static <T> T cloneIfPossible(final T o) {\n-        final T clone = clone(o);\n-        return clone == null ? o : clone;\n+    public static <T> T cloneIfPossible(final T obj) {\n+        final T clone = clone(obj);\n+        return clone == null ? obj : clone;\n     }\n \n     // Null\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Class used as a null placeholder where <code>null</code>\n+     * <p>Class used as a null placeholder where {@code null}\n      * has another meaning.</p>\n      *\n-     * <p>For example, in a <code>HashMap</code> the\n+     * <p>For example, in a {@code HashMap} the\n      * {@link java.util.HashMap#get(java.lang.Object)} method returns\n-     * <code>null</code> if the <code>Map</code> contains\n-     * <code>null</code> or if there is no matching key. The\n-     * <code>Null</code> placeholder can be used to distinguish between\n-     * these two cases.</p>\n-     *\n-     * <p>Another example is <code>Hashtable</code>, where <code>null</code>\n+     * {@code null} if the {@code Map} contains {@code null} or if there is\n+     * no matching key. The {@code Null} placeholder can be used to distinguish\n+     * between these two cases.</p>\n+     *\n+     * <p>Another example is {@code Hashtable}, where {@code null}\n      * cannot be stored.</p>\n      */\n     public static class Null implements Serializable {", "timestamp": 1299251333, "metainfo": ""}