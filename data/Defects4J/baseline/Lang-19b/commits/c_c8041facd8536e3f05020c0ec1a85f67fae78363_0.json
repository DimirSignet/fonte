{"sha": "c8041facd8536e3f05020c0ec1a85f67fae78363", "log": "Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n  * Since a date without a year is not a valid date, you have to decide in what\n  * kind of date-field you want your result, for instance milliseconds or days.\n  * </p>\n- *   \n- *   \n  *\n  * @author Apache Software Foundation\n  * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n  * @version $Id$\n  */\n public class DateUtils {\n-    \n-    /**\n-     * The UTC time zone  (often referred to as GMT).\n+\n+    /**\n+     * The UTC time zone (often referred to as GMT).\n      */\n     public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");\n     /**\n      * A week range, starting on Sunday.\n      */\n     public static final int RANGE_WEEK_SUNDAY = 1;\n-\n     /**\n      * A week range, starting on Monday.\n      */\n     public static final int RANGE_WEEK_MONDAY = 2;\n-\n     /**\n      * A week range, starting on the day focused.\n      */\n     public static final int RANGE_WEEK_RELATIVE = 3;\n-\n     /**\n      * A week range, centered around the day focused.\n      */\n     public static final int RANGE_WEEK_CENTER = 4;\n-\n     /**\n      * A month range, the week starting on Sunday.\n      */\n     public static final int RANGE_MONTH_SUNDAY = 5;\n-\n     /**\n      * A month range, the week starting on Monday.\n      */\n     public static final int RANGE_MONTH_MONDAY = 6;\n-    \n-    /**\n-     * Constant marker for truncating \n+\n+    /**\n+     * Constant marker for truncating.\n      * @since 3.0\n      */\n     public static final int MODIFY_TRUNCATE = 0;\n-\n-    /**\n-     * Constant marker for rounding\n+    /**\n+     * Constant marker for rounding.\n      * @since 3.0\n      */\n     public static final int MODIFY_ROUND = 1;\n-    \n-    /**\n-     * Constant marker for ceiling\n+    /**\n+     * Constant marker for ceiling.\n      * @since 3.0\n      */\n-    public static final int MODIFY_CEILING= 2;\n-    \n-\n-    /**\n-     * <p><code>DateUtils</code> instances should NOT be constructed in\n-     * standard programming. Instead, the class should be used as\n-     * <code>DateUtils.parse(str);</code>.</p>\n+    public static final int MODIFY_CEILING = 2;\n+\n+    /**\n+     * <p>{@code DateUtils} instances should NOT be constructed in\n+     * standard programming. Instead, the static methods on the class should\n+     * be used, such as {@code DateUtils.parseDate(str);}.</p>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean\n      * instance to operate.</p>\n      * @throws ParseException if none of the date patterns were suitable\n      * @see java.util.Calender#isLenient()\n      */\n-    private static Date parseDateWithLeniency(String str, String[] parsePatterns,\n-            boolean lenient) throws ParseException {\n+    private static Date parseDateWithLeniency(\n+            String str, String[] parsePatterns, boolean lenient) throws ParseException {\n         if (str == null || parsePatterns == null) {\n             throw new IllegalArgumentException(\"Date and Patterns must not be null\");\n         }\n     //-----------------------------------------------------------------------\n     /**\n      * Adds a number of years to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount  the amount to add, may be negative\n-     * @return the new date object with the amount added\n+     * @return the new {@code Date} with the amount added\n      * @throws IllegalArgumentException if the date is null\n      */\n     public static Date addYears(Date date, int amount) {\n     //-----------------------------------------------------------------------\n     /**\n      * Adds a number of months to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount  the amount to add, may be negative\n-     * @return the new date object with the amount added\n+     * @return the new {@code Date} with the amount added\n      * @throws IllegalArgumentException if the date is null\n      */\n     public static Date addMonths(Date date, int amount) {\n     //-----------------------------------------------------------------------\n     /**\n      * Adds a number of weeks to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount  the amount to add, may be negative\n-     * @return the new date object with the amount added\n+     * @return the new {@code Date} with the amount added\n      * @throws IllegalArgumentException if the date is null\n      */\n     public static Date addWeeks(Date date, int amount) {\n     //-----------------------------------------------------------------------\n     /**\n      * Adds a number of days to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount  the amount to add, may be negative\n-     * @return the new date object with the amount added\n+     * @return the new {@code Date} with the amount added\n      * @throws IllegalArgumentException if the date is null\n      */\n     public static Date addDays(Date date, int amount) {\n     //-----------------------------------------------------------------------\n     /**\n      * Adds a number of hours to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount  the amount to add, may be negative\n-     * @return the new date object with the amount added\n+     * @return the new {@code Date} with the amount added\n      * @throws IllegalArgumentException if the date is null\n      */\n     public static Date addHours(Date date, int amount) {\n     //-----------------------------------------------------------------------\n     /**\n      * Adds a number of minutes to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount  the amount to add, may be negative\n-     * @return the new date object with the amount added\n+     * @return the new {@code Date} with the amount added\n      * @throws IllegalArgumentException if the date is null\n      */\n     public static Date addMinutes(Date date, int amount) {\n     //-----------------------------------------------------------------------\n     /**\n      * Adds a number of seconds to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount  the amount to add, may be negative\n-     * @return the new date object with the amount added\n+     * @return the new {@code Date} with the amount added\n      * @throws IllegalArgumentException if the date is null\n      */\n     public static Date addSeconds(Date date, int amount) {\n     //-----------------------------------------------------------------------\n     /**\n      * Adds a number of milliseconds to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount  the amount to add, may be negative\n-     * @return the new date object with the amount added\n+     * @return the new {@code Date} with the amount added\n      * @throws IllegalArgumentException if the date is null\n      */\n     public static Date addMilliseconds(Date date, int amount) {\n     //-----------------------------------------------------------------------\n     /**\n      * Adds to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param calendarField  the calendar field to add to\n      * @param amount  the amount to add, may be negative\n-     * @return the new date object with the amount added\n+     * @return the new {@code Date} with the amount added\n      * @throws IllegalArgumentException if the date is null\n      */\n     private static Date add(Date date, int calendarField, int amount) {\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the years field to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount the amount to set\n-     * @return a new Date object set with the specified value\n+     * @return a new {@code Date} set with the specified value\n      * @throws IllegalArgumentException if the date is null\n      * @since 2.4\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the months field to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount the amount to set\n-     * @return a new Date object set with the specified value\n+     * @return a new {@code Date} set with the specified value\n      * @throws IllegalArgumentException if the date is null\n      * @since 2.4\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the day of month field to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount the amount to set\n-     * @return a new Date object set with the specified value\n+     * @return a new {@code Date} set with the specified value\n      * @throws IllegalArgumentException if the date is null\n      * @since 2.4\n      */\n     /**\n      * Sets the hours field to a date returning a new object.  Hours range \n      * from  0-23.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount the amount to set\n-     * @return a new Date object set with the specified value\n+     * @return a new {@code Date} set with the specified value\n      * @throws IllegalArgumentException if the date is null\n      * @since 2.4\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the minute field to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount the amount to set\n-     * @return a new Date object set with the specified value\n+     * @return a new {@code Date} set with the specified value\n      * @throws IllegalArgumentException if the date is null\n      * @since 2.4\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the seconds field to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount the amount to set\n-     * @return a new Date object set with the specified value\n+     * @return a new {@code Date} set with the specified value\n      * @throws IllegalArgumentException if the date is null\n      * @since 2.4\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the miliseconds field to a date returning a new object.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n      * @param amount the amount to set\n-     * @return a new Date object set with the specified value\n+     * @return a new {@code Date} set with the specified value\n      * @throws IllegalArgumentException if the date is null\n      * @since 2.4\n      */\n     /**\n      * Sets the specified field to a date returning a new object.  \n      * This does not use a lenient calendar.\n-     * The original date object is unchanged.\n+     * The original {@code Date} is unchanged.\n      *\n      * @param date  the date, not null\n-     * @param calendarField  the calendar field to set the amount to\n+     * @param calendarField  the {@code Calendar} field to set the amount to\n      * @param amount the amount to set\n-     * @return a new Date object set with the specified value\n+     * @return a new {@code Date} set with the specified value\n      * @throws IllegalArgumentException if the date is null\n      * @since 2.4\n      */\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Convert a Date into a Calendar object. \n+     * Convert a {@code Date} into a {@code Calendar}. \n      * \n      * @param date the date to convert to a Calendar\n      * @return the created Calendar\n      * </ul>\n      * </p>\n      * \n-     * @param date  the date to work with\n-     * @param field  the field from <code>Calendar</code>\n-     *  or <code>SEMI_MONTH</code>\n-     * @return the rounded date\n-     * @throws IllegalArgumentException if the date is <code>null</code>\n+     * @param date  the date to work with, not null\n+     * @param field  the field from {@code Calendar} or <code>SEMI_MONTH</code>\n+     * @param field  the field from {@code Calendar} or <code>SEMI_MONTH</code>\n+     * @return the different rounded date, not null\n      * @throws ArithmeticException if the year is over 280 million\n      */\n     public static Date round(Date date, int field) {\n      * </ul>\n      * </p>\n      * \n-     * @param date  the date to work with\n-     * @param field  the field from <code>Calendar</code>\n-     *  or <code>SEMI_MONTH</code>\n-     * @return the rounded date (a different object)\n+     * @param date  the date to work with, not null\n+     * @param field  the field from {@code Calendar} or <code>SEMI_MONTH</code>\n+     * @return the different rounded date, not null\n      * @throws IllegalArgumentException if the date is <code>null</code>\n      * @throws ArithmeticException if the year is over 280 million\n      */\n      * </ul>\n      * </p>\n      * \n-     * @param date  the date to work with, either Date or Calendar\n-     * @param field  the field from <code>Calendar</code>\n-     *  or <code>SEMI_MONTH</code>\n-     * @return the rounded date\n+     * @param date  the date to work with, either {@code Date} or {@code Calendar}, not null\n+     * @param field  the field from {@code Calendar} or <code>SEMI_MONTH</code>\n+     * @return the different rounded date, not null\n      * @throws IllegalArgumentException if the date is <code>null</code>\n-     * @throws ClassCastException if the object type is not a <code>Date</code>\n-     *  or <code>Calendar</code>\n+     * @throws ClassCastException if the object type is not a {@code Date} or {@code Calendar}\n      * @throws ArithmeticException if the year is over 280 million\n      */\n     public static Date round(Object date, int field) {\n      * 2002 13:00:00.000.  If this was passed with MONTH, it would\n      * return 1 Mar 2002 0:00:00.000.</p>\n      * \n-     * @param date  the date to work with\n-     * @param field  the field from <code>Calendar</code>\n-     *  or <code>SEMI_MONTH</code>\n-     * @return the rounded date\n+     * @param date  the date to work with, not null\n+     * @param field  the field from {@code Calendar} or <code>SEMI_MONTH</code>\n+     * @return the different truncated date, not null\n      * @throws IllegalArgumentException if the date is <code>null</code>\n      * @throws ArithmeticException if the year is over 280 million\n      */\n      * 2002 13:00:00.000.  If this was passed with MONTH, it would\n      * return 1 Mar 2002 0:00:00.000.</p>\n      * \n-     * @param date  the date to work with\n-     * @param field  the field from <code>Calendar</code>\n-     *  or <code>SEMI_MONTH</code>\n-     * @return the rounded date (a different object)\n+     * @param date  the date to work with, not null\n+     * @param field  the field from {@code Calendar} or <code>SEMI_MONTH</code>\n+     * @return the different truncated date, not null\n      * @throws IllegalArgumentException if the date is <code>null</code>\n      * @throws ArithmeticException if the year is over 280 million\n      */\n      * 2002 13:00:00.000.  If this was passed with MONTH, it would\n      * return 1 Mar 2002 0:00:00.000.</p>\n      * \n-     * @param date  the date to work with, either <code>Date</code>\n-     *  or <code>Calendar</code>\n-     * @param field  the field from <code>Calendar</code>\n-     *  or <code>SEMI_MONTH</code>\n-     * @return the rounded date\n-     * @throws IllegalArgumentException if the date\n-     *  is <code>null</code>\n-     * @throws ClassCastException if the object type is not a\n-     *  <code>Date</code> or <code>Calendar</code>\n+     * @param date  the date to work with, either {@code Date} or {@code Calendar}, not null\n+     * @param field  the field from {@code Calendar} or <code>SEMI_MONTH</code>\n+     * @return the different truncated date, not null\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n+     * @throws ClassCastException if the object type is not a {@code Date} or {@code Calendar}\n      * @throws ArithmeticException if the year is over 280 million\n      */\n     public static Date truncate(Object date, int field) {\n      * 2002 14:00:00.000.  If this was passed with MONTH, it would\n      * return 1 Apr 2002 0:00:00.000.</p>\n      * \n-     * @param date  the date to work with\n-     * @param field  the field from <code>Calendar</code>\n-     *  or <code>SEMI_MONTH</code>\n-     * @return the rounded date\n+     * @param date  the date to work with, not null\n+     * @param field  the field from {@code Calendar} or <code>SEMI_MONTH</code>\n+     * @return the different ceil date, not null\n      * @throws IllegalArgumentException if the date is <code>null</code>\n      * @throws ArithmeticException if the year is over 280 million\n      * @since 2.5\n      * 2002 13:00:00.000.  If this was passed with MONTH, it would\n      * return 1 Mar 2002 0:00:00.000.</p>\n      * \n-     * @param date  the date to work with\n-     * @param field  the field from <code>Calendar</code>\n-     *  or <code>SEMI_MONTH</code>\n-     * @return the rounded date (a different object)\n+     * @param date  the date to work with, not null\n+     * @param field  the field from {@code Calendar} or <code>SEMI_MONTH</code>\n+     * @return the different ceil date, not null\n      * @throws IllegalArgumentException if the date is <code>null</code>\n      * @throws ArithmeticException if the year is over 280 million\n      * @since 2.5\n      * 2002 13:00:00.000.  If this was passed with MONTH, it would\n      * return 1 Mar 2002 0:00:00.000.</p>\n      * \n-     * @param date  the date to work with, either <code>Date</code>\n-     *  or <code>Calendar</code>\n-     * @param field  the field from <code>Calendar</code>\n-     *  or <code>SEMI_MONTH</code>\n-     * @return the rounded date\n-     * @throws IllegalArgumentException if the date\n-     *  is <code>null</code>\n-     * @throws ClassCastException if the object type is not a\n-     *  <code>Date</code> or <code>Calendar</code>\n+     * @param date  the date to work with, either {@code Date} or {@code Calendar}, not null\n+     * @param field  the field from {@code Calendar} or <code>SEMI_MONTH</code>\n+     * @return the different ceil date, not null\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n+     * @throws ClassCastException if the object type is not a {@code Date} or {@code Calendar}\n      * @throws ArithmeticException if the year is over 280 million\n      * @since 2.5\n      */\n     /**\n      * <p>Internal calculation method.</p>\n      * \n-     * @param val  the calendar\n+     * @param val  the calendar, not null\n      * @param field  the field constant\n      * @param modType  type to truncate, round or ceiling\n      * @throws ArithmeticException if the year is over 280 million\n      * {@link DateUtils#RANGE_WEEK_MONDAY},\n      * {@link DateUtils#RANGE_WEEK_RELATIVE},\n      * {@link DateUtils#RANGE_WEEK_CENTER}\n-     * @return the date iterator, which always returns Calendar instances\n+     * @return the date iterator, not null, not null\n      * @throws IllegalArgumentException if the date is <code>null</code>\n      * @throws IllegalArgumentException if the rangeStyle is invalid\n      */\n      * <p>This method provides an iterator that returns Calendar objects.\n      * The days are progressed using {@link Calendar#add(int, int)}.</p>\n      *\n-     * @param focus  the date to work with\n+     * @param focus  the date to work with, not null\n      * @param rangeStyle  the style constant to use. Must be one of\n      * {@link DateUtils#RANGE_MONTH_SUNDAY}, \n      * {@link DateUtils#RANGE_MONTH_MONDAY},\n      * {@link DateUtils#RANGE_WEEK_MONDAY},\n      * {@link DateUtils#RANGE_WEEK_RELATIVE},\n      * {@link DateUtils#RANGE_WEEK_CENTER}\n-     * @return the date iterator\n+     * @return the date iterator, not null\n      * @throws IllegalArgumentException if the date is <code>null</code>\n      * @throws IllegalArgumentException if the rangeStyle is invalid\n      */\n      * that starts with Sunday, June 30, 2002 and ends with Saturday, August 3,\n      * 2002, returning a Calendar instance for each intermediate day.</p>\n      *\n-     * @param focus  the date to work with, either\n-     *  <code>Date</code> or <code>Calendar</code>\n+     * @param focus  the date to work with, either {@code Date} or {@code Calendar}, not null\n      * @param rangeStyle  the style constant to use. Must be one of the range\n      * styles listed for the {@link #iterator(Calendar, int)} method.\n-     * @return the date iterator\n-     * @throws IllegalArgumentException if the date\n-     *  is <code>null</code>\n-     * @throws ClassCastException if the object type is\n-     *  not a <code>Date</code> or <code>Calendar</code>\n+     * @return the date iterator, not null\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n+     * @throws ClassCastException if the object type is not a {@code Date} or {@code Calendar}\n      */\n     public static Iterator<?> iterator(Object focus, int rangeStyle) {\n         if (focus == null) {\n      * </p>\n      * \n      * @param date the date to work with, not null\n-     * @param fragment the Calendar field part of date to calculate \n+     * @param fragment the {@code Calendar} field part of date to calculate \n      * @return number of milliseconds within the fragment of date\n      * @throws IllegalArgumentException if the date is <code>null</code> or\n      * fragment is not supported\n      * </p>\n      * \n      * @param date the date to work with, not null\n-     * @param fragment the Calendar field part of date to calculate \n+     * @param fragment the {@code Calendar} field part of date to calculate \n      * @return number of seconds within the fragment of date\n      * @throws IllegalArgumentException if the date is <code>null</code> or\n      * fragment is not supported\n      * </p>\n      * \n      * @param date the date to work with, not null\n-     * @param fragment the Calendar field part of date to calculate \n+     * @param fragment the {@code Calendar} field part of date to calculate \n      * @return number of minutes within the fragment of date\n      * @throws IllegalArgumentException if the date is <code>null</code> or \n      * fragment is not supported\n      * </p>\n      * \n      * @param date the date to work with, not null\n-     * @param fragment the Calendar field part of date to calculate \n+     * @param fragment the {@code Calendar} field part of date to calculate \n      * @return number of hours within the fragment of date\n      * @throws IllegalArgumentException if the date is <code>null</code> or \n      * fragment is not supported\n      * </p>\n      * \n      * @param date the date to work with, not null\n-     * @param fragment the Calendar field part of date to calculate \n+     * @param fragment the {@code Calendar} field part of date to calculate \n      * @return number of days  within the fragment of date\n      * @throws IllegalArgumentException if the date is <code>null</code> or \n      * fragment is not supported\n      * </p>\n      * \n      * @param calendar the calendar to work with, not null\n-     * @param fragment the Calendar field part of calendar to calculate \n+     * @param fragment the {@code Calendar} field part of calendar to calculate \n      * @return number of milliseconds within the fragment of date\n      * @throws IllegalArgumentException if the date is <code>null</code> or \n      * fragment is not supported\n      * </p>\n      * \n      * @param calendar the calendar to work with, not null\n-     * @param fragment the Calendar field part of calendar to calculate \n+     * @param fragment the {@code Calendar} field part of calendar to calculate \n      * @return number of seconds within the fragment of date\n      * @throws IllegalArgumentException if the date is <code>null</code> or \n      * fragment is not supported\n      * </p>\n      * \n      * @param calendar the calendar to work with, not null\n-     * @param fragment the Calendar field part of calendar to calculate \n+     * @param fragment the {@code Calendar} field part of calendar to calculate \n      * @return number of minutes within the fragment of date\n      * @throws IllegalArgumentException if the date is <code>null</code> or \n      * fragment is not supported\n      * </p>\n      *  \n      * @param calendar the calendar to work with, not null\n-     * @param fragment the Calendar field part of calendar to calculate \n+     * @param fragment the {@code Calendar} field part of calendar to calculate \n      * @return number of hours within the fragment of date\n      * @throws IllegalArgumentException if the date is <code>null</code> or \n      * fragment is not supported\n      * </p>\n      * \n      * @param calendar the calendar to work with, not null\n-     * @param fragment the Calendar field part of calendar to calculate \n+     * @param fragment the {@code Calendar} field part of calendar to calculate \n      * @return number of days within the fragment of date\n      * @throws IllegalArgumentException if the date is <code>null</code> or \n      * fragment is not supported\n      * \n      * @param date the date to work with, not null\n      * @param fragment the Calendar field part of date to calculate \n-     * @param unit Calendar field defining the unit\n+     * @param unit the {@code Calendar} field defining the unit\n      * @return number of units within the fragment of the date\n      * @throws IllegalArgumentException if the date is <code>null</code> or \n      * fragment is not supported\n      * \n      * @param calendar the calendar to work with, not null\n      * @param fragment the Calendar field part of calendar to calculate \n-     * @param unit Calendar field defining the unit\n+     * @param unit the {@code Calendar} field defining the unit\n      * @return number of units within the fragment of the calendar\n      * @throws IllegalArgumentException if the date is <code>null</code> or \n      * fragment is not supported\n      * \n      * @param cal1 the first calendar, not <code>null</code>\n      * @param cal2 the second calendar, not <code>null</code>\n-     * @param field the field from <code>Calendar</code>\n+     * @param field the field from {@code Calendar}\n      * @return <code>true</code> if equal; otherwise <code>false</code>\n      * @throws IllegalArgumentException if any argument is <code>null</code>\n      * @see #truncate(Calendar, int)\n      * \n      * @param date1 the first date, not <code>null</code>\n      * @param date2 the second date, not <code>null</code>\n-     * @param field the field from <code>Calendar</code>\n+     * @param field the field from {@code Calendar}\n      * @return <code>true</code> if equal; otherwise <code>false</code>\n      * @throws IllegalArgumentException if any argument is <code>null</code>\n      * @see #truncate(Date, int)\n      * \n      * @param cal1 the first calendar, not <code>null</code>\n      * @param cal2 the second calendar, not <code>null</code>\n-     * @param field the field from <code>Calendar</code>\n+     * @param field the field from {@code Calendar}\n      * @return a negative integer, zero, or a positive integer as the first \n      * calendar is less than, equal to, or greater than the second.\n      * @throws IllegalArgumentException if any argument is <code>null</code>\n         Date truncatedDate2 = truncate(date2, field);\n         return truncatedDate1.compareTo(truncatedDate2);\n     }\n-    \n-    /**\n-     * Returns the number of millis of a datefield, if this is a constant value\n-     * \n-     * @param unit A Calendar field which is a valid unit for a fragment\n-     * @return number of millis\n-     * @throws IllegalArgumentException if date can't be represented in millisenconds\n+\n+    /**\n+     * Returns the number of milliseconds of a {@code Calendar} field, if this is a constant value.\n+     * This handles millisecond, second, minute, hour and day (even though days can very in length).\n+     * \n+     * @param unit  a {@code Calendar} field constant which is a valid unit for a fragment\n+     * @return the number of milliseconds in the field\n+     * @throws IllegalArgumentException if date can't be represented in milliseconds\n      * @since 2.4 \n      */\n     private static long getMillisPerUnit(int unit) {\n         return result;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Date iterator.</p>\n      */\n             throw new UnsupportedOperationException();\n         }\n     }\n-    \n+\n }", "timestamp": 1299245341, "metainfo": ""}