{"sha": "34aa8b03da6bf8ad9c605cc833f215519691e4aa", "log": "PR: http://issues.apache.org/bugzilla/show_bug.cgi?id=27876 [lang] ReflectionToStringBuilder.toString(null) throws exception by design ReflectionToStringBuilder.toString is now null-safe and returns the style's nullText. ToStringBuilder constructors are now null-safe. A new ToStringBuilder on a null followed by a call to toString returns \"\".   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ToStringBuilder.java,v 1.32 2004/02/18 22:53:24 ggregory Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.33 2004/06/30 18:21:49 ggregory Exp $\n  */\n public class ToStringBuilder {\n \n     /**\n      * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>\n      * \n-     * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean,Class)\n+     * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean,boolean,Class)\n      * @since 2.0\n      */\n     public static String reflectionToString(\n      *  may be <code>null</code>\n      * @param buffer  the <code>StringBuffer</code> to populate, may be\n      *  <code>null</code>\n-     * @throws IllegalArgumentException  if the Object passed in is\n-     *  <code>null</code>\n      */\n     public ToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer) {\n-        super();\n-        if (object == null) {\n-            throw new IllegalArgumentException(\"The object to create a toString for must not be null\");\n-        }\n         if (style == null) {\n             style = getDefaultStyle();\n         }\n      * @return the String <code>toString</code>\n      */\n     public String toString() {\n-        style.appendEnd(buffer, object);\n-        return buffer.toString();\n+        style.appendEnd(this.getStringBuffer(), this.getObject());\n+        return this.getStringBuffer().toString();\n     }\n \n }\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ToStringStyle.java,v 1.29 2004/02/18 22:53:24 ggregory Exp $\n+ * @version $Id: ToStringStyle.java,v 1.30 2004/06/30 18:21:49 ggregory Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n \n      *  <code>toString</code> for, must not be <code>null</code>\n      */\n     public void appendStart(StringBuffer buffer, Object object) {\n-        appendClassName(buffer, object);\n-        appendIdentityHashCode(buffer, object);\n-        appendContentStart(buffer);\n-        if (fieldSeparatorAtStart) {\n-            appendFieldSeparator(buffer);\n+        if (object != null) {\n+            appendClassName(buffer, object);\n+            appendIdentityHashCode(buffer, object);\n+            appendContentStart(buffer);\n+            if (fieldSeparatorAtStart) {\n+                appendFieldSeparator(buffer);\n+            }\n         }\n     }\n \n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param object  the <code>Object</code> to build a\n-     *  <code>toString</code> for, must not be <code>null</code>\n+     *  <code>toString</code> for.\n      */\n     public void appendEnd(StringBuffer buffer, Object object) {\n+        if (object == null){\n+            return;\n+        }\n         if (fieldSeparatorAtEnd == false) {\n             removeLastFieldSeparator(buffer);\n         }\n      * @param object  the <code>Object</code> whose name to output\n      */\n     protected void appendClassName(StringBuffer buffer, Object object) {\n-        if (useClassName) {\n+        if (useClassName && object != null) {\n             if (useShortClassName) {\n                 buffer.append(getShortClassName(object.getClass()));\n             } else {\n      * @param object  the <code>Object</code> whose id to output\n      */\n     protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\n-        if (useIdentityHashCode) {\n+        if (this.isUseIdentityHashCode() && object!=null) {\n             buffer.append('@');\n             buffer.append(Integer.toHexString(System.identityHashCode(object)));\n         }\n--- a/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author <a href=\"mailto:alex@apache.org\">Alex Chaffee</a>\n- * @version $Id: ToStringBuilderTest.java,v 1.13 2004/02/18 23:00:51 ggregory Exp $\n+ * @version $Id: ToStringBuilderTest.java,v 1.14 2004/06/30 18:22:22 ggregory Exp $\n  */\n public class ToStringBuilderTest extends TestCase {\n \n     //-----------------------------------------------------------------------\n \n     public void testConstructorEx1() {\n-        try {\n-            new ToStringBuilder(null);\n-            \n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+        assertEquals(\"\", new ToStringBuilder(null).toString());\n     }\n \n     public void testConstructorEx2() {\n-        try {\n-            new ToStringBuilder(null, null);\n-            \n-        } catch (IllegalArgumentException ex) {\n-            try {\n-                new ToStringBuilder(base, null);\n-                \n-            } catch (Exception ex2) {\n-                fail();\n-            }\n-            return;\n-        }\n-        fail();\n+        assertEquals(\"\", new ToStringBuilder(null, null).toString());\n+        new ToStringBuilder(this.base, null).toString();\n     }\n \n     public void testConstructorEx3() {\n-        try {\n-            new ToStringBuilder(null, null, null);\n-            \n-        } catch (IllegalArgumentException ex) {\n-            try {\n-                new ToStringBuilder(base, null, null);\n-                new ToStringBuilder(base, ToStringStyle.DEFAULT_STYLE, null);\n-                \n-            } catch (Exception ex2) {\n-                fail();\n-            }\n-            return;\n-        }\n-        fail();\n+        assertEquals(\"\", new ToStringBuilder(null, null, null).toString());\n+        new ToStringBuilder(this.base, null, null);\n+        new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null);\n     }\n \n     public void testGetSetDefault() {\n         static final int staticInt2 = 67890;\n     }\n \n+    public void testReflectionNull() {\n+        assertEquals(\"<null>\", ReflectionToStringBuilder.toString(null));\n+    }\n }", "timestamp": 1088619742, "metainfo": ""}