{"sha": "42715f649e1aca0758fde275f767d6a63af41e96", "log": "Adding Javadoc to public constants - LANG-682  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n \n     /* ESCAPE TRANSLATORS */\n \n+    /**\n+     * Translator object for escaping Java. \n+     * \n+     * While {@link escapeJava(String)} is the expected method of use, this \n+     * object allows the Java escaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     public static final CharSequenceTranslator ESCAPE_JAVA = \n           new LookupTranslator(\n             new String[][] { \n             UnicodeEscaper.outsideOf(32, 0x7f) \n         );\n \n+    /**\n+     * Translator object for escaping EcmaScript/JavaScript. \n+     * \n+     * While {@link escapeEcmaScript(String)} is the expected method of use, this \n+     * object allows the EcmaScript escaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     public static final CharSequenceTranslator ESCAPE_ECMASCRIPT = \n         new AggregateTranslator(\n             new LookupTranslator(\n             UnicodeEscaper.outsideOf(32, 0x7f) \n         );\n             \n+    /**\n+     * Translator object for escaping XML.\n+     * \n+     * While {@link escapeXml(String)} is the expected method of use, this \n+     * object allows the XML escaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     public static final CharSequenceTranslator ESCAPE_XML = \n         new AggregateTranslator(\n             new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n             new LookupTranslator(EntityArrays.APOS_ESCAPE())\n         );\n \n+    /**\n+     * Translator object for escaping HTML version 3.0.\n+     * \n+     * While {@link escapeHtml3(String)} is the expected method of use, this \n+     * object allows the HTML escaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     public static final CharSequenceTranslator ESCAPE_HTML3 = \n         new AggregateTranslator(\n             new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n             new LookupTranslator(EntityArrays.ISO8859_1_ESCAPE())\n         );\n \n+    /**\n+     * Translator object for escaping HTML version 4.0.\n+     * \n+     * While {@link escapeHtml4(String)} is the expected method of use, this \n+     * object allows the HTML escaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     public static final CharSequenceTranslator ESCAPE_HTML4 = \n         new AggregateTranslator(\n             new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n             new LookupTranslator(EntityArrays.HTML40_EXTENDED_ESCAPE())\n         );\n \n+    /**\n+     * Translator object for escaping individual Comma Separated Values. \n+     * \n+     * While {@link escapeCsv(String)} is the expected method of use, this \n+     * object allows the CSV escaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     public static final CharSequenceTranslator ESCAPE_CSV = new CsvEscaper();\n \n     // TODO: Create a parent class - 'SinglePassTranslator' ?\n \n     /* UNESCAPE TRANSLATORS */\n \n+    /**\n+     * Translator object for unescaping escaped Java. \n+     * \n+     * While {@link unescapeJava(String)} is the expected method of use, this \n+     * object allows the Java unescaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     // TODO: throw \"illegal character: \\92\" as an Exception if a \\ on the end of the Java (as per the compiler)?\n     public static final CharSequenceTranslator UNESCAPE_JAVA = \n         new AggregateTranslator(\n                       })\n         );\n \n+    /**\n+     * Translator object for unescaping escaped EcmaScript. \n+     * \n+     * While {@link unescapeEcmaScript(String)} is the expected method of use, this \n+     * object allows the EcmaScript unescaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     public static final CharSequenceTranslator UNESCAPE_ECMASCRIPT = UNESCAPE_JAVA;\n \n+    /**\n+     * Translator object for unescaping escaped HTML 3.0. \n+     * \n+     * While {@link unescapeHtml3(String)} is the expected method of use, this \n+     * object allows the HTML unescaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     public static final CharSequenceTranslator UNESCAPE_HTML3 = \n         new AggregateTranslator(\n             new LookupTranslator(EntityArrays.BASIC_UNESCAPE()),\n             new NumericEntityUnescaper()\n         );\n \n+    /**\n+     * Translator object for unescaping escaped HTML 4.0. \n+     * \n+     * While {@link unescapeHtml4(String)} is the expected method of use, this \n+     * object allows the HTML unescaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     public static final CharSequenceTranslator UNESCAPE_HTML4 = \n         new AggregateTranslator(\n             new LookupTranslator(EntityArrays.BASIC_UNESCAPE()),\n             new NumericEntityUnescaper()\n         );\n \n+    /**\n+     * Translator object for unescaping escaped XML.\n+     * \n+     * While {@link unescapeXml(String)} is the expected method of use, this \n+     * object allows the XML unescaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     public static final CharSequenceTranslator UNESCAPE_XML = \n         new AggregateTranslator(\n             new LookupTranslator(EntityArrays.BASIC_UNESCAPE()),\n             new NumericEntityUnescaper()\n         );\n \n+    /**\n+     * Translator object for unescaping escaped Comma Separated Value entries.\n+     * \n+     * While {@link unescapeCsv(String)} is the expected method of use, this \n+     * object allows the CSV unescaping functionality to be used \n+     * as the foundation for a custom translator. \n+     */\n     public static final CharSequenceTranslator UNESCAPE_CSV = new CsvUnescaper();\n \n     static class CsvUnescaper extends CharSequenceTranslator {\n      * Does not support DTDs or external entities.</p>\n      *\n      * <p>Note that unicode characters greater than 0x7f are as of 3.0, no longer \n-     *    escaped. </p>\n+     *    escaped. If you still wish this functionality, you can achieve it \n+     *    via the following: \n+     * {@code StringEscapeUtils.ESCAPE_XML.with( UnicodeEscaper.above(0x7f) );}</p>\n      *\n      * @param input  the {@code String} to escape, may be null\n      * @return a new escaped {@code String}, {@code null} if null string input", "timestamp": 1299561612, "metainfo": ""}