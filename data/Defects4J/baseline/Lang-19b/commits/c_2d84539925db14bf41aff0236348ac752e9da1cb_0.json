{"sha": "2d84539925db14bf41aff0236348ac752e9da1cb", "log": "Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n /**\n  * <p>Operations on boolean primitives and Boolean objects.</p>\n  *\n- * <p>This class tries to handle <code>null</code> input gracefully.\n- * An exception will not be thrown for a <code>null</code> input.\n+ * <p>This class tries to handle {@code null} input gracefully.\n+ * An exception will not be thrown for a {@code null} input.\n  * Each method documents its behaviour in more detail.</p>\n  * \n  * <p>#ThreadSafe#</p>\n public class BooleanUtils {\n \n     /**\n-     * <p><code>BooleanUtils</code> instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>BooleanUtils.negate(true);</code>.</p>\n+     * <p>{@code BooleanUtils} instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as {@code BooleanUtils.negate(true);}.</p>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean instance\n      * to operate.</p>\n     /**\n      * <p>Negates the specified boolean.</p>\n      * \n-     * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n+     * <p>If {@code null} is passed in, {@code null} will be returned.</p>\n      *\n      * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n      *\n      * </pre>\n      * \n      * @param bool  the Boolean to negate, may be null\n-     * @return the negated Boolean, or <code>null</code> if <code>null</code> input\n+     * @return the negated Boolean, or {@code null} if {@code null} input\n      */\n     public static Boolean negate(Boolean bool) {\n         if (bool == null) {\n     // boolean Boolean methods\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Checks if a <code>Boolean</code> value is <code>true</code>,\n-     * handling <code>null</code> by returning <code>false</code>.</p>\n+     * <p>Checks if a {@code Boolean} value is {@code true},\n+     * handling {@code null} by returning {@code false}.</p>\n      *\n      * <pre>\n      *   BooleanUtils.isTrue(Boolean.TRUE)  = true\n      *   BooleanUtils.isTrue(null)          = false\n      * </pre>\n      *\n-     * @param bool  the boolean to check, null returns <code>false</code>\n-     * @return <code>true</code> only if the input is non-null and true\n+     * @param bool  the boolean to check, null returns {@code false}\n+     * @return {@code true} only if the input is non-null and true\n      * @since 2.1\n      */\n     public static boolean isTrue(Boolean bool) {\n     }\n \n     /**\n-     * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>,\n-     * handling <code>null</code> by returning <code>true</code>.</p>\n+     * <p>Checks if a {@code Boolean} value is <i>not</i> {@code true},\n+     * handling {@code null} by returning {@code true}.</p>\n      *\n      * <pre>\n      *   BooleanUtils.isNotTrue(Boolean.TRUE)  = false\n      *   BooleanUtils.isNotTrue(null)          = true\n      * </pre>\n      *\n-     * @param bool  the boolean to check, null returns <code>true</code>\n-     * @return <code>true</code> if the input is null or false\n+     * @param bool  the boolean to check, null returns {@code true}\n+     * @return {@code true} if the input is null or false\n      * @since 2.3\n      */\n     public static boolean isNotTrue(Boolean bool) {\n     }\n \n     /**\n-     * <p>Checks if a <code>Boolean</code> value is <code>false</code>,\n-     * handling <code>null</code> by returning <code>false</code>.</p>\n+     * <p>Checks if a {@code Boolean} value is {@code false},\n+     * handling {@code null} by returning {@code false}.</p>\n      *\n      * <pre>\n      *   BooleanUtils.isFalse(Boolean.TRUE)  = false\n      *   BooleanUtils.isFalse(null)          = false\n      * </pre>\n      *\n-     * @param bool  the boolean to check, null returns <code>false</code>\n-     * @return <code>true</code> only if the input is non-null and false\n+     * @param bool  the boolean to check, null returns {@code false}\n+     * @return {@code true} only if the input is non-null and false\n      * @since 2.1\n      */\n     public static boolean isFalse(Boolean bool) {\n     }\n \n     /**\n-     * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>false</code>,\n-     * handling <code>null</code> by returning <code>true</code>.</p>\n+     * <p>Checks if a {@code Boolean} value is <i>not</i> {@code false},\n+     * handling {@code null} by returning {@code true}.</p>\n      *\n      * <pre>\n      *   BooleanUtils.isNotFalse(Boolean.TRUE)  = true\n      *   BooleanUtils.isNotFalse(null)          = true\n      * </pre>\n      *\n-     * @param bool  the boolean to check, null returns <code>true</code>\n-     * @return <code>true</code> if the input is null or true\n+     * @param bool  the boolean to check, null returns {@code true}\n+     * @return {@code true} if the input is null or true\n      * @since 2.3\n      */\n     public static boolean isNotFalse(Boolean bool) {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Converts a Boolean to a boolean handling <code>null</code>\n-     * by returning <code>false</code>.</p>\n+     * <p>Converts a Boolean to a boolean handling {@code null}\n+     * by returning {@code false}.</p>\n      *\n      * <pre>\n      *   BooleanUtils.toBoolean(Boolean.TRUE)  = true\n      * </pre>\n      *\n      * @param bool  the boolean to convert\n-     * @return <code>true</code> or <code>false</code>, \n-     *  <code>null</code> returns <code>false</code>\n+     * @return {@code true} or {@code false}, {@code null} returns {@code false}\n      */\n     public static boolean toBoolean(Boolean bool) {\n         if (bool == null) {\n     }\n     \n     /**\n-     * <p>Converts a Boolean to a boolean handling <code>null</code>.</p>\n+     * <p>Converts a Boolean to a boolean handling {@code null}.</p>\n      * \n      * <pre>\n      *   BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true\n      * </pre>\n      *\n      * @param bool  the boolean to convert\n-     * @param valueIfNull  the boolean value to return if <code>null</code>\n-     * @return <code>true</code> or <code>false</code>\n+     * @param valueIfNull  the boolean value to return if {@code null}\n+     * @return {@code true} or {@code false}\n      */\n     public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull) {\n         if (bool == null) {\n     // Integer to Boolean methods\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Converts an int to a boolean using the convention that <code>zero</code>\n-     * is <code>false</code>.</p>\n+     * <p>Converts an int to a boolean using the convention that {@code zero}\n+     * is {@code false}.</p>\n      * \n      * <pre>\n      *   BooleanUtils.toBoolean(0) = false\n      * </pre>\n      *\n      * @param value  the int to convert\n-     * @return <code>true</code> if non-zero, <code>false</code>\n+     * @return {@code true} if non-zero, {@code false}\n      *  if zero\n      */\n     public static boolean toBoolean(int value) {\n     }\n     \n     /**\n-     * <p>Converts an int to a Boolean using the convention that <code>zero</code>\n-     * is <code>false</code>.</p>\n+     * <p>Converts an int to a Boolean using the convention that {@code zero}\n+     * is {@code false}.</p>\n      * \n      * <pre>\n      *   BooleanUtils.toBoolean(0) = Boolean.FALSE\n      *\n      * @param value  the int to convert\n      * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,\n-     *  <code>null</code> if <code>null</code>\n+     *  {@code null} if {@code null}\n      */\n     public static Boolean toBooleanObject(int value) {\n         return value == 0 ? Boolean.FALSE : Boolean.TRUE;\n     }\n     \n     /**\n-     * <p>Converts an Integer to a Boolean using the convention that <code>zero</code>\n-     * is <code>false</code>.</p>\n-     * \n-     * <p><code>null</code> will be converted to <code>null</code>.</p>\n+     * <p>Converts an Integer to a Boolean using the convention that {@code zero}\n+     * is {@code false}.</p>\n+     * \n+     * <p>{@code null} will be converted to {@code null}.</p>\n      *\n      * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n      *\n      *\n      * @param value  the Integer to convert\n      * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,\n-     *  <code>null</code> if <code>null</code> input\n+     *  {@code null} if {@code null} input\n      */\n     public static Boolean toBooleanObject(Integer value) {\n         if (value == null) {\n      * </pre>\n      *\n      * @param value  the Integer to convert\n-     * @param trueValue  the value to match for <code>true</code>\n-     * @param falseValue  the value to match for <code>false</code>\n-     * @return <code>true</code> or <code>false</code>\n+     * @param trueValue  the value to match for {@code true}\n+     * @param falseValue  the value to match for {@code false}\n+     * @return {@code true} or {@code false}\n      * @throws IllegalArgumentException if no match\n      */\n     public static boolean toBoolean(int value, int trueValue, int falseValue) {\n      * </pre>\n      *\n      * @param value  the Integer to convert\n-     * @param trueValue  the value to match for <code>true</code>,\n-     *  may be <code>null</code>\n-     * @param falseValue  the value to match for <code>false</code>,\n-     *  may be <code>null</code>\n-     * @return <code>true</code> or <code>false</code>\n+     * @param trueValue  the value to match for {@code true}, may be {@code null}\n+     * @param falseValue  the value to match for {@code false}, may be {@code null}\n+     * @return {@code true} or {@code false}\n      * @throws IllegalArgumentException if no match\n      */\n     public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {\n      * </pre>\n      *\n      * @param value  the Integer to convert\n-     * @param trueValue  the value to match for <code>true</code>\n-     * @param falseValue  the value to match for <code>false</code>\n-     * @param nullValue  the value to to match for <code>null</code>\n-     * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>\n+     * @param trueValue  the value to match for {@code true}\n+     * @param falseValue  the value to match for {@code false}\n+     * @param nullValue  the value to to match for {@code null}\n+     * @return Boolean.TRUE, Boolean.FALSE, or {@code null}\n      * @throws IllegalArgumentException if no match\n      */\n     public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue) {\n      * </pre>\n      *\n      * @param value  the Integer to convert\n-     * @param trueValue  the value to match for <code>true</code>,\n-     *  may be <code>null</code>\n-     * @param falseValue  the value to match for <code>false</code>,\n-     *  may be <code>null</code>\n-     * @param nullValue  the value to to match for <code>null</code>,\n-     *  may be <code>null</code>\n-     * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>\n+     * @param trueValue  the value to match for {@code true}, may be {@code null}\n+     * @param falseValue  the value to match for {@code false}, may be {@code null}\n+     * @param nullValue  the value to to match for {@code null}, may be {@code null}\n+     * @return Boolean.TRUE, Boolean.FALSE, or {@code null}\n      * @throws IllegalArgumentException if no match\n      */\n     public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Converts a boolean to an int using the convention that\n-     * <code>zero</code> is <code>false</code>.</p>\n+     * {@code zero} is {@code false}.</p>\n      *\n      * <pre>\n      *   BooleanUtils.toInteger(true)  = 1\n      * </pre>\n      *\n      * @param bool  the boolean to convert\n-     * @return one if <code>true</code>, zero if <code>false</code>\n+     * @return one if {@code true}, zero if {@code false}\n      */\n     public static int toInteger(boolean bool) {\n         return bool ? 1 : 0;\n     \n     /**\n      * <p>Converts a boolean to an Integer using the convention that\n-     * <code>zero</code> is <code>false</code>.</p>\n+     * {@code zero} is {@code false}.</p>\n      * \n      * <pre>\n      *   BooleanUtils.toIntegerObject(true)  = new Integer(1)\n      * </pre>\n      *\n      * @param bool  the boolean to convert\n-     * @return one if <code>true</code>, zero if <code>false</code>\n+     * @return one if {@code true}, zero if {@code false}\n      */\n     public static Integer toIntegerObject(boolean bool) {\n         return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n     \n     /**\n      * <p>Converts a Boolean to a Integer using the convention that\n-     * <code>zero</code> is <code>false</code>.</p>\n-     *\n-     * <p><code>null</code> will be converted to <code>null</code>.</p>\n+     * {@code zero} is {@code false}.</p>\n+     *\n+     * <p>{@code null} will be converted to {@code null}.</p>\n      *\n      * <pre>\n      *   BooleanUtils.toIntegerObject(Boolean.TRUE)  = new Integer(1)\n      * </pre>\n      *\n      * @param bool  the Boolean to convert\n-     * @return one if Boolean.TRUE, zero if Boolean.FALSE, <code>null</code> if <code>null</code>\n+     * @return one if Boolean.TRUE, zero if Boolean.FALSE, {@code null} if {@code null}\n      */\n     public static Integer toIntegerObject(Boolean bool) {\n         if (bool == null) {\n      * </pre>\n      *\n      * @param bool  the to convert\n-     * @param trueValue  the value to return if <code>true</code>\n-     * @param falseValue  the value to return if <code>false</code>\n+     * @param trueValue  the value to return if {@code true}\n+     * @param falseValue  the value to return if {@code false}\n      * @return the appropriate value\n      */\n     public static int toInteger(boolean bool, int trueValue, int falseValue) {\n      * </pre>\n      *\n      * @param bool  the Boolean to convert\n-     * @param trueValue  the value to return if <code>true</code>\n-     * @param falseValue  the value to return if <code>false</code>\n-     * @param nullValue  the value to return if <code>null</code>\n+     * @param trueValue  the value to return if {@code true}\n+     * @param falseValue  the value to return if {@code false}\n+     * @param nullValue  the value to return if {@code null}\n      * @return the appropriate value\n      */\n     public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue) {\n      * </pre>\n      *\n      * @param bool  the to convert\n-     * @param trueValue  the value to return if <code>true</code>,\n-     *  may be <code>null</code>\n-     * @param falseValue  the value to return if <code>false</code>,\n-     *  may be <code>null</code>\n+     * @param trueValue  the value to return if {@code true}, may be {@code null}\n+     * @param falseValue  the value to return if {@code false}, may be {@code null}\n      * @return the appropriate value\n      */\n     public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {\n      * </pre>\n      *\n      * @param bool  the Boolean to convert\n-     * @param trueValue  the value to return if <code>true</code>,\n-     *  may be <code>null</code>\n-     * @param falseValue  the value to return if <code>false</code>,\n-     *  may be <code>null</code>\n-     * @param nullValue  the value to return if <code>null</code>,\n-     *  may be <code>null</code>\n+     * @param trueValue  the value to return if {@code true}, may be {@code null}\n+     * @param falseValue  the value to return if {@code false}, may be {@code null}\n+     * @param nullValue  the value to return if {@code null}, may be {@code null}\n      * @return the appropriate value\n      */\n     public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {\n     /**\n      * <p>Converts a String to a Boolean.</p>\n      * \n-     * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>\n-     * (case insensitive) will return <code>true</code>.\n-     * <code>'false'</code>, <code>'off'</code> or <code>'no'</code>\n-     * (case insensitive) will return <code>false</code>.\n-     * Otherwise, <code>null</code> is returned.</p>\n+     * <p>{@code 'true'}, {@code 'on'} or {@code 'yes'}\n+     * (case insensitive) will return {@code true}.\n+     * {@code 'false'}, {@code 'off'} or {@code 'no'}\n+     * (case insensitive) will return {@code false}.\n+     * Otherwise, {@code null} is returned.</p>\n      *\n      * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n      *\n      * </pre>\n      *\n      * @param str  the String to check\n-     * @return the Boolean value of the string,\n-     *  <code>null</code> if no match or <code>null</code> input\n+     * @return the Boolean value of the string, {@code null} if no match or {@code null} input\n      */\n     public static Boolean toBooleanObject(String str) {\n         // Previously used equalsIgnoreCase, which was fast for interned 'true'.\n      * </pre>\n      *\n      * @param str  the String to check\n-     * @param trueString  the String to match for <code>true</code>\n-     *  (case sensitive), may be <code>null</code>\n-     * @param falseString  the String to match for <code>false</code>\n-     *  (case sensitive), may be <code>null</code>\n-     * @param nullString  the String to match for <code>null</code>\n-     *  (case sensitive), may be <code>null</code>\n-     * @return the Boolean value of the string,\n-     *  <code>null</code> if either the String matches <code>nullString</code>\n-     *  or if <code>null</code> input and <code>nullString</code> is\n-     *  <code>null</code>\n+     * @param trueString  the String to match for {@code true} (case sensitive), may be {@code null}\n+     * @param falseString  the String to match for {@code false} (case sensitive), may be {@code null}\n+     * @param nullString  the String to match for {@code null} (case sensitive), may be {@code null}\n+     * @return the Boolean value of the string, {@code null} if either the String matches {@code nullString}\n+     *  or if {@code null} input and {@code nullString} is {@code null}\n      * @throws IllegalArgumentException if the String doesn't match\n      */\n     public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {\n     /**\n      * <p>Converts a String to a boolean (optimised for performance).</p>\n      * \n-     * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>\n-     * (case insensitive) will return <code>true</code>. Otherwise,\n-     * <code>false</code> is returned.</p>\n+     * <p>{@code 'true'}, {@code 'on'} or {@code 'yes'}\n+     * (case insensitive) will return {@code true}. Otherwise,\n+     * {@code false} is returned.</p>\n      * \n      * <p>This method performs 4 times faster (JDK1.4) than\n-     * <code>Boolean.valueOf(String)</code>. However, this method accepts\n+     * {@code Boolean.valueOf(String)}. However, this method accepts\n      * 'on' and 'yes' as true values.\n      *\n      * <pre>\n      * </pre>\n      *\n      * @param str  the String to check\n-     * @return the boolean value of the string, <code>false</code> if no match or the String is null\n+     * @return the boolean value of the string, {@code false} if no match or the String is null\n      */\n     public static boolean toBoolean(String str) {\n         return toBooleanObject(str) == Boolean.TRUE;\n      * </pre>\n      *\n      * @param str  the String to check\n-     * @param trueString  the String to match for <code>true</code>\n-     *  (case sensitive), may be <code>null</code>\n-     * @param falseString  the String to match for <code>false</code>\n-     *  (case sensitive), may be <code>null</code>\n+     * @param trueString  the String to match for {@code true} (case sensitive), may be {@code null}\n+     * @param falseString  the String to match for {@code false} (case sensitive), may be {@code null}\n      * @return the boolean value of the string\n      * @throws IllegalArgumentException if the String doesn't match\n      */\n     // Boolean to String methods\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Converts a Boolean to a String returning <code>'true'</code>,\n-     * <code>'false'</code>, or <code>null</code>.</p>\n+     * <p>Converts a Boolean to a String returning {@code 'true'},\n+     * {@code 'false'}, or {@code null}.</p>\n      * \n      * <pre>\n      *   BooleanUtils.toStringTrueFalse(Boolean.TRUE)  = \"true\"\n      * </pre>\n      *\n      * @param bool  the Boolean to check\n-     * @return <code>'true'</code>, <code>'false'</code>,\n-     *  or <code>null</code>\n+     * @return {@code 'true'}, {@code 'false'}, or {@code null}\n      */\n     public static String toStringTrueFalse(Boolean bool) {\n         return toString(bool, \"true\", \"false\", null);\n     }\n     \n     /**\n-     * <p>Converts a Boolean to a String returning <code>'on'</code>,\n-     * <code>'off'</code>, or <code>null</code>.</p>\n+     * <p>Converts a Boolean to a String returning {@code 'on'},\n+     * {@code 'off'}, or {@code null}.</p>\n      * \n      * <pre>\n      *   BooleanUtils.toStringOnOff(Boolean.TRUE)  = \"on\"\n      * </pre>\n      *\n      * @param bool  the Boolean to check\n-     * @return <code>'on'</code>, <code>'off'</code>,\n-     *  or <code>null</code>\n+     * @return {@code 'on'}, {@code 'off'}, or {@code null}\n      */\n     public static String toStringOnOff(Boolean bool) {\n         return toString(bool, \"on\", \"off\", null);\n     }\n     \n     /**\n-     * <p>Converts a Boolean to a String returning <code>'yes'</code>,\n-     * <code>'no'</code>, or <code>null</code>.</p>\n+     * <p>Converts a Boolean to a String returning {@code 'yes'},\n+     * {@code 'no'}, or {@code null}.</p>\n      * \n      * <pre>\n      *   BooleanUtils.toStringYesNo(Boolean.TRUE)  = \"yes\"\n      * </pre>\n      *\n      * @param bool  the Boolean to check\n-     * @return <code>'yes'</code>, <code>'no'</code>,\n-     *  or <code>null</code>\n+     * @return {@code 'yes'}, {@code 'no'}, or {@code null}\n      */\n     public static String toStringYesNo(Boolean bool) {\n         return toString(bool, \"yes\", \"no\", null);\n      * </pre>\n      *\n      * @param bool  the Boolean to check\n-     * @param trueString  the String to return if <code>true</code>,\n-     *  may be <code>null</code>\n-     * @param falseString  the String to return if <code>false</code>,\n-     *  may be <code>null</code>\n-     * @param nullString  the String to return if <code>null</code>,\n-     *  may be <code>null</code>\n+     * @param trueString  the String to return if {@code true}, may be {@code null}\n+     * @param falseString  the String to return if {@code false}, may be {@code null}\n+     * @param nullString  the String to return if {@code null}, may be {@code null}\n      * @return one of the three input Strings\n      */\n     public static String toString(Boolean bool, String trueString, String falseString, String nullString) {\n     // boolean to String methods\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Converts a boolean to a String returning <code>'true'</code>\n-     * or <code>'false'</code>.</p>\n+     * <p>Converts a boolean to a String returning {@code 'true'}\n+     * or {@code 'false'}.</p>\n      * \n      * <pre>\n      *   BooleanUtils.toStringTrueFalse(true)   = \"true\"\n      * </pre>\n      *\n      * @param bool  the Boolean to check\n-     * @return <code>'true'</code>, <code>'false'</code>,\n-     *  or <code>null</code>\n+     * @return {@code 'true'}, {@code 'false'}, or {@code null}\n      */\n     public static String toStringTrueFalse(boolean bool) {\n         return toString(bool, \"true\", \"false\");\n     }\n     \n     /**\n-     * <p>Converts a boolean to a String returning <code>'on'</code>\n-     * or <code>'off'</code>.</p>\n+     * <p>Converts a boolean to a String returning {@code 'on'}\n+     * or {@code 'off'}.</p>\n      * \n      * <pre>\n      *   BooleanUtils.toStringOnOff(true)   = \"on\"\n      * </pre>\n      *\n      * @param bool  the Boolean to check\n-     * @return <code>'on'</code>, <code>'off'</code>,\n-     *  or <code>null</code>\n+     * @return {@code 'on'}, {@code 'off'}, or {@code null}\n      */\n     public static String toStringOnOff(boolean bool) {\n         return toString(bool, \"on\", \"off\");\n     }\n     \n     /**\n-     * <p>Converts a boolean to a String returning <code>'yes'</code>\n-     * or <code>'no'</code>.</p>\n+     * <p>Converts a boolean to a String returning {@code 'yes'}\n+     * or {@code 'no'}.</p>\n      * \n      * <pre>\n      *   BooleanUtils.toStringYesNo(true)   = \"yes\"\n      * </pre>\n      *\n      * @param bool  the Boolean to check\n-     * @return <code>'yes'</code>, <code>'no'</code>,\n-     *  or <code>null</code>\n+     * @return {@code 'yes'}, {@code 'no'}, or {@code null}\n      */\n     public static String toStringYesNo(boolean bool) {\n         return toString(bool, \"yes\", \"no\");\n      * </pre>\n      *\n      * @param bool  the Boolean to check\n-     * @param trueString  the String to return if <code>true</code>,\n-     *  may be <code>null</code>\n-     * @param falseString  the String to return if <code>false</code>,\n-     *  may be <code>null</code>\n+     * @param trueString  the String to return if {@code true}, may be {@code null}\n+     * @param falseString  the String to return if {@code false}, may be {@code null}\n      * @return one of the two input Strings\n      */\n     public static String toString(boolean bool, String trueString, String falseString) {\n      * </pre>\n      *\n      * @param array  an array of <code>boolean<code>s\n-     * @return <code>true</code> if the xor is successful.\n-     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n-     * @throws IllegalArgumentException if <code>array</code> is empty.\n+     * @return {@code true} if the xor is successful.\n+     * @throws IllegalArgumentException if {@code array} is {@code null}\n+     * @throws IllegalArgumentException if {@code array} is empty.\n      */\n     public static boolean xor(boolean... array) {\n         // Validates input\n      * </pre>\n      *\n      * @param array  an array of <code>Boolean<code>s\n-     * @return <code>true</code> if the xor is successful.\n-     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n-     * @throws IllegalArgumentException if <code>array</code> is empty.\n-     * @throws IllegalArgumentException if <code>array</code> contains a <code>null</code>\n+     * @return {@code true} if the xor is successful.\n+     * @throws IllegalArgumentException if {@code array} is {@code null}\n+     * @throws IllegalArgumentException if {@code array} is empty.\n+     * @throws IllegalArgumentException if {@code array} contains a {@code null}\n      */\n     public static Boolean xor(Boolean... array) {\n         if (array == null) {", "timestamp": 1299253032, "metainfo": ""}