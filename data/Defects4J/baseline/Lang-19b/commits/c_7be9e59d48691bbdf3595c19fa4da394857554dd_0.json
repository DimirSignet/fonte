{"sha": "7be9e59d48691bbdf3595c19fa4da394857554dd", "log": "Reorder methods and adjust Javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Validate.java\n+++ b/src/java/org/apache/commons/lang/Validate.java\n     public Validate() {\n       super();\n     }\n-    \n+\n     // isTrue\n     //---------------------------------------------------------------------------------\n \n         notEmpty(collection, \"The validated collection is empty\");\n     }\n \n+    // notEmpty map\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument Map is empty (<code>null</code> or no elements).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myMap, \"The map must not be empty\");\n+     * </pre>\n+     * \n+     * @param map  the map to check is not empty\n+     * @param message  the exception message you would like to see if the map is empty\n+     * @throws IllegalArgumentException if the map is empty\n+     */\n+    public static void notEmpty(Map<?,?> map, String message) {\n+        if (map == null || map.size() == 0) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument Map is empty (<code>null</code> or no elements).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myMap);\n+     * </pre>\n+     *\n+     * <p>The message in the exception is 'The validated map is empty'.</p>\n+     * \n+     * @param map  the map to check is not empty\n+     * @throws IllegalArgumentException if the map is empty\n+     */\n+    public static void notEmpty(Map<?,?> map) {\n+        notEmpty(map, \"The validated map is empty\");\n+    }\n+\n+    // notEmpty string\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument String is empty (<code>null</code> or zero length).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myString, \"The string must not be empty\");\n+     * </pre>\n+     * \n+     * @param string  the string to check is not empty\n+     * @param message  the exception message you would like to see if the string is empty\n+     * @throws IllegalArgumentException if the string is empty\n+     */\n+    public static void notEmpty(String string, String message) {\n+        if (string == null || string.length() == 0) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument String is empty (<code>null</code> or zero length).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myString);\n+     * </pre>\n+     *\n+     * <p>The message in the exception is 'The validated string is empty'.</p>\n+     * \n+     * @param string  the string to check is not empty\n+     * @throws IllegalArgumentException if the string is empty\n+     */\n+    public static void notEmpty(String string) {\n+        notEmpty(string, \"The validated string is empty\");\n+    }\n+\n+    // notBlank string\n+    //---------------------------------------------------------------------------------\n+\n     /**\n      * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n      * if the argument String is blank (<code>null</code>, empty or whitespace).</p>\n      * @see StringUtils#isBlank(CharSequence)\n      */\n     public static void notBlank(String string) {\n-        if(StringUtils.isBlank(string)) {\n+        if (StringUtils.isBlank(string)) {\n             throw new IllegalArgumentException(\"The validated string is blank\");\n         }\n     }\n      * @see StringUtils#isBlank(CharSequence)\n      */\n     public static void notBlank(String string, String message) {\n-        if(StringUtils.isBlank(string)) {\n-            throw new IllegalArgumentException(message);\n-        }\n-    }\n-\n-    // notEmpty map\n-    //---------------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument Map is empty (<code>null</code> or no elements).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myMap, \"The map must not be empty\");\n-     * </pre>\n-     * \n-     * @param map  the map to check is not empty\n-     * @param message  the exception message you would like to see if the map is empty\n-     * @throws IllegalArgumentException if the map is empty\n-     */\n-    public static void notEmpty(Map<?,?> map, String message) {\n-        if (map == null || map.size() == 0) {\n-            throw new IllegalArgumentException(message);\n-        }\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument Map is empty (<code>null</code> or no elements).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myMap);\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated map is empty'.</p>\n-     * \n-     * @param map  the map to check is not empty\n-     * @throws IllegalArgumentException if the map is empty\n-     */\n-    public static void notEmpty(Map<?,?> map) {\n-        notEmpty(map, \"The validated map is empty\");\n-    }\n-\n-    // notEmpty string\n-    //---------------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument String is empty (<code>null</code> or zero length).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myString, \"The string must not be empty\");\n-     * </pre>\n-     * \n-     * @param string  the string to check is not empty\n-     * @param message  the exception message you would like to see if the string is empty\n-     * @throws IllegalArgumentException if the string is empty\n-     */\n-    public static void notEmpty(String string, String message) {\n-        if (string == null || string.length() == 0) {\n-            throw new IllegalArgumentException(message);\n-        }\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument String is empty (<code>null</code> or zero length).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myString);\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated string is empty'.</p>\n-     * \n-     * @param string  the string to check is not empty\n-     * @throws IllegalArgumentException if the string is empty\n-     */\n-    public static void notEmpty(String string) {\n-        notEmpty(string, \"The validated string is empty\");\n+        if (StringUtils.isBlank(string)) {\n+            throw new IllegalArgumentException(message);\n+        }\n     }\n \n     // notNullElements array\n      * The message in the exception is 'The validated collection contains an element not of type clazz at index: '.\n      * </p>\n      * \n-     * @param collection\n-     *            the collection to check, not null\n-     * @param clazz\n-     *            the <code>Class</code> which the collection's elements are expected to be, not null\n+     * @param collection  the collection to check, not null\n+     * @param clazz  the <code>Class</code> which the collection's elements are expected to be, not null\n      * @since 2.1\n      */\n     public static void allElementsOfType(Collection<?> collection, Class<?> clazz) {", "timestamp": 1256383433, "metainfo": ""}