{"sha": "45c255782cf42427eac60f1b190151f2c4bad059", "log": "Simplify code; Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n     }\n \n     //-----------------------------------------------------------------------\n-\n     /**\n-     * Used by the indexOf(CharSequence methods) as a green implementation of\n-     * indexOf.\n+     * <p>Finds the first index in the {@code CharSequence} that matches the\n+     * specified character.</p>\n      *\n-     * @param cs the {@code CharSequence} to be processed\n-     * @param searchChar the char to be searched for\n-     * @param start the start index\n-     * @return the index where the search char was found\n+     * @param cs  the {@code CharSequence} to be processed, not null\n+     * @param searchChar  the char to be searched for\n+     * @param start  the start index, negative starts at the string start\n+     * @return the index where the search char was found, -1 if not found\n      */\n     static int indexOf(CharSequence cs, int searchChar, int start) {\n         if (cs instanceof String) {\n      * @return the index where the search sequence was found\n      */\n     static int indexOf(CharSequence cs, CharSequence searchChar, int start) {\n-        if (cs instanceof String && searchChar instanceof String) {\n-            // TODO: Do we assume searchChar is usually relatively small;\n-            //       If so then calling toString() on it is better than reverting to\n-            //       the green implementation in the else block\n-            return ((String) cs).indexOf((String) searchChar, start);\n-        } else {\n-            // TODO: Implement rather than convert to String\n-            return cs.toString().indexOf(searchChar.toString(), start);\n-        }\n+        return cs.toString().indexOf(searchChar.toString(), start);\n+//        if (cs instanceof String && searchChar instanceof String) {\n+//            // TODO: Do we assume searchChar is usually relatively small;\n+//            //       If so then calling toString() on it is better than reverting to\n+//            //       the green implementation in the else block\n+//            return ((String) cs).indexOf((String) searchChar, start);\n+//        } else {\n+//            // TODO: Implement rather than convert to String\n+//            return cs.toString().indexOf(searchChar.toString(), start);\n+//        }\n     }\n \n     /**\n-     * Used by the lastIndexOf(CharSequence methods) as a green implementation of lastIndexOf\n+     * <p>Finds the last index in the {@code CharSequence} that matches the\n+     * specified character.</p>\n      *\n-     * @param cs the {@code CharSequence} to be processed\n-     * @param searchChar the char to be searched for\n-     * @param start the start index\n-     * @return the index where the search char was found\n+     * @param cs  the {@code CharSequence} to be processed\n+     * @param searchChar  the char to be searched for\n+     * @param start  the start index, negative returns -1, beyond length starts at end\n+     * @return the index where the search char was found, -1 if not found\n      */\n     static int lastIndexOf(CharSequence cs, int searchChar, int start) {\n         if (cs instanceof String) {\n      * @return the index where the search sequence was found\n      */\n     static int lastIndexOf(CharSequence cs, CharSequence searchChar, int start) {\n-        if (cs instanceof String && searchChar instanceof String) {\n-            // TODO: Do we assume searchChar is usually relatively small;\n-            //       If so then calling toString() on it is better than reverting to\n-            //       the green implementation in the else block\n-            return ((String) cs).lastIndexOf((String) searchChar, start);\n-        } else {\n-            // TODO: Implement rather than convert to String\n-            return cs.toString().lastIndexOf(searchChar.toString(), start);\n-        }\n+        return cs.toString().lastIndexOf(searchChar.toString(), start);\n+//        if (cs instanceof String && searchChar instanceof String) {\n+//            // TODO: Do we assume searchChar is usually relatively small;\n+//            //       If so then calling toString() on it is better than reverting to\n+//            //       the green implementation in the else block\n+//            return ((String) cs).lastIndexOf((String) searchChar, start);\n+//        } else {\n+//            // TODO: Implement rather than convert to String\n+//            return cs.toString().lastIndexOf(searchChar.toString(), start);\n+//        }\n     }\n \n     /**", "timestamp": 1302622483, "metainfo": ""}