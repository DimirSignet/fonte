{"sha": "cd02e447f55bdb76dadc76e60db511afd15d4c64", "log": "Moving center, left, leftPad, right, rightPad, mid, upperCase, lowerCase and swapCase over to CharSequence input. LANG-687  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n      * StringUtils.left(\"abc\", 4)   = \"abc\"\n      * </pre>\n      *\n-     * @param str  the String to get the leftmost characters from, may be null\n+     * @param seq  the CharSequence to get the leftmost characters from, may be null\n      * @param len  the length of the required String\n      * @return the leftmost characters, {@code null} if null String input\n      */\n-    public static String left(String str, int len) {\n-        if (str == null) {\n+    public static String left(CharSequence seq, int len) {\n+        if (seq == null) {\n             return null;\n         }\n         if (len < 0) {\n             return EMPTY;\n         }\n-        if (str.length() <= len) {\n-            return str;\n-        }\n-        return str.substring(0, len);\n+        if (seq.length() <= len) {\n+            return seq.toString();\n+        }\n+        return seq.subSequence(0, len).toString();\n     }\n \n     /**\n      * StringUtils.right(\"abc\", 4)   = \"abc\"\n      * </pre>\n      *\n-     * @param str  the String to get the rightmost characters from, may be null\n+     * @param seq  the CharSequence to get the rightmost characters from, may be null\n      * @param len  the length of the required String\n      * @return the rightmost characters, {@code null} if null String input\n      */\n-    public static String right(String str, int len) {\n-        if (str == null) {\n+    public static String right(CharSequence seq, int len) {\n+        if (seq == null) {\n             return null;\n         }\n         if (len < 0) {\n             return EMPTY;\n         }\n-        if (str.length() <= len) {\n-            return str;\n-        }\n-        return str.substring(str.length() - len);\n+        if (seq.length() <= len) {\n+            return seq.toString();\n+        }\n+        return StringUtils.subSequence(seq, seq.length() - len).toString();\n     }\n \n     /**\n      * of the String will be returned without an exception. If the\n      * String is {@code null}, {@code null} will be returned.\n      * An empty String is returned if len is negative or exceeds the\n-     * length of {@code str}.</p>\n+     * length of {@code seq}.</p>\n      *\n      * <pre>\n      * StringUtils.mid(null, *, *)    = null\n      * StringUtils.mid(\"abc\", -2, 2)  = \"ab\"\n      * </pre>\n      *\n-     * @param str  the String to get the characters from, may be null\n+     * @param seq  the CharSequence to get the characters from, may be null\n      * @param pos  the position to start from, negative treated as zero\n      * @param len  the length of the required String\n      * @return the middle characters, {@code null} if null String input\n      */\n-    public static String mid(String str, int pos, int len) {\n-        if (str == null) {\n+    public static String mid(CharSequence seq, int pos, int len) {\n+        if (seq == null) {\n             return null;\n         }\n-        if (len < 0 || pos > str.length()) {\n+        if (len < 0 || pos > seq.length()) {\n             return EMPTY;\n         }\n         if (pos < 0) {\n             pos = 0;\n         }\n-        if (str.length() <= (pos + len)) {\n-            return str.substring(pos);\n-        }\n-        return str.substring(pos, pos + len);\n+        if (seq.length() <= (pos + len)) {\n+            return StringUtils.subSequence(seq, pos).toString();\n+        }\n+        return seq.subSequence(pos, pos + len).toString();\n     }\n \n     // SubStringAfter/SubStringBefore\n      * StringUtils.rightPad(\"bat\", -1) = \"bat\"\n      * </pre>\n      *\n-     * @param str  the String to pad out, may be null\n+     * @param seq  the CharSequence to pad out, may be null\n      * @param size  the size to pad to\n      * @return right padded String or original String if no padding is necessary,\n      *  {@code null} if null String input\n      */\n-    public static String rightPad(String str, int size) {\n-        return rightPad(str, size, ' ');\n+    public static String rightPad(CharSequence seq, int size) {\n+        return rightPad(seq, size, ' ');\n     }\n \n     /**\n      * StringUtils.rightPad(\"bat\", -1, 'z') = \"bat\"\n      * </pre>\n      *\n-     * @param str  the String to pad out, may be null\n+     * @param seq  the CharSequence to pad out, may be null\n      * @param size  the size to pad to\n      * @param padChar  the character to pad with\n      * @return right padded String or original String if no padding is necessary,\n      *  {@code null} if null String input\n      * @since 2.0\n      */\n-    public static String rightPad(String str, int size, char padChar) {\n-        if (str == null) {\n+    public static String rightPad(CharSequence seq, int size, char padChar) {\n+        if (seq == null) {\n             return null;\n         }\n-        int pads = size - str.length();\n+        int pads = size - seq.length();\n         if (pads <= 0) {\n-            return str; // returns original String when possible\n+            return seq.toString(); // returns original String when possible\n         }\n         if (pads > PAD_LIMIT) {\n-            return rightPad(str, size, String.valueOf(padChar));\n-        }\n-        return str.concat(padding(pads, padChar));\n+            return rightPad(seq, size, String.valueOf(padChar));\n+        }\n+        return seq.toString().concat(padding(pads, padChar));\n     }\n \n     /**\n      * StringUtils.rightPad(\"bat\", 5, \"\")    = \"bat  \"\n      * </pre>\n      *\n-     * @param str  the String to pad out, may be null\n+     * @param seq  the CharSequence to pad out, may be null\n      * @param size  the size to pad to\n      * @param padStr  the String to pad with, null or empty treated as single space\n      * @return right padded String or original String if no padding is necessary,\n      *  {@code null} if null String input\n      */\n-    public static String rightPad(String str, int size, String padStr) {\n-        if (str == null) {\n+    public static String rightPad(CharSequence seq, int size, CharSequence padStr) {\n+        if (seq == null) {\n             return null;\n         }\n         if (isEmpty(padStr)) {\n             padStr = \" \";\n         }\n         int padLen = padStr.length();\n-        int strLen = str.length();\n+        int strLen = seq.length();\n         int pads = size - strLen;\n         if (pads <= 0) {\n-            return str; // returns original String when possible\n+            return seq.toString(); // returns original String when possible\n         }\n         if (padLen == 1 && pads <= PAD_LIMIT) {\n-            return rightPad(str, size, padStr.charAt(0));\n+            return rightPad(seq, size, padStr.charAt(0));\n         }\n \n         if (pads == padLen) {\n-            return str.concat(padStr);\n+            return seq.toString().concat(padStr.toString());\n         } else if (pads < padLen) {\n-            return str.concat(padStr.substring(0, pads));\n+            return seq.toString().concat(padStr.subSequence(0, pads).toString());\n         } else {\n             char[] padding = new char[pads];\n-            char[] padChars = padStr.toCharArray();\n+            char[] padChars = padStr.toString().toCharArray();\n             for (int i = 0; i < pads; i++) {\n                 padding[i] = padChars[i % padLen];\n             }\n-            return str.concat(new String(padding));\n+            return seq.toString().concat(new String(padding));\n         }\n     }\n \n      * StringUtils.leftPad(\"bat\", -1) = \"bat\"\n      * </pre>\n      *\n-     * @param str  the String to pad out, may be null\n+     * @param seq  the CharSequence to pad out, may be null\n      * @param size  the size to pad to\n      * @return left padded String or original String if no padding is necessary,\n      *  {@code null} if null String input\n      */\n-    public static String leftPad(String str, int size) {\n-        return leftPad(str, size, ' ');\n+    public static String leftPad(CharSequence seq, int size) {\n+        return leftPad(seq, size, ' ');\n     }\n \n     /**\n      * StringUtils.leftPad(\"bat\", -1, 'z') = \"bat\"\n      * </pre>\n      *\n-     * @param str  the String to pad out, may be null\n+     * @param seq  the CharSequence to pad out, may be null\n      * @param size  the size to pad to\n      * @param padChar  the character to pad with\n      * @return left padded String or original String if no padding is necessary,\n      *  {@code null} if null String input\n      * @since 2.0\n      */\n-    public static String leftPad(String str, int size, char padChar) {\n-        if (str == null) {\n+    public static String leftPad(CharSequence seq, int size, char padChar) {\n+        if (seq == null) {\n             return null;\n         }\n-        int pads = size - str.length();\n+        int pads = size - seq.length();\n         if (pads <= 0) {\n-            return str; // returns original String when possible\n+            return seq.toString(); // returns original String when possible\n         }\n         if (pads > PAD_LIMIT) {\n-            return leftPad(str, size, String.valueOf(padChar));\n-        }\n-        return padding(pads, padChar).concat(str);\n+            return leftPad(seq, size, String.valueOf(padChar));\n+        }\n+        return padding(pads, padChar).concat(seq.toString());\n     }\n \n     /**\n      * StringUtils.leftPad(\"bat\", 5, \"\")    = \"  bat\"\n      * </pre>\n      *\n-     * @param str  the String to pad out, may be null\n+     * @param seq  the CharSequence to pad out, may be null\n      * @param size  the size to pad to\n-     * @param padStr  the String to pad with, null or empty treated as single space\n+     * @param padStr  the CharSequence to pad with, null or empty treated as single space\n      * @return left padded String or original String if no padding is necessary,\n      *  {@code null} if null String input\n      */\n-    public static String leftPad(String str, int size, String padStr) {\n-        if (str == null) {\n+    public static String leftPad(CharSequence seq, int size, CharSequence padStr) {\n+        if (seq == null) {\n             return null;\n         }\n         if (isEmpty(padStr)) {\n             padStr = \" \";\n         }\n         int padLen = padStr.length();\n-        int strLen = str.length();\n+        int strLen = seq.length();\n         int pads = size - strLen;\n         if (pads <= 0) {\n-            return str; // returns original String when possible\n+            return seq.toString(); // returns original String when possible\n         }\n         if (padLen == 1 && pads <= PAD_LIMIT) {\n-            return leftPad(str, size, padStr.charAt(0));\n+            return leftPad(seq, size, padStr.charAt(0));\n         }\n \n         if (pads == padLen) {\n-            return padStr.concat(str);\n+            return padStr.toString().concat(seq.toString());\n         } else if (pads < padLen) {\n-            return padStr.substring(0, pads).concat(str);\n+            return padStr.subSequence(0, pads).toString().concat(seq.toString());\n         } else {\n             char[] padding = new char[pads];\n-            char[] padChars = padStr.toCharArray();\n+            char[] padChars = padStr.toString().toCharArray();\n             for (int i = 0; i < pads; i++) {\n                 padding[i] = padChars[i % padLen];\n             }\n-            return new String(padding).concat(str);\n+            return new String(padding).concat(seq.toString());\n         }\n     }\n \n      * StringUtils.center(\"a\", 4)    = \" a  \"\n      * </pre>\n      *\n-     * @param str  the String to center, may be null\n+     * @param seq  the CharSequence to center, may be null\n      * @param size  the int size of new String, negative treated as zero\n      * @return centered String, {@code null} if null String input\n      */\n-    public static String center(String str, int size) {\n-        return center(str, size, ' ');\n+    public static String center(CharSequence seq, int size) {\n+        return center(seq, size, ' ');\n     }\n \n     /**\n      * StringUtils.center(\"a\", 4, 'y')    = \"yayy\"\n      * </pre>\n      *\n-     * @param str  the String to center, may be null\n+     * @param seq  the CharSequence to center, may be null\n      * @param size  the int size of new String, negative treated as zero\n      * @param padChar  the character to pad the new String with\n      * @return centered String, {@code null} if null String input\n      * @since 2.0\n      */\n-    public static String center(String str, int size, char padChar) {\n-        if (str == null || size <= 0) {\n-            return str;\n-        }\n-        int strLen = str.length();\n+    public static String center(CharSequence seq, int size, char padChar) {\n+        if (seq == null) {\n+            return null;\n+        }\n+        if (size <= 0) {\n+            return seq.toString();\n+        }\n+        int strLen = seq.length();\n         int pads = size - strLen;\n         if (pads <= 0) {\n-            return str;\n-        }\n-        str = leftPad(str, strLen + pads / 2, padChar);\n-        str = rightPad(str, size, padChar);\n-        return str;\n+            return seq.toString();\n+        }\n+        String tmp = leftPad(seq, strLen + pads / 2, padChar);\n+        tmp = rightPad(tmp, size, padChar);\n+        return tmp;\n     }\n \n     /**\n      * StringUtils.center(\"abc\", 7, \"\")   = \"  abc  \"\n      * </pre>\n      *\n-     * @param str  the String to center, may be null\n+     * @param seq  the CharSequence to center, may be null\n      * @param size  the int size of new String, negative treated as zero\n-     * @param padStr  the String to pad the new String with, must not be null or empty\n+     * @param padStr  the CharSequence to pad the new String with, must not be null or empty\n      * @return centered String, {@code null} if null String input\n      * @throws IllegalArgumentException if padStr is {@code null} or empty\n      */\n-    public static String center(String str, int size, String padStr) {\n-        if (str == null || size <= 0) {\n-            return str;\n+    public static String center(CharSequence seq, int size, CharSequence padStr) {\n+        if (seq == null) {\n+            return null;\n+        }\n+        if (size <= 0) {\n+            return seq.toString();\n         }\n         if (isEmpty(padStr)) {\n             padStr = \" \";\n         }\n-        int strLen = str.length();\n+        int strLen = seq.length();\n         int pads = size - strLen;\n         if (pads <= 0) {\n-            return str;\n-        }\n-        str = leftPad(str, strLen + pads / 2, padStr);\n-        str = rightPad(str, size, padStr);\n-        return str;\n+            return seq.toString();\n+        }\n+        String tmp = leftPad(seq, strLen + pads / 2, padStr);\n+        tmp = rightPad(tmp, size, padStr);\n+        return tmp;\n     }\n \n     // Case conversion\n      * For platform-independent case transformations, the method {@link #lowerCase(String, Locale)}\n      * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).</p>\n      *\n-     * @param str  the String to upper case, may be null\n+     * @param seq  the CharSequence to upper case, may be null\n      * @return the upper cased String, {@code null} if null String input\n      */\n-    public static String upperCase(String str) {\n-        if (str == null) {\n+    public static String upperCase(CharSequence seq) {\n+        if (seq == null) {\n             return null;\n         }\n-        return str.toUpperCase();\n+        return seq.toString().toUpperCase();\n     }\n \n     /**\n      * StringUtils.upperCase(\"aBc\", Locale.ENGLISH) = \"ABC\"\n      * </pre>\n      *\n-     * @param str  the String to upper case, may be null\n+     * @param seq  the CharSequence to upper case, may be null\n      * @param locale  the locale that defines the case transformation rules, must not be null\n      * @return the upper cased String, {@code null} if null String input\n      * @since 2.5\n      */\n-    public static String upperCase(String str, Locale locale) {\n-        if (str == null) {\n+    public static String upperCase(CharSequence seq, Locale locale) {\n+        if (seq == null) {\n             return null;\n         }\n-        return str.toUpperCase(locale);\n+        return seq.toString().toUpperCase(locale);\n     }\n \n     /**\n      * For platform-independent case transformations, the method {@link #lowerCase(String, Locale)}\n      * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).</p>\n      *\n-     * @param str  the String to lower case, may be null\n+     * @param seq  the CharSequence to lower case, may be null\n      * @return the lower cased String, {@code null} if null String input\n      */\n-    public static String lowerCase(String str) {\n-        if (str == null) {\n+    public static String lowerCase(CharSequence seq) {\n+        if (seq == null) {\n             return null;\n         }\n-        return str.toLowerCase();\n+        return seq.toString().toLowerCase();\n     }\n \n     /**\n      * StringUtils.lowerCase(\"aBc\", Locale.ENGLISH) = \"abc\"\n      * </pre>\n      *\n-     * @param str  the String to lower case, may be null\n+     * @param seq  the CharSequence to lower case, may be null\n      * @param locale  the locale that defines the case transformation rules, must not be null\n      * @return the lower cased String, {@code null} if null String input\n      * @since 2.5\n      */\n-    public static String lowerCase(String str, Locale locale) {\n-        if (str == null) {\n+    public static String lowerCase(CharSequence seq, Locale locale) {\n+        if (seq == null) {\n             return null;\n         }\n-        return str.toLowerCase(locale);\n+        return seq.toString().toLowerCase(locale);\n     }\n \n     /**\n      * If you only use ASCII, you will notice no change.\n      * That functionality is available in org.apache.commons.lang3.text.WordUtils.</p>\n      *\n-     * @param str  the String to swap case, may be null\n+     * @param seq  the CharSequence to swap case, may be null\n      * @return the changed String, {@code null} if null String input\n      */\n-    public static String swapCase(String str) {\n+    public static String swapCase(CharSequence seq) {\n         int strLen;\n-        if (str == null || (strLen = str.length()) == 0) {\n-            return str;\n+        if (seq == null) {\n+            return null;\n+        }\n+        if ( (strLen = seq.length()) == 0) {\n+            return seq.toString();\n         }\n         StringBuilder buffer = new StringBuilder(strLen);\n \n         char ch = 0;\n         for (int i = 0; i < strLen; i++) {\n-            ch = str.charAt(i);\n+            ch = seq.charAt(i);\n             if (Character.isUpperCase(ch)) {\n                 ch = Character.toLowerCase(ch);\n             } else if (Character.isTitleCase(ch)) {", "timestamp": 1300253511, "metainfo": ""}