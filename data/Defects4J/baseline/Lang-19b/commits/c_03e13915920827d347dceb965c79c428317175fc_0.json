{"sha": "03e13915920827d347dceb965c79c428317175fc", "log": "Fix Javadoc troubles from Phil Steitz   ", "commit": "\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.18 2003/07/26 00:26:32 ggregory Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.19 2003/07/26 10:32:17 scolebourne Exp $\n  */\n public class RandomStringUtils {\n \n      * <p>This method has exactly the same semantics as\n      * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but\n      * instead of using an externally supplied source of randomness, it uses\n-     * the internal static {@link Random} instance ({@link #RANDOM}).</p>\n+     * the internal static {@link Random} instance.</p>\n      *\n      * @param count  the length of random string to create\n      * @param start  the position in set of chars to start at\n      * <p>Creates a random string based on a variety of options, using\n      * supplied source of randomness.</p>\n      *\n-\t * <p>If start and end are both <code>0</code>, start and end are set\n+     * <p>If start and end are both <code>0</code>, start and end are set\n      * to <code>' '</code> and <code>'z'</code>, the ASCII printable\n      * characters, will be used, unless letters and numbers are both\n-\t * <code>false</code>, in which case, start and end are set to\n+     * <code>false</code>, in which case, start and end are set to\n      * <code>0</code> and <code>Integer.MAX_VALUE</code>.\n      *\n-\t * <p>If set is not <code>null</code>, characters between start and\n+     * <p>If set is not <code>null</code>, characters between start and\n      * end are chosen.</p>\n      *\n-     * <p>As a source of randomness is used supplied {@link Random}\n-     * instance. This makes method behave predictively, and allows\n-     * usage of <code>RandomStringUtils</code> in situations that need\n-     * repetitive behaviour.</p>\n+     * <p>This method accepts a user-supplied {@link Random}\n+     * instance to use as a source of randomness. By seeding a single \n+     * {@link Random} instance with a fixed seed and using it for each call,\n+     * the same random sequence of strings can be generated repeatedly\n+     * and predictably.</p>\n      *\n      * @param count  the length of random string to create\n      * @param start  the position in set of chars to start at\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n  * @author Helge Tesgaard\n  * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @author Phil Steitz\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.19 2003/07/25 23:06:58 scolebourne Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.20 2003/07/26 10:32:17 scolebourne Exp $\n  */\n public class StringEscapeUtils {\n \n      * @param str  the <code>String</code> to escape, may be null\n      * @return a new escaped <code>String</code>, <code>null</code> if null string input\n      * \n-     * @see Entities\n      * @see #unescapeHtml(String)\n      * @see </br><a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n      * @see </br><a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>", "timestamp": 1059215537, "metainfo": ""}