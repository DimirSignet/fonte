{"sha": "3b03ea302b0470ab99b36c1e9480fe32c3da9ef0", "log": "Completely rework CharRange and CharSet. Add multiple tests to fully define the set syntax.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharRange.java\n+++ b/src/java/org/apache/commons/lang/CharRange.java\n  */\n package org.apache.commons.lang;\n \n+import java.io.Serializable;\n+\n /**\n- * <p>A range of characters. Able to understand the idea of a contiguous\n- * sublist of an alphabet, a negated concept, and a set of characters.</p>\n- *\n- * <p>Used by <code>CharSet</code> to handle sets of characters.</p>\n- *\n- * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n+ * <p>A contiguous range of characters, optionally negated.</p>\n+ * \n+ * <p>This class is immutable.</p>\n+ *\n+ * @author Henri Yandell\n  * @author Stephen Colebourne\n  * @author Chris Feldhacker\n  * @since 1.0\n- * @version $Id: CharRange.java,v 1.9 2003/08/02 11:20:49 scolebourne Exp $\n+ * @version $Id: CharRange.java,v 1.10 2003/08/02 18:18:33 scolebourne Exp $\n  */\n-class CharRange {\n-\n-    /**\n-     * <p>Used internally to represent <code>null</code> in a char.</p>\n-     */\n-    private static final char UNSET = 0;\n-\n-    private char start;\n-    private char close;\n-    private boolean negated;\n-\n-    /**\n-     * <p>Construct a <code>CharRange</code> over a single character.</p>\n-     *\n-     * @param start char over which this range is placed\n-     */\n-    public CharRange(char start) {\n+public final class CharRange implements Serializable {\n+\n+    /** Serialization lock, Lang version 2.0 */\n+    static final long serialVersionUID = 8270183163158333422L;\n+    \n+    /** The first character, inclusive, in the range */\n+    private final char start;\n+    /** The last character, inclusive, in the range */\n+    private final char end;\n+    /** True if the range is everything except the characters specified */\n+    private final boolean negated;\n+    \n+    /** Cached toString */\n+    private transient String iToString;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Constructs a <code>CharRange</code> over a single character.</p>\n+     *\n+     * @param ch  only character in this range\n+     */\n+    public CharRange(char ch) {\n+        this(ch, ch, false);\n+    }\n+\n+    /**\n+     * <p>Constructs a <code>CharRange</code> over a set of characters.</p>\n+     *\n+     * @param start  first character, inclusive, in this range\n+     * @param end  last character, inclusive, in this range\n+     */\n+    public CharRange(char start, char end) {\n+        this(start, end, false);\n+    }\n+\n+    /**\n+     * <p>Constructs a <code>CharRange</code> over a set of characters,\n+     * optionally negating the range.</p>\n+     *\n+     * <p>A negated range includes everything except that defined by the\n+     * start and end characters.</p>\n+     * \n+     * <p>If start and end are in the wrong order, they are reversed.\n+     * Thus <code>a-e</code> is the same as <code>e-a</code>.</p>\n+     *\n+     * @param start  first character, inclusive, in this range\n+     * @param end  last character, inclusive, in this range\n+     * @param negated  true to express everything except the range\n+     */\n+    public CharRange(char start, char end, boolean negated) {\n+        super();\n+        if (start > end) {\n+            char temp = start;\n+            start = end;\n+            end = temp;\n+        }\n+        \n         this.start = start;\n-    }\n-\n-    /**\n-     * <p>Construct a <code>CharRange</code> over a set of characters.</p>\n-     *\n-     * @param start  char start character in this range. inclusive\n-     * @param close  char close character in this range. inclusive\n-     */\n-    public CharRange(char start, char close) {\n-        this.start = start;\n-        this.close = close;\n-    }\n-\n-    /**\n-     * <p>Construct a <code>CharRange</code> over a set of characters.</p>\n-     *\n-     * @param start  String start first character is in this range (inclusive).\n-     * @param close  String first character is close character in this\n-     *  range (inclusive).\n-     * @throws NullPointerException if either String is <code>null</code>\n-     */\n-    public CharRange(String start, String close) {\n-        this.start = start.charAt(0);\n-        this.close = close.charAt(0);\n-    }\n-\n-    /**\n-     * <p>Get the start character for this character range.</p>\n-     * \n-     * @return start char (inclusive)\n+        this.end = end;\n+        this.negated = negated;\n+    }\n+\n+    // Accessors\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Gets the start character for this character range.</p>\n+     * \n+     * @return the start char (inclusive)\n      */\n     public char getStart() {\n         return this.start;\n     }\n \n     /**\n-     * <p>Get the end character for this character range.</p>\n-     * \n-     * @return end char (inclusive)\n+     * <p>Gets the end character for this character range.</p>\n+     * \n+     * @return the end char (inclusive)\n      */\n     public char getEnd() {\n-        return this.close;\n-    }\n-\n-    /**\n-     * <p>Set the start character for this character range.</p>\n-     * \n-     * @param ch  start char (inclusive)\n-     */\n-    public void setStart(char ch) {\n-        this.start = ch;\n-    }\n-\n-    /**\n-     * <p>Set the end character for this character range.</p>\n-     * \n-     * @param ch  start char (inclusive)\n-     */\n-    public void setEnd(char ch) {\n-        this.close = ch;\n-    }\n-\n-    /**\n-     * <p>Is this <code>CharRange</code> over many characters.</p>\n-     *\n-     * @return boolean <code>true</code> is many characters\n-     */\n-    public boolean isRange() {\n-        return this.close != UNSET;\n-    }\n-\n-    /**\n-     * <p>Is the passed in character <code>ch</code> inside\n-     * this range.</p>\n-     *\n-     * @param ch character to test for\n-     * @return boolean <code>true</code> is in range\n-     */\n-    public boolean inRange(char ch) {\n-        if( isRange() ) {\n-            return ((ch >= start) && (ch <= close));\n-        } else {\n-            return start == ch;\n-        }\n-    }\n-\n-    /**\n-     * <p>Checks if this <code>CharRange</code> is negated.</p>\n-     *\n-     * @return boolean <code>true</code> is negated\n+        return this.end;\n+    }\n+\n+    /**\n+     * <p>Is this <code>CharRange</code> negated.</p>\n+     * \n+     * <p>A negated range includes everything except that defined by the\n+     * start and end characters.</p>\n+     *\n+     * @return <code>true</code> is negated\n      */\n     public boolean isNegated() {\n         return negated;\n     }\n \n-    /**\n-     * <p>Sets this character range to be negated or not.</p>\n-     *\n-     * <p>This implies that this <code>CharRange</code> is over\n-     * all characters except the ones in this range.</p>\n-     * \n-     * @param negated  <code>true</code> to negate the range\n-     */\n-    public void setNegated(boolean negated) {\n-        this.negated = negated;\n-    }\n-\n-    /**\n-     * <p>Output a string representation of the character range.</p>\n+    // Contains\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Is the character specified contained in this range.</p>\n+     *\n+     * @param ch  the character to check\n+     * @return <code>true</code> if this range contains the input character\n+     */\n+    public boolean contains(char ch) {\n+        return ((ch >= start && ch <= end) != negated);\n+    }\n+\n+    /**\n+     * <p>Are all the characters of the passed in range contained in\n+     * this range.</p>\n+     *\n+     * @param range  the range to check against\n+     * @return <code>true</code> if this range entirely contains the input range\n+     * @throws IllegalArgumentException if <code>null</code> input\n+     */\n+    public boolean contains(CharRange range) {\n+        if (range == null) {\n+            throw new IllegalArgumentException(\"The Range must not be null\");\n+        }\n+        if (negated) {\n+            if (range.negated) {\n+                return (start >= range.start && end <= range.end);\n+            } else {\n+                return (range.end < start || range.start > end);\n+            }\n+        } else {\n+            if (range.negated) {\n+                return (start == 0 && end == Character.MAX_VALUE);\n+            } else {\n+                return (start <= range.start && end >= range.end);\n+            }\n+        }\n+    }\n+\n+    // Basics\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Compares two CharRange objects, returning true if they represent\n+     * exactly the same range of characters defined in the same way.</p>\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof CharRange == false) {\n+            return false;\n+        }\n+        CharRange other = (CharRange) obj;\n+        return (start == other.start && end == other.end && negated == other.negated);\n+    }\n+\n+    /**\n+     * <p>Gets a hashCode compatable with the equals method.</p>\n+     * \n+     * @return a suitable hashCode\n+     */\n+    public int hashCode() {\n+        return 83 + start + 7 * end + (negated ? 1 : 0);\n+    }\n+    \n+    /**\n+     * <p>Gets a string representation of the character range.</p>\n      * \n      * @return string representation of this range\n      */\n     public String toString() {\n-        StringBuffer buf = new StringBuffer(4);\n-        if (isNegated()) {\n-            buf.append('^');\n-        }\n-        buf.append(start);\n-        if (isRange()) {\n-            buf.append('-');\n-            buf.append(close);\n-        }\n-        return buf.toString();\n+        if (iToString == null) {\n+            StringBuffer buf = new StringBuffer(4);\n+            if (isNegated()) {\n+                buf.append('^');\n+            }\n+            buf.append(start);\n+            if (start != end) {\n+                buf.append('-');\n+                buf.append(end);\n+            }\n+            iToString = buf.toString();\n+        }\n+        return iToString;\n     }\n     \n }\n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n  */\n package org.apache.commons.lang;\n \n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n \n /**\n  * <p>A set of characters.</p>\n- *\n- * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n+ * \n+ * <p>This class is immutable, but subclasses may not be.</p>\n+ *\n+ * @author Henri Yandell\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharSet.java,v 1.9 2003/07/31 21:32:47 scolebourne Exp $\n+ * @version $Id: CharSet.java,v 1.10 2003/08/02 18:18:33 scolebourne Exp $\n  */\n-public class CharSet {\n-\n-    private List set = new LinkedList();\n-\n-    /**\n-     * <p>Restricted constructor.</p>\n+public class CharSet implements Serializable {\n+\n+    /** Serialization lock, Lang version 2.0 */\n+    static final long serialVersionUID = 5947847346149275958L;\n+    \n+    /** A CharSet defining no characters */\n+    public static final CharSet EMPTY = new CharSet((String) null);\n+    /** A CharSet defining ASCII alphabetic characters \"a-zA-Z\" */\n+    public static final CharSet ASCII_ALPHA = new CharSet(\"a-zA-Z\");\n+    /** A CharSet defining ASCII alphabetic characters \"a-z\" */\n+    public static final CharSet ASCII_ALPHA_LOWER = new CharSet(\"a-z\");\n+    /** A CharSet defining ASCII alphabetic characters \"A-Z\" */\n+    public static final CharSet ASCII_ALPHA_UPPER = new CharSet(\"A-Z\");\n+    /** A CharSet defining ASCII alphabetic characters \"0-9\" */\n+    public static final CharSet ASCII_NUMERIC = new CharSet(\"0-9\");\n+    \n+    /**\n+     * A Map of the common cases used in the factory.\n+     * Subclasses can add more common patterns if desired.\n+     */\n+    protected static final Map COMMON = new HashMap();\n+    static {\n+        COMMON.put(null, EMPTY);\n+        COMMON.put(\"\", EMPTY);\n+        COMMON.put(\"a-zA-Z\", ASCII_ALPHA);\n+        COMMON.put(\"A-Za-z\", ASCII_ALPHA);\n+        COMMON.put(\"a-z\", ASCII_ALPHA_LOWER);\n+        COMMON.put(\"A-Z\", ASCII_ALPHA_UPPER);\n+        COMMON.put(\"0-9\", ASCII_NUMERIC);\n+    }\n+    \n+    /** Shared range for the dash character */\n+    private static final CharRange DASH = new CharRange('-');\n+    /** Shared range for the negate character */\n+    private static final CharRange NEGATE = new CharRange('^');\n+    \n+    /** The set of CharRange objects */\n+    private Set set = new HashSet();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Factory method to create a new CharSet using a special syntax.</p>\n+     * \n+     * <ul>\n+     *  <li><code>null</code> or empty string (\"\")\n+     * - set containing no characters</li>\n+     *  <li>Single character, such as \"a\"\n+     *  - set containing just that character</li>\n+     *  <li>Multi character, such as \"a-e\"\n+     *  - set containing characters from one character to the other</li>\n+     *  <li>Negated, such as \"^a\" or \"^a-e\"\n+     *  - set containing all characters except those defined</li>\n+     *  <li>Combinations, such as \"abe-g\"\n+     *  - set containing all the characters from the individual sets</li>\n+     * </ul>\n+     * \n+     * <p>If the same range is defined twice using the same syntax, only\n+     * one range will be kept.\n+     * Thus, \"a-ca-c\" creates only one range of \"a-c\".\n+     * However, \"a-cabc\" creates two ranges as they are defined differently.</p>\n      *\n-     * <p>Use the factory method\n-     * {@link CharSetUtils#evaluateSet(java.lang.String[])}.</p>\n-     */\n-    protected CharSet(String set) {\n-        add(set);\n-    }\n-\n-    /**\n-     * <p>Restricted constructor.</p>\n+     * <p>All CharSet objects returned by this method will be immutable.</p>\n+     * \n+     * @param setStr  the String describing the set, may be null\n+     */\n+    public static CharSet getInstance(String setStr) {\n+        Object set = COMMON.get(setStr);\n+        if (set != null) {\n+            return (CharSet) set;\n+        }\n+        return new CharSet(setStr);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Constructs a new CharSet using the set syntax.</p>\n      *\n-     * <p>Use the factory method\n-     * {@link CharSetUtils#evaluateSet(java.lang.String[])}.</p>\n+     * @param setStr  the String describing the set, may be null\n+     */\n+    protected CharSet(String setStr) {\n+        super();\n+        add(setStr);\n+    }\n+\n+    /**\n+     * <p>Constructs a new CharSet using the set syntax.\n+     * Each string is merged in with the set.</p>\n      *\n      * @throws NullPointerException if set is <code>null</code>\n      */\n     protected CharSet(String[] set) {\n+        super();\n         int sz = set.length;\n         for (int i = 0; i < sz; i++) {\n             add(set[i]);\n         }\n     }\n \n-    /**\n-     * <p>Does the <code>CharSet</code> contain the specified\n-     * character <code>ch</code>.</p>\n-     * \n-     * @param ch  the character to check for\n-     * @return <code>true</code> if it does contain the character\n-     *  <code>ch</code>\n-     */\n-    public boolean contains(char ch) {\n-        Iterator iterator = set.iterator();\n-        boolean bool = false;\n-        while (iterator.hasNext()) {\n-            CharRange range = (CharRange) iterator.next();\n-            if (range.isNegated()) {\n-                if (!range.inRange(ch)) {\n-                    bool = true;\n-                }\n-            } else {\n-                if (range.inRange(ch)) {\n-                    bool = true;\n-                }\n-            }\n-        }\n-        return bool;\n-    }\n-\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Add a set definition string to the <code>CharSet</code>.</p>\n      * \n         if (str == null) {\n             return;\n         }\n-        int sz = str.length();\n-        CharRange range = null;\n-\n-        if (\"-\".equals(str)) {\n-            range = new CharRange('-');\n-            set.add(range);\n-            return;\n-        }\n-\n-        boolean end = false;\n-        boolean negated = false;\n-        for (int i = 0; i < sz; i++) {\n-            char ch = str.charAt(i);\n-            if (ch == '-') {\n-                end = true;\n-                continue;\n+\n+        int len = str.length();\n+        switch (len) {\n+            case 0:\n+            // do nothing\n+            break;\n+            \n+            case 1:\n+            set.add(new CharRange(str.charAt(0)));\n+            break;\n+            \n+            default:\n+            int start = -1;\n+            boolean negated = false;\n+            for (int i = 0; i < len; i++) {\n+                char ch = str.charAt(i);\n+                if (ch == '-') {\n+                    if (start == -1) {\n+                        // dash found not as range separator\n+                        // treat as ordinary start block char\n+                        start = ch; \n+                    } else if (i == len - 1) {\n+                        // dash is last character, store two single characters\n+                        set.add(new CharRange((char) start, (char) start, negated));\n+                        set.add(DASH);\n+                        start = -1;\n+                        negated = false;\n+                    } else {\n+                        // range block found, store it\n+                        set.add(new CharRange((char) start, str.charAt(++i), negated));\n+                        start = -1;\n+                        negated = false;\n+                    }\n+                } else if (ch == '^') {\n+                    if (start == -1) {\n+                        if (negated) {\n+                            // double negate, treat second as ordinary start block char\n+                            start = ch;\n+                        } else {\n+                            // negate next block\n+                            negated = true;\n+                        }\n+                    } else {\n+                        // previous block has ended, store it\n+                        set.add(new CharRange((char) start, (char) start, negated));\n+                        start = -1;\n+                        negated = true;\n+                    }\n+                } else {\n+                    if (start == -1) {\n+                        // start of block\n+                        start = ch;\n+                    } else {\n+                        // previous block has ended, store it, and start next block\n+                        set.add(new CharRange((char) start, (char) start, negated));\n+                        start = ch;\n+                        negated = false;\n+                    }\n+                }\n             }\n-            if (end) {\n-                range.setEnd(ch);\n-                continue;\n+            // handle leftovers\n+            if (start != -1) {\n+                set.add(new CharRange((char) start, (char) start, negated));\n+            } else if (negated) {\n+                set.add(NEGATE);\n             }\n-            if (ch == '^') {\n-                negated = true;\n-                continue;\n+            break;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Gets the internal set as an array of CharRange objects.</p>\n+     * \n+     * @return an array of immutable CharRange objects\n+     */\n+    public CharRange[] getCharRanges() {\n+        return (CharRange[]) set.toArray(new CharRange[set.size()]);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Does the <code>CharSet</code> contain the specified\n+     * character <code>ch</code>.</p>\n+     * \n+     * @param ch  the character to check for\n+     * @return <code>true</code> if the set contains the characters\n+     */\n+    public boolean contains(char ch) {\n+        for (Iterator it = set.iterator(); it.hasNext();) {\n+            CharRange range = (CharRange) it.next();\n+            if (range.contains(ch)) {\n+                return true;\n             }\n-            range = new CharRange(ch);\n-            range.setNegated(negated);\n-            set.add(range);\n-        }\n-    }\n-\n-    /**\n-     * <p>Returns a string representation of the set.</p>\n-     * \n-     * @return string representation\n+        }\n+        return false;\n+    }\n+\n+    // Basics\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Compares two CharSet objects, returning true if they represent\n+     * exactly the same set of characters defined in the same way.</p>\n+     * \n+     * <p>The two sets <code>abc</code> and <code>a-c</code> are <i>not</i>\n+     * equal according to this method.</p>\n+     * \n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof CharSet == false) {\n+            return false;\n+        }\n+        CharSet other = (CharSet) obj;\n+        return (set.equals(other.set));\n+    }\n+\n+    /**\n+     * <p>Gets a hashCode compatable with the equals method.</p>\n+     * \n+     * @return a suitable hashCode\n+     */\n+    public int hashCode() {\n+        return 89 + set.hashCode();\n+    }\n+    \n+    /**\n+     * <p>Gets a string representation of the set.</p>\n+     * \n+     * @return string representation of the set\n      */\n     public String toString() {\n         return set.toString();\n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharSetUtils.java,v 1.19 2003/08/01 20:45:17 scolebourne Exp $\n+ * @version $Id: CharSetUtils.java,v 1.20 2003/08/02 18:18:33 scolebourne Exp $\n  */\n public class CharSetUtils {\n \n      *\n      * @param set  the set, may be null\n      * @return a CharSet instance, <code>null</code> if null input\n-     */\n-    public static CharSet evaluateSet(String set) {\n-        if (set == null) {\n+     * @deprecated Use {@link CharSet#getInstance(String)}.\n+     *             Method will be removed in Commons Lang 3.0.\n+     */\n+    public static CharSet evaluateSet(String setStr) {\n+        if (setStr == null) {\n             return null;\n         }\n-        return new CharSet(new String[] {set}); \n+        return CharSet.getInstance(setStr); \n     }\n \n     /**\n      *\n      * @param set  the set, may be null\n      * @return a CharSet instance, <code>null</code> if null input\n+     * @deprecated Use {@link CharSet#getInstance(String)}.\n+     *             Method will be removed in Commons Lang 3.0.\n      */\n     public static CharSet evaluateSet(String[] set) {\n         if (set == null) {\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/CharRangeTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang.CharRange}.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: CharRangeTest.java,v 1.1 2003/08/02 18:18:33 scolebourne Exp $\n+ */\n+public class CharRangeTest extends TestCase {\n+    \n+    public CharRangeTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(CharRangeTest.class);\n+        suite.setName(\"CharRange Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClass() {\n+        assertEquals(true, Modifier.isPublic(CharRange.class.getModifiers()));\n+        assertEquals(true, Modifier.isFinal(CharRange.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testConstructorAccessors_Char() {\n+        CharRange rangea = new CharRange('a');\n+        CharRange rangeb = new CharRange('b');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('a', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_CharChar_Same() {\n+        CharRange rangea = new CharRange('a', 'a');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('a', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_CharChar_Normal() {\n+        CharRange rangea = new CharRange('a', 'e');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a-e\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_CharChar_Reversed() {\n+        CharRange rangea = new CharRange('e', 'a');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a-e\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_CharCharBoolean_Same() {\n+        CharRange rangea = new CharRange('a', 'a', false);\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('a', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_CharCharBoolean_Normal() {\n+        CharRange rangea = new CharRange('a', 'e', false);\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a-e\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_CharCharBoolean_Reversed() {\n+        CharRange rangea = new CharRange('e', 'a', false);\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a-e\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_CharCharBoolean_SameNegated() {\n+        CharRange rangea = new CharRange('a', 'a', true);\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('a', rangea.getEnd());\n+        assertEquals(true, rangea.isNegated());\n+        assertEquals(\"^a\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_CharCharBoolean_NormalNegated() {\n+        CharRange rangea = new CharRange('a', 'e', true);\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(true, rangea.isNegated());\n+        assertEquals(\"^a-e\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_CharCharBoolean_ReversedNegated() {\n+        CharRange rangea = new CharRange('e', 'a', true);\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(true, rangea.isNegated());\n+        assertEquals(\"^a-e\", rangea.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public void testEquals_Object() {\n+        CharRange rangea = new CharRange('a');\n+        CharRange rangeae = new CharRange('a', 'e');\n+        CharRange rangenotbf = new CharRange('b', 'f', false);\n+        \n+        assertEquals(false, rangea.equals(null));\n+        \n+        assertEquals(true, rangea.equals(rangea));\n+        assertEquals(true, rangea.equals(new CharRange('a')));\n+        assertEquals(true, rangeae.equals(rangeae));\n+        assertEquals(true, rangeae.equals(new CharRange('a', 'e')));\n+        assertEquals(true, rangenotbf.equals(rangenotbf));\n+        assertEquals(true, rangenotbf.equals(new CharRange('b', 'f', false)));\n+        \n+        assertEquals(false, rangea.equals(rangeae));\n+        assertEquals(false, rangea.equals(rangenotbf));\n+        assertEquals(false, rangeae.equals(rangea));\n+        assertEquals(false, rangeae.equals(rangenotbf));\n+        assertEquals(false, rangenotbf.equals(rangea));\n+        assertEquals(false, rangenotbf.equals(rangeae));\n+    }\n+            \n+    public void testHashCode() {\n+        CharRange rangea = new CharRange('a');\n+        CharRange rangeae = new CharRange('a', 'e');\n+        CharRange rangenotbf = new CharRange('b', 'f', false);\n+        \n+        assertEquals(true, rangea.hashCode() == rangea.hashCode());\n+        assertEquals(true, rangea.hashCode() == new CharRange('a').hashCode());\n+        assertEquals(true, rangeae.hashCode() == rangeae.hashCode());\n+        assertEquals(true, rangeae.hashCode() == new CharRange('a', 'e').hashCode());\n+        assertEquals(true, rangenotbf.hashCode() == rangenotbf.hashCode());\n+        assertEquals(true, rangenotbf.hashCode() == new CharRange('b', 'f', false).hashCode());\n+        \n+        assertEquals(false, rangea.hashCode() == rangeae.hashCode());\n+        assertEquals(false, rangea.hashCode() == rangenotbf.hashCode());\n+        assertEquals(false, rangeae.hashCode() == rangea.hashCode());\n+        assertEquals(false, rangeae.hashCode() == rangenotbf.hashCode());\n+        assertEquals(false, rangenotbf.hashCode() == rangea.hashCode());\n+        assertEquals(false, rangenotbf.hashCode() == rangeae.hashCode());\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testContains_Char() {\n+        CharRange range = new CharRange('c');\n+        assertEquals(false, range.contains('b'));\n+        assertEquals(true, range.contains('c'));\n+        assertEquals(false, range.contains('d'));\n+        assertEquals(false, range.contains('e'));\n+        \n+        range = new CharRange('c', 'd');\n+        assertEquals(false, range.contains('b'));\n+        assertEquals(true, range.contains('c'));\n+        assertEquals(true, range.contains('d'));\n+        assertEquals(false, range.contains('e'));\n+        \n+        range = new CharRange('d', 'c');\n+        assertEquals(false, range.contains('b'));\n+        assertEquals(true, range.contains('c'));\n+        assertEquals(true, range.contains('d'));\n+        assertEquals(false, range.contains('e'));\n+        \n+        range = new CharRange('c', 'd', false);\n+        assertEquals(false, range.contains('b'));\n+        assertEquals(true, range.contains('c'));\n+        assertEquals(true, range.contains('d'));\n+        assertEquals(false, range.contains('e'));\n+        \n+        range = new CharRange('c', 'd', true);\n+        assertEquals(true, range.contains('b'));\n+        assertEquals(false, range.contains('c'));\n+        assertEquals(false, range.contains('d'));\n+        assertEquals(true, range.contains('e'));\n+        assertEquals(true, range.contains((char) 0));\n+        assertEquals(true, range.contains(Character.MAX_VALUE));\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testContains_Charrange() {\n+        CharRange a = new CharRange('a');\n+        CharRange b = new CharRange('b');\n+        CharRange c = new CharRange('c');\n+        CharRange c2 = new CharRange('c');\n+        CharRange d = new CharRange('d');\n+        CharRange e = new CharRange('e');\n+        CharRange cd = new CharRange('c', 'd');\n+        CharRange bd = new CharRange('b', 'd');\n+        CharRange bc = new CharRange('b', 'c');\n+        CharRange ab = new CharRange('a', 'b');\n+        CharRange de = new CharRange('d', 'e');\n+        CharRange ef = new CharRange('e', 'f');\n+        CharRange ae = new CharRange('a', 'e');\n+        \n+        // normal/normal\n+        assertEquals(false, c.contains(b));\n+        assertEquals(true, c.contains(c));\n+        assertEquals(true, c.contains(c2));\n+        assertEquals(false, c.contains(d));\n+        \n+        assertEquals(false, c.contains(cd));\n+        assertEquals(false, c.contains(bd));\n+        assertEquals(false, c.contains(bc));\n+        assertEquals(false, c.contains(ab));\n+        assertEquals(false, c.contains(de));\n+        \n+        assertEquals(true, cd.contains(c));\n+        assertEquals(true, bd.contains(c));\n+        assertEquals(true, bc.contains(c));\n+        assertEquals(false, ab.contains(c));\n+        assertEquals(false, de.contains(c));\n+\n+        assertEquals(true, ae.contains(b));\n+        assertEquals(true, ae.contains(ab));\n+        assertEquals(true, ae.contains(bc));\n+        assertEquals(true, ae.contains(cd));\n+        assertEquals(true, ae.contains(de));\n+        \n+        CharRange notb = new CharRange('b', 'b', true);\n+        CharRange notc = new CharRange('c', 'c', true);\n+        CharRange notd = new CharRange('d', 'd', true);\n+        CharRange notab = new CharRange('a', 'b', true);\n+        CharRange notbc = new CharRange('b', 'c', true);\n+        CharRange notbd = new CharRange('b', 'd', true);\n+        CharRange notcd = new CharRange('c', 'd', true);\n+        CharRange notde = new CharRange('d', 'e', true);\n+        CharRange notae = new CharRange('a', 'e', true);\n+        CharRange all = new CharRange((char) 0, Character.MAX_VALUE);\n+        CharRange allbutfirst = new CharRange((char) 1, Character.MAX_VALUE);\n+        \n+        // normal/negated\n+        assertEquals(false, c.contains(notc));\n+        assertEquals(false, c.contains(notbd));\n+        assertEquals(true, all.contains(notc));\n+        assertEquals(true, all.contains(notbd));\n+        assertEquals(false, allbutfirst.contains(notc));\n+        assertEquals(false, allbutfirst.contains(notbd));\n+        \n+        // negated/normal\n+        assertEquals(true, notc.contains(a));\n+        assertEquals(true, notc.contains(b));\n+        assertEquals(false, notc.contains(c));\n+        assertEquals(true, notc.contains(d));\n+        assertEquals(true, notc.contains(e));\n+        \n+        assertEquals(true, notc.contains(ab));\n+        assertEquals(false, notc.contains(bc));\n+        assertEquals(false, notc.contains(bd));\n+        assertEquals(false, notc.contains(cd));\n+        assertEquals(true, notc.contains(de));\n+        assertEquals(false, notc.contains(ae));\n+        assertEquals(false, notc.contains(all));\n+        assertEquals(false, notc.contains(allbutfirst));\n+        \n+        assertEquals(true, notbd.contains(a));\n+        assertEquals(false, notbd.contains(b));\n+        assertEquals(false, notbd.contains(c));\n+        assertEquals(false, notbd.contains(d));\n+        assertEquals(true, notbd.contains(e));\n+        \n+        assertEquals(true, notcd.contains(ab));\n+        assertEquals(false, notcd.contains(bc));\n+        assertEquals(false, notcd.contains(bd));\n+        assertEquals(false, notcd.contains(cd));\n+        assertEquals(false, notcd.contains(de));\n+        assertEquals(false, notcd.contains(ae));\n+        assertEquals(true, notcd.contains(ef));\n+        assertEquals(false, notcd.contains(all));\n+        assertEquals(false, notcd.contains(allbutfirst));\n+        \n+        // negated/negated\n+        assertEquals(false, notc.contains(notb));\n+        assertEquals(true, notc.contains(notc));\n+        assertEquals(false, notc.contains(notd));\n+        \n+        assertEquals(false, notc.contains(notab));\n+        assertEquals(true, notc.contains(notbc));\n+        assertEquals(true, notc.contains(notbd));\n+        assertEquals(true, notc.contains(notcd));\n+        assertEquals(false, notc.contains(notde));\n+        \n+        assertEquals(false, notbd.contains(notb));\n+        assertEquals(false, notbd.contains(notc));\n+        assertEquals(false, notbd.contains(notd));\n+        \n+        assertEquals(false, notbd.contains(notab));\n+        assertEquals(false, notbd.contains(notbc));\n+        assertEquals(true, notbd.contains(notbd));\n+        assertEquals(false, notbd.contains(notcd));\n+        assertEquals(false, notbd.contains(notde));\n+        assertEquals(true, notbd.contains(notae));\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testSerialization() {\n+        CharRange range = new CharRange('a');\n+        assertEquals(range, SerializationUtils.clone(range)); \n+        range = new CharRange('a', 'e');\n+        assertEquals(range, SerializationUtils.clone(range)); \n+        range = new CharRange('a', 'e', true);\n+        assertEquals(range, SerializationUtils.clone(range)); \n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/CharSetTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang.CharSet}.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: CharSetTest.java,v 1.1 2003/08/02 18:18:33 scolebourne Exp $\n+ */\n+public class CharSetTest extends TestCase {\n+    \n+    public CharSetTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(CharSetTest.class);\n+        suite.setName(\"CharSet Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClass() {\n+        assertEquals(true, Modifier.isPublic(CharSet.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(CharSet.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testGetInstance() {\n+        assertSame(CharSet.EMPTY, CharSet.getInstance(null));\n+        assertSame(CharSet.EMPTY, CharSet.getInstance(\"\"));\n+        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"a-zA-Z\"));\n+        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"A-Za-z\"));\n+        assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance(\"a-z\"));\n+        assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance(\"A-Z\"));\n+        assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance(\"0-9\"));\n+    }\n+            \n+    //-----------------------------------------------------------------------\n+    public void testConstructor_String_simple() {\n+        CharSet set;\n+        CharRange[] array;\n+        \n+        set = CharSet.getInstance((String) null);\n+        array = set.getCharRanges();\n+        assertEquals(\"[]\", set.toString());\n+        assertEquals(0, array.length);\n+        \n+        set = CharSet.getInstance(\"\");\n+        array = set.getCharRanges();\n+        assertEquals(\"[]\", set.toString());\n+        assertEquals(0, array.length);\n+        \n+        set = CharSet.getInstance(\"a\");\n+        array = set.getCharRanges();\n+        assertEquals(\"[a]\", set.toString());\n+        assertEquals(1, array.length);\n+        assertEquals(\"a\", array[0].toString());\n+        \n+        set = CharSet.getInstance(\"^a\");\n+        array = set.getCharRanges();\n+        assertEquals(\"[^a]\", set.toString());\n+        assertEquals(1, array.length);\n+        assertEquals(\"^a\", array[0].toString());\n+        \n+        set = CharSet.getInstance(\"a-e\");\n+        array = set.getCharRanges();\n+        assertEquals(\"[a-e]\", set.toString());\n+        assertEquals(1, array.length);\n+        assertEquals(\"a-e\", array[0].toString());\n+        \n+        set = CharSet.getInstance(\"^a-e\");\n+        array = set.getCharRanges();\n+        assertEquals(\"[^a-e]\", set.toString());\n+        assertEquals(1, array.length);\n+        assertEquals(\"^a-e\", array[0].toString());\n+    }\n+    \n+    public void testConstructor_String_combo() {\n+        CharSet set;\n+        CharRange[] array;\n+        \n+        set = CharSet.getInstance(\"abc\");\n+        array = set.getCharRanges();\n+        assertEquals(3, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n+        \n+        set = CharSet.getInstance(\"a-ce-f\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'c')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n+        \n+        set = CharSet.getInstance(\"ae-f\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n+        \n+        set = CharSet.getInstance(\"e-fa\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n+        \n+        set = CharSet.getInstance(\"ae-fm-pz\");\n+        array = set.getCharRanges();\n+        assertEquals(4, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('m', 'p')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('z')));\n+    }\n+    \n+    public void testConstructor_String_comboNegated() {\n+        CharSet set;\n+        CharRange[] array;\n+        \n+        set = CharSet.getInstance(\"^abc\");\n+        array = set.getCharRanges();\n+        assertEquals(3, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n+        \n+        set = CharSet.getInstance(\"b^ac\");\n+        array = set.getCharRanges();\n+        assertEquals(3, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n+        \n+        set = CharSet.getInstance(\"db^ac\");\n+        array = set.getCharRanges();\n+        assertEquals(4, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('d')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n+        \n+        set = CharSet.getInstance(\"^b^a\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('b', 'b', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n+        \n+        set = CharSet.getInstance(\"b^a-c^z\");\n+        array = set.getCharRanges();\n+        assertEquals(3, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'c', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('z', 'z', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n+    }\n+        \n+    public void testConstructor_String_oddDash() {\n+        CharSet set;\n+        CharRange[] array;\n+        \n+        set = CharSet.getInstance(\"-\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        \n+        set = CharSet.getInstance(\"--\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        \n+        set = CharSet.getInstance(\"---\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        \n+        set = CharSet.getInstance(\"----\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        \n+        set = CharSet.getInstance(\"-a\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n+        \n+        set = CharSet.getInstance(\"a-\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        \n+        set = CharSet.getInstance(\"a--\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '-')));\n+        \n+        set = CharSet.getInstance(\"--a\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-', 'a')));\n+    }\n+    \n+    public void testConstructor_String_oddNegate() {\n+        CharSet set;\n+        CharRange[] array;\n+        set = CharSet.getInstance(\"^\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^')));\n+        \n+        set = CharSet.getInstance(\"^^\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));\n+        \n+        set = CharSet.getInstance(\"^^^\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^')));\n+        \n+        set = CharSet.getInstance(\"^^^^\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));\n+        \n+        set = CharSet.getInstance(\"a^\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^')));\n+        \n+        set = CharSet.getInstance(\"^a-\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        \n+        set = CharSet.getInstance(\"^^-c\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', 'c', true)));\n+        \n+        set = CharSet.getInstance(\"^c-^\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true)));\n+        \n+        set = CharSet.getInstance(\"^c-^d\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('d')));\n+        \n+        set = CharSet.getInstance(\"^^-\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testEquals_Object() {\n+        CharSet abc = CharSet.getInstance(\"abc\");\n+        CharSet abc2 = CharSet.getInstance(\"abc\");\n+        CharSet atoc = CharSet.getInstance(\"a-c\");\n+        CharSet atoc2 = CharSet.getInstance(\"a-c\");\n+        CharSet notatoc = CharSet.getInstance(\"^a-c\");\n+        CharSet notatoc2 = CharSet.getInstance(\"^a-c\");\n+        \n+        assertEquals(false, abc.equals(null));\n+        \n+        assertEquals(true, abc.equals(abc));\n+        assertEquals(true, abc.equals(abc2));\n+        assertEquals(false, abc.equals(atoc));\n+        assertEquals(false, abc.equals(notatoc));\n+        \n+        assertEquals(false, atoc.equals(abc));\n+        assertEquals(true, atoc.equals(atoc));\n+        assertEquals(true, atoc.equals(atoc2));\n+        assertEquals(false, atoc.equals(notatoc));\n+        \n+        assertEquals(false, notatoc.equals(abc));\n+        assertEquals(false, notatoc.equals(atoc));\n+        assertEquals(true, notatoc.equals(notatoc));\n+        assertEquals(true, notatoc.equals(notatoc2));\n+    }\n+            \n+    public void testHashCode() {\n+        CharSet abc = CharSet.getInstance(\"abc\");\n+        CharSet abc2 = CharSet.getInstance(\"abc\");\n+        CharSet atoc = CharSet.getInstance(\"a-c\");\n+        CharSet atoc2 = CharSet.getInstance(\"a-c\");\n+        CharSet notatoc = CharSet.getInstance(\"^a-c\");\n+        CharSet notatoc2 = CharSet.getInstance(\"^a-c\");\n+        \n+        assertEquals(abc.hashCode(), abc.hashCode());\n+        assertEquals(abc.hashCode(), abc2.hashCode());\n+        assertEquals(atoc.hashCode(), atoc.hashCode());\n+        assertEquals(atoc.hashCode(), atoc2.hashCode());\n+        assertEquals(notatoc.hashCode(), notatoc.hashCode());\n+        assertEquals(notatoc.hashCode(), notatoc2.hashCode());\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testContains_Char() {\n+        CharSet btod = CharSet.getInstance(\"b-d\");\n+        CharSet bcd = CharSet.getInstance(\"bcd\");\n+        CharSet bd = CharSet.getInstance(\"bd\");\n+        CharSet notbtod = CharSet.getInstance(\"^b-d\");\n+        \n+        assertEquals(false, btod.contains('a'));\n+        assertEquals(true, btod.contains('b'));\n+        assertEquals(true, btod.contains('c'));\n+        assertEquals(true, btod.contains('d'));\n+        assertEquals(false, btod.contains('e'));\n+        \n+        assertEquals(false, bcd.contains('a'));\n+        assertEquals(true, bcd.contains('b'));\n+        assertEquals(true, bcd.contains('c'));\n+        assertEquals(true, bcd.contains('d'));\n+        assertEquals(false, bcd.contains('e'));\n+        \n+        assertEquals(false, bd.contains('a'));\n+        assertEquals(true, bd.contains('b'));\n+        assertEquals(false, bd.contains('c'));\n+        assertEquals(true, bd.contains('d'));\n+        assertEquals(false, bd.contains('e'));\n+        \n+        assertEquals(true, notbtod.contains('a'));\n+        assertEquals(false, notbtod.contains('b'));\n+        assertEquals(false, notbtod.contains('c'));\n+        assertEquals(false, notbtod.contains('d'));\n+        assertEquals(true, notbtod.contains('e'));\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testSerialization() {\n+        CharSet set = CharSet.getInstance(\"a\");\n+        assertEquals(set, SerializationUtils.clone(set)); \n+        set = CharSet.getInstance(\"a-e\");\n+        assertEquals(set, SerializationUtils.clone(set)); \n+        set = CharSet.getInstance(\"be-f^a-z\");\n+        assertEquals(set, SerializationUtils.clone(set)); \n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testStatics() {\n+        CharRange[] array;\n+        \n+        array = CharSet.EMPTY.getCharRanges();\n+        assertEquals(0, array.length);\n+        \n+        array = CharSet.ASCII_ALPHA.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'z')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('A', 'Z')));\n+        \n+        array = CharSet.ASCII_ALPHA_LOWER.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'z')));\n+        \n+        array = CharSet.ASCII_ALPHA_UPPER.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('A', 'Z')));\n+        \n+        array = CharSet.ASCII_NUMERIC.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('0', '9')));\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Matthew Hawthorne\n- * @version $Id: LangTestSuite.java,v 1.18 2003/05/24 12:11:02 scolebourne Exp $\n+ * @version $Id: LangTestSuite.java,v 1.19 2003/08/02 18:18:33 scolebourne Exp $\n  */\n public class LangTestSuite extends TestCase {\n     \n         suite.setName(\"Commons-Lang Tests\");\n         suite.addTest(ArrayUtilsTest.suite());\n         suite.addTest(BooleanUtilsTest.suite());\n+        suite.addTest(CharRangeTest.suite());\n+        suite.addTest(CharSetTest.suite());\n         suite.addTest(CharSetUtilsTest.suite());\n         suite.addTest(ClassUtilsTest.suite());\n         suite.addTest(EntitiesTest.suite());", "timestamp": 1059848313, "metainfo": ""}