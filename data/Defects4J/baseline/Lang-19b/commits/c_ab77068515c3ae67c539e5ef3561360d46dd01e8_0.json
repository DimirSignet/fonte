{"sha": "ab77068515c3ae67c539e5ef3561360d46dd01e8", "log": "added an overloaded method for capitalize and capitalizeFully so people can do things like capitalize double-barrelled names   ", "commit": "\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: WordUtils.java,v 1.10 2004/06/03 03:08:33 bayard Exp $\n+ * @version $Id: WordUtils.java,v 1.11 2004/06/03 03:40:28 bayard Exp $\n  */\n public class WordUtils {\n \n      * @see #capitalizeFully(String)\n      */\n     public static String capitalize(String str) {\n-        int strLen;\n-        if (str == null || (strLen = str.length()) == 0) {\n+        return capitalize(str, null);\n+    }\n+\n+    /**\n+     * <p>Capitalizes all the delimiter separated words in a String.\n+     * Only the first letter of each word is changed. To change all letters to\n+     * the capitalized case, use {@link #capitalizeFully(String)}.</p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * Capitalization uses the unicode title case, normally equivalent to\n+     * upper case.</p>\n+     *\n+     * <pre>\n+     * WordUtils.capitalize(null)        = null\n+     * WordUtils.capitalize(\"\")          = \"\"\n+     * WordUtils.capitalize(\"i am FINE\") = \"I Am FINE\"\n+     * </pre>\n+     * \n+     * @param str  the String to capitalize, may be null\n+     * @param delimiters  characters to capitalize afterwards\n+     * @return capitalized String, <code>null</code> if null String input\n+     * @see #uncapitalize(String)\n+     * @see #capitalizeFully(String)\n+     */\n+    public static String capitalize(String str, char[] delimiters) {\n+        if (str == null || str.length() == 0) {\n             return str;\n         }\n+        int strLen = str.length();\n         StringBuffer buffer = new StringBuffer(strLen);\n-        boolean whitespace = true;\n+\n+        int delimitersLen = 0;\n+        if(delimiters != null) {\n+            delimitersLen = delimiters.length;\n+        }\n+\n+        boolean capitalizeNext = true;\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n-            if (Character.isWhitespace(ch)) {\n+\n+            boolean isDelimiter = false;\n+            if(delimiters == null) {\n+                isDelimiter = Character.isWhitespace(ch);\n+            } else {\n+                for(int j=0; j < delimitersLen; j++) {\n+                    if(ch == delimiters[j]) {\n+                        isDelimiter = true;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            if (isDelimiter) {\n                 buffer.append(ch);\n-                whitespace = true;\n-            } else if (whitespace) {\n+                capitalizeNext = true;\n+            } else if (capitalizeNext) {\n                 buffer.append(Character.toTitleCase(ch));\n-                whitespace = false;\n+                capitalizeNext = false;\n             } else {\n                 buffer.append(ch);\n             }\n      * @return capitalized String, <code>null</code> if null String input\n      */\n     public static String capitalizeFully(String str) {\n+        return capitalizeFully(str, null);\n+    }\n+\n+    /**\n+     * <p>Capitalizes all the delimiter separated words in a String.\n+     * All letters are changed, so the resulting string will be fully changed.</p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * Capitalization uses the unicode title case, normally equivalent to\n+     * upper case.</p>\n+     *\n+     * <pre>\n+     * WordUtils.capitalize(null)        = null\n+     * WordUtils.capitalize(\"\")          = \"\"\n+     * WordUtils.capitalize(\"i am FINE\") = \"I Am Fine\"\n+     * </pre>\n+     * \n+     * @param str  the String to capitalize, may be null\n+     * @param delimiters  characters to capitalize afterwards\n+     * @return capitalized String, <code>null</code> if null String input\n+     */\n+    public static String capitalizeFully(String str, char[] delimiters) {\n         if (str == null || str.length() == 0) {\n             return str;\n         }\n         str = str.toLowerCase();\n-        return capitalize(str);\n+        return capitalize(str, delimiters);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/WordUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/WordUtilsTest.java\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Henri Yandell\n  * @author Stephen Colebourne\n- * @version $Id: WordUtilsTest.java,v 1.5 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id: WordUtilsTest.java,v 1.6 2004/06/03 03:40:28 bayard Exp $\n  */\n public class WordUtilsTest extends TestCase {\n \n         assertEquals(\"I AM HERE 123\", WordUtils.capitalize(\"I AM HERE 123\") );\n     }\n     \n+    public void testCapitalizeWithDelimiters_String() {\n+        assertEquals(null, WordUtils.capitalize(null, null));\n+        assertEquals(\"\", WordUtils.capitalize(\"\", new char[0]));\n+        assertEquals(\"  \", WordUtils.capitalize(\"  \", new char[0]));\n+        \n+        char[] chars = new char[] { '-', '+', ' ', '@' };\n+        assertEquals(\"I\", WordUtils.capitalize(\"I\", chars) );\n+        assertEquals(\"I\", WordUtils.capitalize(\"i\", chars) );\n+        assertEquals(\"I-Am Here+123\", WordUtils.capitalize(\"i-am here+123\", chars) );\n+        assertEquals(\"I Am+Here-123\", WordUtils.capitalize(\"I Am+Here-123\", chars) );\n+        assertEquals(\"I+Am-HERE 123\", WordUtils.capitalize(\"i+am-HERE 123\", chars) );\n+        assertEquals(\"I-AM HERE+123\", WordUtils.capitalize(\"I-AM HERE+123\", chars) );\n+    }\n+\n     public void testCapitalizeFully_String() {\n         assertEquals(null, WordUtils.capitalizeFully(null));\n         assertEquals(\"\", WordUtils.capitalizeFully(\"\"));\n         assertEquals(\"  \", WordUtils.capitalizeFully(\"  \"));\n         \n-        assertEquals(\"I\", WordUtils.capitalize(\"I\") );\n-        assertEquals(\"I\", WordUtils.capitalize(\"i\") );\n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\") );\n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\") );\n         assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am here 123\") );\n         assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I Am Here 123\") );\n         assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am HERE 123\") );\n         assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I AM HERE 123\") );\n     }\n     \n+    public void testCapitalizeFullyWithDelimiters_String() {\n+        assertEquals(null, WordUtils.capitalizeFully(null, null));\n+        assertEquals(\"\", WordUtils.capitalizeFully(\"\", new char[0]));\n+        assertEquals(\"  \", WordUtils.capitalizeFully(\"  \", new char[0]));\n+        \n+        char[] chars = new char[] { '-', '+', ' ', '@' };\n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\", chars) );\n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\", chars) );\n+        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"i-am here+123\", chars) );\n+        assertEquals(\"I Am+Here-123\", WordUtils.capitalizeFully(\"I Am+Here-123\", chars) );\n+        assertEquals(\"I+Am-Here 123\", WordUtils.capitalizeFully(\"i+am-HERE 123\", chars) );\n+        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"I-AM HERE+123\", chars) );\n+    }\n+\n     public void testUncapitalize_String() {\n         assertEquals(null, WordUtils.uncapitalize(null));\n         assertEquals(\"\", WordUtils.uncapitalize(\"\"));", "timestamp": 1086234028, "metainfo": ""}