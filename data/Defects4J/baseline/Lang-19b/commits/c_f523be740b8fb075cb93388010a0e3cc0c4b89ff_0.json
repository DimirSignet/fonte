{"sha": "f523be740b8fb075cb93388010a0e3cc0c4b89ff", "log": "AnnotationUtils  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+\n+/**\n+ * Helper methods for working with {@link Annotation}s.\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class AnnotationUtils {\n+\n+    /**\n+     * <p><code>AnnotationUtils</code> instances should NOT be constructed in\n+     * standard programming. Instead, the class should be used statically.</p>\n+     * \n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n+     */\n+    public AnnotationUtils() {\n+    }\n+\n+    /**\n+     * Learn whether two annotations are equivalent as defined by\n+     * {@link Annotation#equals(Object)}. This method is useful because\n+     * dynamically created {@link Annotation} instances are always proxy\n+     * objects, which, though dependent upon implementation, very often cannot\n+     * be depended upon to behave \"normally\" in terms of {@link #equals(Object)}\n+     * implementation.\n+     * @param a1 the first Annotation to compare\n+     * @param a2 the second Annotation to compare\n+     */\n+    public static boolean equals(Annotation a1, Annotation a2) {\n+        if (a1 == a2) {\n+            return true;\n+        }\n+        if (a1 == null || a2 == null) {\n+            return false;\n+        }\n+        Class<? extends Annotation> type = a1.annotationType();\n+        Class<? extends Annotation> type2 = a2.annotationType();\n+        Validate.notNull(type, \"Annotation %s with null annotationType()\", a1);\n+        Validate.notNull(type2, \"Annotation %s with null annotationType()\", a2);\n+        if (!type.equals(type2)) {\n+            return false;\n+        }\n+        try {\n+            for (Method m : type.getDeclaredMethods()) {\n+                if (m.getParameterTypes().length == 0\n+                        && isValidAnnotationMemberType(m.getReturnType())) {\n+                    Object v1 = m.invoke(a1);\n+                    Object v2 = m.invoke(a2);\n+                    if (!memberEquals(m.getReturnType(), v1, v2)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Learn whether the specified type is permitted as an annotation member.\n+     * These include {@link String}, {@link Class}, primitive types,\n+     * {@link Annotation}s, {@link Enum}s, and arrays of same.\n+     * @param type to check\n+     * @return boolean\n+     */\n+    public static boolean isValidAnnotationMemberType(Class<?> type) {\n+        if (type == null) {\n+            return false;\n+        }\n+        if (type.isArray()) {\n+            type = type.getComponentType();\n+        }\n+        return type.isPrimitive() || type.isEnum() || type.isAnnotation()\n+                || String.class.equals(type) || Class.class.equals(type);\n+    }\n+\n+    private static boolean memberEquals(Class<?> type, Object o1, Object o2) {\n+        if (o1 == o2) {\n+            return true;\n+        }\n+        if (o1 == null || o2 == null) {\n+            return false;\n+        }\n+        if (type.isArray()) {\n+            return arrayMemberEquals(type.getComponentType(), o1, o2);\n+        }\n+        if (type.isAnnotation()) {\n+            return equals((Annotation) o1, (Annotation) o2);\n+        }\n+        return o1.equals(o2);\n+    }\n+\n+    private static boolean arrayMemberEquals(Class<?> componentType, Object o1, Object o2) {\n+        if (componentType.isAnnotation()) {\n+            return annotationArrayMemberEquals((Annotation[]) o1, (Annotation[]) o2);\n+        }\n+        if (componentType.equals(Byte.TYPE)) {\n+            return Arrays.equals((byte[]) o1, (byte[]) o2);\n+        }\n+        if (componentType.equals(Short.TYPE)) {\n+            return Arrays.equals((short[]) o1, (short[]) o2);\n+        }\n+        if (componentType.equals(Integer.TYPE)) {\n+            return Arrays.equals((int[]) o1, (int[]) o2);\n+        }\n+        if (componentType.equals(Character.TYPE)) {\n+            return Arrays.equals((char[]) o1, (char[]) o2);\n+        }\n+        if (componentType.equals(Long.TYPE)) {\n+            return Arrays.equals((long[]) o1, (long[]) o2);\n+        }\n+        if (componentType.equals(Float.TYPE)) {\n+            return Arrays.equals((float[]) o1, (float[]) o2);\n+        }\n+        if (componentType.equals(Double.TYPE)) {\n+            return Arrays.equals((double[]) o1, (double[]) o2);\n+        }\n+        if (componentType.equals(Boolean.TYPE)) {\n+            return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n+        }\n+        return Arrays.equals((Object[]) o1, (Object[]) o2);\n+    }\n+\n+    private static boolean annotationArrayMemberEquals(Annotation[] a1, Annotation[] a2) {\n+        if (a1.length != a2.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < a1.length; i++) {\n+            if (!equals(a1[i], a2[i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.*;\n+import static org.junit.Assert.*;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * @version $Id$\n+ */\n+public class AnnotationUtilsTest {\n+    @TestAnnotation(\n+            booleanValue = false,\n+            booleanValues = { false },\n+            byteValue = 0,\n+            byteValues = { 0 },\n+            charValue = 0,\n+            charValues = { 0 },\n+            doubleValue = 0,\n+            doubleValues = { 0 },\n+            floatValue = 0,\n+            floatValues = { 0 },\n+            intValue = 0,\n+            intValues = { 0 },\n+            longValue = 0,\n+            longValues = { 0 },\n+            nest = @NestAnnotation(\n+                    booleanValue = false,\n+                    booleanValues = { false },\n+                    byteValue = 0,\n+                    byteValues = { 0 },\n+                    charValue = 0,\n+                    charValues = { 0 },\n+                    doubleValue = 0,\n+                    doubleValues = { 0 },\n+                    floatValue = 0,\n+                    floatValues = { 0 },\n+                    intValue = 0,\n+                    intValues = { 0 },\n+                    longValue = 0,\n+                    longValues = { 0 },\n+                    shortValue = 0,\n+                    shortValues = { 0 },\n+                    stooge = CURLY,\n+                    stooges = { MOE, LARRY, SHEMP },\n+                    string = \"\",\n+                    strings = { \"\" },\n+                    type = Object.class,\n+                    types = { Object.class }\n+            ),\n+            nests = {\n+                @NestAnnotation(\n+                        booleanValue = false,\n+                        booleanValues = { false },\n+                        byteValue = 0,\n+                        byteValues = { 0 },\n+                        charValue = 0,\n+                        charValues = { 0 },\n+                        doubleValue = 0,\n+                        doubleValues = { 0 },\n+                        floatValue = 0,\n+                        floatValues = { 0 },\n+                        intValue = 0,\n+                        intValues = { 0 },\n+                        longValue = 0,\n+                        longValues = { 0 },\n+                        shortValue = 0,\n+                        shortValues = { 0 },\n+                        stooge = CURLY,\n+                        stooges = { MOE, LARRY, SHEMP },\n+                        string = \"\",\n+                        strings = { \"\" },\n+                        type = Object[].class,\n+                        types = { Object[].class }\n+                )\n+            },\n+            shortValue = 0,\n+            shortValues = { 0 },\n+            stooge = SHEMP,\n+            stooges = { MOE, LARRY, CURLY },\n+            string = \"\",\n+            strings = { \"\" },\n+            type = Object.class,\n+            types = { Object.class }\n+    )\n+    public Object dummy1;\n+\n+    @TestAnnotation(\n+            booleanValue = false,\n+            booleanValues = { false },\n+            byteValue = 0,\n+            byteValues = { 0 },\n+            charValue = 0,\n+            charValues = { 0 },\n+            doubleValue = 0,\n+            doubleValues = { 0 },\n+            floatValue = 0,\n+            floatValues = { 0 },\n+            intValue = 0,\n+            intValues = { 0 },\n+            longValue = 0,\n+            longValues = { 0 },\n+            nest = @NestAnnotation(\n+                    booleanValue = false,\n+                    booleanValues = { false },\n+                    byteValue = 0,\n+                    byteValues = { 0 },\n+                    charValue = 0,\n+                    charValues = { 0 },\n+                    doubleValue = 0,\n+                    doubleValues = { 0 },\n+                    floatValue = 0,\n+                    floatValues = { 0 },\n+                    intValue = 0,\n+                    intValues = { 0 },\n+                    longValue = 0,\n+                    longValues = { 0 },\n+                    shortValue = 0,\n+                    shortValues = { 0 },\n+                    stooge = CURLY,\n+                    stooges = { MOE, LARRY, SHEMP },\n+                    string = \"\",\n+                    strings = { \"\" },\n+                    type = Object.class,\n+                    types = { Object.class }\n+            ),\n+            nests = {\n+                @NestAnnotation(\n+                        booleanValue = false,\n+                        booleanValues = { false },\n+                        byteValue = 0,\n+                        byteValues = { 0 },\n+                        charValue = 0,\n+                        charValues = { 0 },\n+                        doubleValue = 0,\n+                        doubleValues = { 0 },\n+                        floatValue = 0,\n+                        floatValues = { 0 },\n+                        intValue = 0,\n+                        intValues = { 0 },\n+                        longValue = 0,\n+                        longValues = { 0 },\n+                        shortValue = 0,\n+                        shortValues = { 0 },\n+                        stooge = CURLY,\n+                        stooges = { MOE, LARRY, SHEMP },\n+                        string = \"\",\n+                        strings = { \"\" },\n+                        type = Object[].class,\n+                        types = { Object[].class }\n+                )\n+            },\n+            shortValue = 0,\n+            shortValues = { 0 },\n+            stooge = SHEMP,\n+            stooges = { MOE, LARRY, CURLY },\n+            string = \"\",\n+            strings = { \"\" },\n+            type = Object.class,\n+            types = { Object.class }\n+    )\n+    public Object dummy2;\n+\n+    @TestAnnotation(\n+            booleanValue = false,\n+            booleanValues = { false },\n+            byteValue = 0,\n+            byteValues = { 0 },\n+            charValue = 0,\n+            charValues = { 0 },\n+            doubleValue = 0,\n+            doubleValues = { 0 },\n+            floatValue = 0,\n+            floatValues = { 0 },\n+            intValue = 0,\n+            intValues = { 0 },\n+            longValue = 0,\n+            longValues = { 0 },\n+            nest = @NestAnnotation(\n+                    booleanValue = false,\n+                    booleanValues = { false },\n+                    byteValue = 0,\n+                    byteValues = { 0 },\n+                    charValue = 0,\n+                    charValues = { 0 },\n+                    doubleValue = 0,\n+                    doubleValues = { 0 },\n+                    floatValue = 0,\n+                    floatValues = { 0 },\n+                    intValue = 0,\n+                    intValues = { 0 },\n+                    longValue = 0,\n+                    longValues = { 0 },\n+                    shortValue = 0,\n+                    shortValues = { 0 },\n+                    stooge = CURLY,\n+                    stooges = { MOE, LARRY, SHEMP },\n+                    string = \"\",\n+                    strings = { \"\" },\n+                    type = Object.class,\n+                    types = { Object.class }\n+            ),\n+            nests = {\n+                @NestAnnotation(\n+                        booleanValue = false,\n+                        booleanValues = { false },\n+                        byteValue = 0,\n+                        byteValues = { 0 },\n+                        charValue = 0,\n+                        charValues = { 0 },\n+                        doubleValue = 0,\n+                        doubleValues = { 0 },\n+                        floatValue = 0,\n+                        floatValues = { 0 },\n+                        intValue = 0,\n+                        intValues = { 0 },\n+                        longValue = 0,\n+                        longValues = { 0 },\n+                        shortValue = 0,\n+                        shortValues = { 0 },\n+                        stooge = CURLY,\n+                        stooges = { MOE, LARRY, SHEMP },\n+                        string = \"\",\n+                        strings = { \"\" },\n+                        type = Object[].class,\n+                        types = { Object[].class }\n+                ),\n+                //add a second NestAnnotation to break equality:\n+                @NestAnnotation(\n+                        booleanValue = false,\n+                        booleanValues = { false },\n+                        byteValue = 0,\n+                        byteValues = { 0 },\n+                        charValue = 0,\n+                        charValues = { 0 },\n+                        doubleValue = 0,\n+                        doubleValues = { 0 },\n+                        floatValue = 0,\n+                        floatValues = { 0 },\n+                        intValue = 0,\n+                        intValues = { 0 },\n+                        longValue = 0,\n+                        longValues = { 0 },\n+                        shortValue = 0,\n+                        shortValues = { 0 },\n+                        stooge = CURLY,\n+                        stooges = { MOE, LARRY, SHEMP },\n+                        string = \"\",\n+                        strings = { \"\" },\n+                        type = Object[].class,\n+                        types = { Object[].class }\n+                )\n+            },\n+            shortValue = 0,\n+            shortValues = { 0 },\n+            stooge = SHEMP,\n+            stooges = { MOE, LARRY, CURLY },\n+            string = \"\",\n+            strings = { \"\" },\n+            type = Object.class,\n+            types = { Object.class }\n+    )\n+    public Object dummy3;\n+\n+    @NestAnnotation(\n+            booleanValue = false,\n+            booleanValues = { false },\n+            byteValue = 0,\n+            byteValues = { 0 },\n+            charValue = 0,\n+            charValues = { 0 },\n+            doubleValue = 0,\n+            doubleValues = { 0 },\n+            floatValue = 0,\n+            floatValues = { 0 },\n+            intValue = 0,\n+            intValues = { 0 },\n+            longValue = 0,\n+            longValues = { 0 },\n+            shortValue = 0,\n+            shortValues = { 0 },\n+            stooge = CURLY,\n+            stooges = { MOE, LARRY, SHEMP },\n+            string = \"\",\n+            strings = { \"\" },\n+            type = Object[].class,\n+            types = { Object[].class }\n+    )\n+\n+    public Object dummy4;\n+\n+    @Target(FIELD)\n+    @Retention(RUNTIME)\n+    public @interface TestAnnotation {\n+        String string();\n+        String[] strings();\n+        Class<?> type();\n+        Class<?>[] types();\n+        byte byteValue();\n+        byte[] byteValues();\n+        short shortValue();\n+        short[] shortValues();\n+        int intValue();\n+        int[] intValues();\n+        char charValue();\n+        char[] charValues();\n+        long longValue();\n+        long[] longValues();\n+        float floatValue();\n+        float[] floatValues();\n+        double doubleValue();\n+        double[] doubleValues();\n+        boolean booleanValue();\n+        boolean[] booleanValues();\n+        Stooge stooge();\n+        Stooge[] stooges();\n+        NestAnnotation nest();\n+        NestAnnotation[] nests();\n+    }\n+\n+    public @interface NestAnnotation {\n+        String string();\n+        String[] strings();\n+        Class<?> type();\n+        Class<?>[] types();\n+        byte byteValue();\n+        byte[] byteValues();\n+        short shortValue();\n+        short[] shortValues();\n+        int intValue();\n+        int[] intValues();\n+        char charValue();\n+        char[] charValues();\n+        long longValue();\n+        long[] longValues();\n+        float floatValue();\n+        float[] floatValues();\n+        double doubleValue();\n+        double[] doubleValues();\n+        boolean booleanValue();\n+        boolean[] booleanValues();\n+        Stooge stooge();\n+        Stooge[] stooges();\n+    }\n+\n+    public static enum Stooge {\n+        MOE, LARRY, CURLY, JOE, SHEMP;\n+    }\n+\n+    private Field field1;\n+    private Field field2;\n+    private Field field3;\n+    private Field field4;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        field1 = getClass().getDeclaredField(\"dummy1\");\n+        field2 = getClass().getDeclaredField(\"dummy2\");\n+        field3 = getClass().getDeclaredField(\"dummy3\");\n+        field4 = getClass().getDeclaredField(\"dummy4\");\n+    }\n+\n+    @Test\n+    public void testEquivalence() {\n+        assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class)));\n+    }\n+\n+    @Test\n+    public void testSameInstance() {\n+        assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));\n+    }\n+\n+    @Test\n+    public void testNonEquivalentAnnotationsOfSameType() {\n+        assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class)));\n+    }\n+\n+    @Test\n+    public void testAnnotationsOfDifferingTypes() {\n+        assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field4.getAnnotation(NestAnnotation.class)));\n+    }\n+\n+    @Test\n+    public void testOneArgNull() {\n+        assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null));\n+    }\n+\n+    @Test\n+    public void testBothArgsNull() {\n+        assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null));\n+    }\n+\n+    @Test\n+    public void testIsValidAnnotationMemberType() {\n+        for (Class<?> type : new Class[] { byte.class, short.class, int.class, char.class,\n+                long.class, float.class, double.class, boolean.class, String.class, Class.class,\n+                NestAnnotation.class, TestAnnotation.class, Stooge.class, ElementType.class }) {\n+            assertTrue(AnnotationUtils.isValidAnnotationMemberType(type));\n+            assertTrue(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0)\n+                    .getClass()));\n+        }\n+    }\n+}", "timestamp": 1284413882, "metainfo": ""}