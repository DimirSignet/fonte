{"sha": "329cb3529ce31ec145fb47348a85e3dd3aeb3805", "log": "Rename getRightElement() to getRight(). Rename getLeftElement() to getLeft().  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ImmutablePair.java\n+++ b/src/main/java/org/apache/commons/lang3/ImmutablePair.java\n      * {@inheritDoc}\n      */\n     @Override\n-    public L getLeftElement() {\n+    public L getLeft() {\n         return left;\n     }\n \n      * {@inheritDoc}\n      */\n     @Override\n-    public R getRightElement() {\n+    public R getRight() {\n         return right;\n     }\n \n--- a/src/main/java/org/apache/commons/lang3/MutablePair.java\n+++ b/src/main/java/org/apache/commons/lang3/MutablePair.java\n      * {@inheritDoc}\n      */\n     @Override\n-    public L getLeftElement() {\n+    public L getLeft() {\n         return left;\n     }\n \n      * {@inheritDoc}\n      */\n     @Override\n-    public R getRightElement() {\n+    public R getRight() {\n         return right;\n     }\n \n      * @return the old value for the right element\n      */\n     public R setValue(R value) {\n-        R result = getRightElement();\n+        R result = getRight();\n         setRightElement(value);\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/lang3/Pair.java\n+++ b/src/main/java/org/apache/commons/lang3/Pair.java\n      * \n      * @return the left element, may be null\n      */\n-    public abstract L getLeftElement();\n+    public abstract L getLeft();\n \n     /**\n      * <p>Gets the right element from this pair.</p>\n      * \n      * @return the right element, may be null\n      */\n-    public abstract R getRightElement();\n+    public abstract R getRight();\n \n     /**\n      * <p>Gets the key from this pair.</p>\n      * @return the left element as the key, may be null\n      */\n     public final L getKey() {\n-        return getLeftElement();\n+        return getLeft();\n     }\n \n     /**\n      * @return the right element as the value, may be null\n      */\n     public R getValue() {\n-        return getRightElement();\n+        return getRight();\n     }\n \n     //-----------------------------------------------------------------------\n      * @return negative if this is less, zero if equal, positive if greater\n      */\n     public int compareTo(Pair<L, R> other) {\n-      return new CompareToBuilder().append(getLeftElement(), other.getLeftElement())\n-              .append(getRightElement(), other.getRightElement()).toComparison();\n+      return new CompareToBuilder().append(getLeft(), other.getLeft())\n+              .append(getRight(), other.getRight()).toComparison();\n     }\n \n     /**\n      * @return a string for this object\n      */\n     public String toString(String format) {\n-        return String.format(format, getClass().getSimpleName(), getLeftElement(), getRightElement());\n+        return String.format(format, getClass().getSimpleName(), getLeft(), getRight());\n     }\n }\n--- a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n     static boolean isRegistered(Object lhs, Object rhs) {\n         Set<Pair<IDKey, IDKey>> registry = getRegistry();\n         Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);\n-        Pair<IDKey, IDKey> swappedPair = Pair.of(pair.getLeftElement(), pair.getRightElement());\n+        Pair<IDKey, IDKey> swappedPair = Pair.of(pair.getLeft(), pair.getRight());\n \n         return registry != null\n                 && (registry.contains(pair) || registry.contains(swappedPair));\n--- a/src/test/java/org/apache/commons/lang3/ImmutablePairTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ImmutablePairTest.java\n     public void testBasic() throws Exception {\n         ImmutablePair<Integer, String> pair = new ImmutablePair<Integer, String>(0, \"foo\");\n         assertEquals(0, pair.left.intValue());\n-        assertEquals(0, pair.getLeftElement().intValue());\n+        assertEquals(0, pair.getLeft().intValue());\n         assertEquals(\"foo\", pair.right);\n-        assertEquals(\"foo\", pair.getRightElement());\n+        assertEquals(\"foo\", pair.getRight());\n         ImmutablePair<Object, String> pair2 = new ImmutablePair<Object, String>(null, \"bar\");\n         assertNull(pair2.left);\n-        assertNull(pair2.getLeftElement());\n+        assertNull(pair2.getLeft());\n         assertEquals(\"bar\", pair2.right);\n-        assertEquals(\"bar\", pair2.getRightElement());\n+        assertEquals(\"bar\", pair2.getRight());\n     }\n \n     @Test\n     public void testPairOf() throws Exception {\n         ImmutablePair<Integer, String> pair = ImmutablePair.of(0, \"foo\");\n         assertEquals(0, pair.left.intValue());\n-        assertEquals(0, pair.getLeftElement().intValue());\n+        assertEquals(0, pair.getLeft().intValue());\n         assertEquals(\"foo\", pair.right);\n-        assertEquals(\"foo\", pair.getRightElement());\n+        assertEquals(\"foo\", pair.getRight());\n         ImmutablePair<Object, String> pair2 = ImmutablePair.of(null, \"bar\");\n         assertNull(pair2.left);\n-        assertNull(pair2.getLeftElement());\n+        assertNull(pair2.getLeft());\n         assertEquals(\"bar\", pair2.right);\n-        assertEquals(\"bar\", pair2.getRightElement());\n+        assertEquals(\"bar\", pair2.getRight());\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/MutablePairTest.java\n+++ b/src/test/java/org/apache/commons/lang3/MutablePairTest.java\n     @Test\n     public void testBasic() throws Exception {\n         MutablePair<Integer, String> pair = new MutablePair<Integer, String>(0, \"foo\");\n-        assertEquals(0, pair.getLeftElement().intValue());\n-        assertEquals(\"foo\", pair.getRightElement());\n+        assertEquals(0, pair.getLeft().intValue());\n+        assertEquals(\"foo\", pair.getRight());\n         MutablePair<Object, String> pair2 = new MutablePair<Object, String>(null, \"bar\");\n-        assertNull(pair2.getLeftElement());\n-        assertEquals(\"bar\", pair2.getRightElement());\n+        assertNull(pair2.getLeft());\n+        assertEquals(\"bar\", pair2.getRight());\n     }\n \n     @Test\n     public void testDefault() throws Exception {\n         MutablePair<Integer, String> pair = new MutablePair<Integer, String>();\n-        assertNull(pair.getLeftElement());\n-        assertNull(pair.getRightElement());\n+        assertNull(pair.getLeft());\n+        assertNull(pair.getRight());\n     }\n     \n     @Test\n         MutablePair<Integer, String> pair = new MutablePair<Integer, String>(0, \"foo\");\n         pair.setLeftElement(42);\n         pair.setRightElement(\"bar\");\n-        assertEquals(42, pair.getLeftElement().intValue());\n-        assertEquals(\"bar\", pair.getRightElement());\n+        assertEquals(42, pair.getLeft().intValue());\n+        assertEquals(\"bar\", pair.getRight());\n     }\n \n     @Test\n     public void testPairOf() throws Exception {\n         MutablePair<Integer, String> pair = MutablePair.of(0, \"foo\");\n-        assertEquals(0, pair.getLeftElement().intValue());\n-        assertEquals(\"foo\", pair.getRightElement());\n+        assertEquals(0, pair.getLeft().intValue());\n+        assertEquals(\"foo\", pair.getRight());\n         MutablePair<Object, String> pair2 = MutablePair.of(null, \"bar\");\n-        assertNull(pair2.getLeftElement());\n-        assertEquals(\"bar\", pair2.getRightElement());\n+        assertNull(pair2.getLeft());\n+        assertEquals(\"bar\", pair2.getRight());\n     }\n \n     @Test", "timestamp": 1302561575, "metainfo": ""}