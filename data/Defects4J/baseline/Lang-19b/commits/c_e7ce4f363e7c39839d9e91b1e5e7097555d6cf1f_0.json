{"sha": "e7ce4f363e7c39839d9e91b1e5e7097555d6cf1f", "log": "Switched test class to jUnit 4 style.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java\n  */\n package org.apache.commons.lang3.concurrent;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.fail;\n+\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Test class for {@link ConcurrentUtils}.\n  *\n  * @version $Id$\n  */\n-public class ConcurrentUtilsTest extends TestCase {\n+public class ConcurrentUtilsTest {\n     /**\n      * Tests creating a ConcurrentException with a runtime exception as cause.\n      */\n+    @Test(expected = IllegalArgumentException.class)\n     public void testConcurrentExceptionCauseUnchecked() {\n-        try {\n-            new ConcurrentException(new RuntimeException());\n-            fail(\"Could create ConcurrentException with unchecked cause!\");\n-        } catch (IllegalArgumentException iex) {\n-            // ok\n-        }\n+        new ConcurrentException(new RuntimeException());\n     }\n \n     /**\n      * Tests creating a ConcurrentException with an error as cause.\n      */\n+    @Test(expected = IllegalArgumentException.class)\n     public void testConcurrentExceptionCauseError() {\n-        try {\n-            new ConcurrentException(\"An error\", new Error());\n-            fail(\"Could create ConcurrentException with an error cause!\");\n-        } catch (IllegalArgumentException iex) {\n-            // ok\n-        }\n+        new ConcurrentException(\"An error\", new Error());\n     }\n \n     /**\n      * Tests creating a ConcurrentException with null as cause.\n      */\n+    @Test(expected = IllegalArgumentException.class)\n     public void testConcurrentExceptionCauseNull() {\n-        try {\n-            new ConcurrentException(null);\n-            fail(\"Could create ConcurrentException with null cause!\");\n-        } catch (IllegalArgumentException iex) {\n-            // ok\n-        }\n+        new ConcurrentException(null);\n     }\n \n     /**\n      * Tests extractCause() for a null exception.\n      */\n+    @Test\n     public void testExtractCauseNull() {\n         assertNull(\"Non null result\", ConcurrentUtils.extractCause(null));\n     }\n     /**\n      * Tests extractCause() if the cause of the passed in exception is null.\n      */\n+    @Test\n     public void testExtractCauseNullCause() {\n         assertNull(\"Non null result\", ConcurrentUtils\n                 .extractCause(new ExecutionException(\"Test\", null)));\n     /**\n      * Tests extractCause() if the cause is an error.\n      */\n+    @Test\n     public void testExtractCauseError() {\n         Error err = new AssertionError(\"Test\");\n         try {\n     /**\n      * Tests extractCause() if the cause is an unchecked exception.\n      */\n+    @Test\n     public void testExtractCauseUnchecked() {\n         RuntimeException rex = new RuntimeException(\"Test\");\n         try {\n     /**\n      * Tests extractCause() if the cause is a checked exception.\n      */\n+    @Test\n     public void testExtractCauseChecked() {\n         Exception ex = new Exception(\"Test\");\n         ConcurrentException cex = ConcurrentUtils\n     /**\n      * Tests handleCause() if the cause is an error.\n      */\n+    @Test\n     public void testHandleCauseError() throws ConcurrentException {\n         Error err = new AssertionError(\"Test\");\n         try {\n     /**\n      * Tests handleCause() if the cause is an unchecked exception.\n      */\n+    @Test\n     public void testHandleCauseUnchecked() throws ConcurrentException {\n         RuntimeException rex = new RuntimeException(\"Test\");\n         try {\n     /**\n      * Tests handleCause() if the cause is a checked exception.\n      */\n+    @Test\n     public void testHandleCauseChecked() {\n         Exception ex = new Exception(\"Test\");\n         try {\n      * the method should do nothing. We can only test that no exception is\n      * thrown.\n      */\n+    @Test\n     public void testHandleCauseNull() throws ConcurrentException {\n         ConcurrentUtils.handleCause(null);\n         ConcurrentUtils.handleCause(new ExecutionException(\"Test\", null));\n     /**\n      * Tests constant future.\n      */\n+    @Test\n     public void testConstantFuture_Integer() throws Exception {\n         Integer value = new Integer(5);\n         Future<Integer> test = ConcurrentUtils.constantFuture(value);\n     /**\n      * Tests constant future.\n      */\n+    @Test\n     public void testConstantFuture_null() throws Exception {\n         Integer value = null;\n         Future<Integer> test = ConcurrentUtils.constantFuture(value);", "timestamp": 1269032886, "metainfo": ""}