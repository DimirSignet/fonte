{"sha": "c1fe5a965498410d3f62d4046cf0c58ecabeac9a", "log": "Fix null handling behaviour on char[] methods  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n \n     /**\n      * Appends a char array to the string builder.\n-     * Appending null has no effect.\n-     * <p>\n-     * Note: This method treats a null char array as an empty char array,\n-     * unlike StringBuffer or String.\n+     * Appending null will call {@link #appendNull()}.\n      *\n      * @param chars  the char array to append\n      * @return this, to enable chaining\n      */\n     public StrBuilder append(char[] chars) {\n         if (chars == null) {\n-            return this;\n+            return appendNull();\n         }\n         int strLen = chars.length;\n         if (strLen > 0) {\n \n     /**\n      * Appends a char array to the string builder.\n-     * Appending null has no effect.\n-     * <p>\n-     * Note: This method treats a null char array as an empty char array,\n-     * unlike StringBuffer or String.\n+     * Appending null will call {@link #appendNull()}.\n      *\n      * @param chars  the char array to append\n      * @param startIndex  the start index, inclusive, must be valid\n      */\n     public StrBuilder append(char[] chars, int startIndex, int length) {\n         if (chars == null) {\n-            return this;\n+            return appendNull();\n         }\n         if (startIndex < 0 || startIndex > chars.length) {\n             throw new StringIndexOutOfBoundsException(\"Invalid startIndex: \" + length);\n \n     /**\n      * Inserts the character array into this builder.\n-     * Inserting null has no effect.\n-     * <p>\n-     * Note: This method treats a null char array as an empty char array,\n-     * unlike StringBuffer or String.\n+     * Inserting null will use the stored null text value.\n      *\n      * @param index  the index to add at, must be valid\n      * @param chars  the char array to insert\n     public StrBuilder insert(int index, char chars[]) {\n         validateIndex(index);\n         if (chars == null) {\n-            return this;\n+            return insert(index, nullText);\n         }\n         int len = chars.length;\n         if (len > 0) {\n \n     /**\n      * Inserts part of the character array into this builder.\n-     * Inserting null has no effect.\n-     * <p>\n-     * Note: This method treats a null char array as an empty char array,\n-     * unlike StringBuffer or String.\n+     * Inserting null will use the stored null text value.\n      *\n      * @param index  the index to add at, must be valid\n      * @param chars  the char array to insert\n     public StrBuilder insert(int index, char chars[], int offset, int length) {\n         validateIndex(index);\n         if (chars == null) {\n-            return this;\n+            return insert(index, nullText);\n         }\n         if (offset < 0 || offset > chars.length) {\n             throw new StringIndexOutOfBoundsException(\"Invalid offset: \" + offset);\n--- a/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n     //-----------------------------------------------------------------------\n     public void testAppend_String() {\n         StrBuilder sb = new StrBuilder();\n-\n+        sb.setNullText(\"NULL\").append((String) null);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n         sb.append(\"foo\");\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((String) null);\n         assertEquals(\"foo\", sb.toString());\n \n         sb.append(\"\");\n     //-----------------------------------------------------------------------\n     public void testAppend_String_int_int() {\n         StrBuilder sb = new StrBuilder();\n-        \n+        sb.setNullText(\"NULL\").append((String) null, 0, 1);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n         sb.append(\"foo\", 0, 3);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((String) null, 0, 1);\n         assertEquals(\"foo\", sb.toString());\n \n         try {\n     //-----------------------------------------------------------------------\n     public void testAppend_StringBuffer() {\n         StrBuilder sb = new StrBuilder();\n-\n+        sb.setNullText(\"NULL\").append((StringBuffer) null);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n         sb.append(new StringBuffer(\"foo\"));\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((StringBuffer) null);\n         assertEquals(\"foo\", sb.toString());\n \n         sb.append(new StringBuffer(\"\"));\n     //-----------------------------------------------------------------------\n     public void testAppend_StringBuffer_int_int() {\n         StrBuilder sb = new StrBuilder();\n-        \n+        sb.setNullText(\"NULL\").append((StringBuffer) null, 0, 1);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n         sb.append(new StringBuffer(\"foo\"), 0, 3);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((StringBuffer) null, 0, 1);\n         assertEquals(\"foo\", sb.toString());\n \n         try {\n     //-----------------------------------------------------------------------\n     public void testAppend_StrBuilder() {\n         StrBuilder sb = new StrBuilder();\n-\n+        sb.setNullText(\"NULL\").append((StrBuilder) null);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n         sb.append(new StrBuilder(\"foo\"));\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((StrBuilder) null);\n         assertEquals(\"foo\", sb.toString());\n \n         sb.append(new StrBuilder(\"\"));\n     //-----------------------------------------------------------------------\n     public void testAppend_StrBuilder_int_int() {\n         StrBuilder sb = new StrBuilder();\n-        \n+        sb.setNullText(\"NULL\").append((StrBuilder) null, 0, 1);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n         sb.append(new StrBuilder(\"foo\"), 0, 3);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((StrBuilder) null, 0, 1);\n         assertEquals(\"foo\", sb.toString());\n \n         try {\n     //-----------------------------------------------------------------------\n     public void testAppend_CharArray() {\n         StrBuilder sb = new StrBuilder();\n-        \n-        sb.append((char[]) null);\n-        assertEquals(\"\", sb.toString());\n-\n+        sb.setNullText(\"NULL\").append((char[]) null);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n         sb.append(new char[0]);\n         assertEquals(\"\", sb.toString());\n \n     //-----------------------------------------------------------------------\n     public void testAppend_CharArray_int_int() {\n         StrBuilder sb = new StrBuilder();\n-        \n+        sb.setNullText(\"NULL\").append((char[]) null, 0, 1);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n         sb.append(new char[]{'f', 'o', 'o'}, 0, 3);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((char[]) null, 0, 1);\n         assertEquals(\"foo\", sb.toString());\n \n         try {\n \n         sb.insert(0, \"foo\");\n         assertEquals(\"foonullbarbaz\", sb.toString());\n+\n+        sb.insert(0, (char[]) null);\n+        assertEquals(\"nullfoonullbarbaz\", sb.toString());\n+\n+        sb.insert(0, (char[]) null, 0, 0);\n+        assertEquals(\"nullnullfoonullbarbaz\", sb.toString());\n     }\n \n }", "timestamp": 1124535406, "metainfo": ""}