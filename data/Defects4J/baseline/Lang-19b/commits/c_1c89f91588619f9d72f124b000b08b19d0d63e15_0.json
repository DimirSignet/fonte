{"sha": "1c89f91588619f9d72f124b000b08b19d0d63e15", "log": "Removing commented out code.   ", "commit": "\n--- a/src/java/org/apache/commons/lang3/WordUtils.java\n+++ b/src/java/org/apache/commons/lang3/WordUtils.java\n \n     // Wrapping\n     //--------------------------------------------------------------------------\n-//    /**\n-//     * <p>Wraps a block of text to a specified line length using '\\n' as\n-//     * a newline.</p>\n-//     *\n-//     * <p>This method takes a block of text, which might have long lines in it\n-//     * and wraps the long lines based on the supplied lineLength parameter.</p>\n-//     * \n-//     * <p>If a single word is longer than the line length (eg. a URL), it will\n-//     * not be broken, and will display beyond the expected width.</p>\n-//     * \n-//     * <p>If there are tabs in inString, you are going to get results that are\n-//     * a bit strange. Tabs are a single character but are displayed as 4 or 8\n-//     * spaces. Remove the tabs.</p>\n-//     *\n-//     * @param str  text which is in need of word-wrapping, may be null\n-//     * @param lineLength  the column to wrap the words at\n-//     * @return the text with all the long lines word-wrapped\n-//     *  <code>null</code> if null string input\n-//     */\n-//    public static String wrapText(String str, int lineLength) {\n-//        return wrap(str, null, lineLength);\n-//    }\n-    \n-//    /**\n-//     * <p>Wraps a block of text to a specified line length.</p>\n-//     *\n-//     * <p>This method takes a block of text, which might have long lines in it\n-//     * and wraps the long lines based on the supplied lineLength parameter.</p>\n-//     * \n-//     * <p>If a single word is longer than the wrapColumn (eg. a URL), it will\n-//     * not be broken, and will display beyond the expected width.</p>\n-//     * \n-//     * <p>If there are tabs in inString, you are going to get results that are\n-//     * a bit strange. Tabs are a single character but are displayed as 4 or 8\n-//     * spaces. Remove the tabs.</p>\n-//     *\n-//     * @param str  text which is in need of word-wrapping, may be null\n-//     * @param newLineChars  the characters that define a newline, null treated as \\n\n-//     * @param lineLength  the column to wrap the words at\n-//     * @return the text with all the long lines word-wrapped\n-//     *  <code>null</code> if null string input\n-//     */\n-//    public static String wrapText(String str, String newLineChars, int lineLength) {\n-//        if (str == null) {\n-//            return null;\n-//        }\n-//        if (newLineChars == null) {\n-//            newLineChars = \"\\n\";\n-//        }\n-//        StringTokenizer lineTokenizer = new StringTokenizer(str, newLineChars, true);\n-//        StringBuffer stringBuffer = new StringBuffer();\n-//\n-//        while (lineTokenizer.hasMoreTokens()) {\n-//            try {\n-//                String nextLine = lineTokenizer.nextToken();\n-//\n-//                if (nextLine.length() > lineLength) {\n-//                    // This line is long enough to be wrapped.\n-//                    nextLine = wrapLine(nextLine, null, lineLength, false);\n-//                }\n-//\n-//                stringBuffer.append(nextLine);\n-//\n-//            } catch (NoSuchElementException nsee) {\n-//                // thrown by nextToken(), but I don't know why it would\n-//                break;\n-//            }\n-//        }\n-//\n-//        return stringBuffer.toString();\n-//    }\n-\n-    // Wrapping\n-    //-----------------------------------------------------------------------\n     /**\n      * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>\n      * ", "timestamp": 1261638797, "metainfo": ""}