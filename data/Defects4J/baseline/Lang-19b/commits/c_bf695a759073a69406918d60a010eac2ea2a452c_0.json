{"sha": "bf695a759073a69406918d60a010eac2ea2a452c", "log": "ws  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>This class tries to handle {@code null} input gracefully.\n  * An exception will not be thrown for a {@code null} input.\n  * Each method documents its behaviour in more detail.</p>\n- * \n+ *\n  * <p>#ThreadSafe#</p>\n  * @since 2.0\n  * @version $Id$\n     //--------------------------------------------------------------------------\n     /**\n      * <p>Negates the specified boolean.</p>\n-     * \n+     *\n      * <p>If {@code null} is passed in, {@code null} will be returned.</p>\n      *\n      * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n      *   BooleanUtils.negate(Boolean.FALSE) = Boolean.TRUE;\n      *   BooleanUtils.negate(null)          = null;\n      * </pre>\n-     * \n+     *\n      * @param bool  the Boolean to negate, may be null\n      * @return the negated Boolean, or {@code null} if {@code null} input\n      */\n         }\n         return bool.booleanValue() ? Boolean.FALSE : Boolean.TRUE;\n     }\n-    \n+\n     // boolean Boolean methods\n     //-----------------------------------------------------------------------\n     /**\n     public static boolean toBoolean(Boolean bool) {\n         return bool != null && bool.booleanValue();\n     }\n-    \n+\n     /**\n      * <p>Converts a Boolean to a boolean handling {@code null}.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true\n      *   BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true) = false\n         }\n         return bool.booleanValue();\n     }\n-    \n+\n     // Integer to Boolean methods\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Converts an int to a boolean using the convention that {@code zero}\n      * is {@code false}.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toBoolean(0) = false\n      *   BooleanUtils.toBoolean(1) = true\n     public static boolean toBoolean(int value) {\n         return value != 0;\n     }\n-    \n+\n     /**\n      * <p>Converts an int to a Boolean using the convention that {@code zero}\n      * is {@code false}.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toBoolean(0) = Boolean.FALSE\n      *   BooleanUtils.toBoolean(1) = Boolean.TRUE\n     public static Boolean toBooleanObject(int value) {\n         return value == 0 ? Boolean.FALSE : Boolean.TRUE;\n     }\n-    \n+\n     /**\n      * <p>Converts an Integer to a Boolean using the convention that {@code zero}\n      * is {@code false}.</p>\n-     * \n+     *\n      * <p>{@code null} will be converted to {@code null}.</p>\n      *\n      * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n         }\n         return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;\n     }\n-    \n+\n     /**\n      * <p>Converts an int to a boolean specifying the conversion values.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toBoolean(0, 1, 0) = false\n      *   BooleanUtils.toBoolean(1, 1, 0) = true\n         // no match\n         throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n     }\n-    \n+\n     /**\n      * <p>Converts an Integer to a boolean specifying the conversion values.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false\n      *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true\n         // no match\n         throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n     }\n-    \n+\n     /**\n      * <p>Converts an int to a Boolean specifying the conversion values.</p>\n-     * \n+     *\n      * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n      *\n      * <pre>\n         // no match\n         throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n     }\n-    \n+\n     /**\n      * <p>Converts an Integer to a Boolean specifying the conversion values.</p>\n-     * \n+     *\n      * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n      *\n      * <pre>\n         // no match\n         throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n     }\n-    \n+\n     // Boolean to Integer methods\n     //-----------------------------------------------------------------------\n     /**\n     public static int toInteger(boolean bool) {\n         return bool ? 1 : 0;\n     }\n-    \n+\n     /**\n      * <p>Converts a boolean to an Integer using the convention that\n      * {@code zero} is {@code false}.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toIntegerObject(true)  = new Integer(1)\n      *   BooleanUtils.toIntegerObject(false) = new Integer(0)\n     public static Integer toIntegerObject(boolean bool) {\n         return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n     }\n-    \n+\n     /**\n      * <p>Converts a Boolean to a Integer using the convention that\n      * {@code zero} is {@code false}.</p>\n         }\n         return bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n     }\n-    \n+\n     /**\n      * <p>Converts a boolean to an int specifying the conversion values.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toInteger(true, 1, 0)  = 1\n      *   BooleanUtils.toInteger(false, 1, 0) = 0\n     public static int toInteger(boolean bool, int trueValue, int falseValue) {\n         return bool ? trueValue : falseValue;\n     }\n-    \n+\n     /**\n      * <p>Converts a Boolean to an int specifying the conversion values.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1\n      *   BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0\n         }\n         return bool.booleanValue() ? trueValue : falseValue;\n     }\n-    \n+\n     /**\n      * <p>Converts a boolean to an Integer specifying the conversion values.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toIntegerObject(true, new Integer(1), new Integer(0))  = new Integer(1)\n      *   BooleanUtils.toIntegerObject(false, new Integer(1), new Integer(0)) = new Integer(0)\n     public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {\n         return bool ? trueValue : falseValue;\n     }\n-    \n+\n     /**\n      * <p>Converts a Boolean to an Integer specifying the conversion values.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2))  = new Integer(1)\n      *   BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new Integer(0)\n         }\n         return bool.booleanValue() ? trueValue : falseValue;\n     }\n-    \n+\n     // String to Boolean methods\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Converts a String to a Boolean.</p>\n-     * \n+     *\n      * <p>{@code 'true'}, {@code 'on'} or {@code 'yes'}\n      * (case insensitive) will return {@code true}.\n      * {@code 'false'}, {@code 'off'} or {@code 'no'}\n     public static Boolean toBooleanObject(String str) {\n         // Previously used equalsIgnoreCase, which was fast for interned 'true'.\n         // Non interned 'true' matched 15 times slower.\n-        // \n+        //\n         // Optimisation provides same performance as before for interned 'true'.\n         // Similar performance for null, 'false', and other strings not length 2/3/4.\n         // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.\n             case 2: {\n                 char ch0 = str.charAt(0);\n                 char ch1 = str.charAt(1);\n-                if ((ch0 == 'o' || ch0 == 'O') && \n+                if ((ch0 == 'o' || ch0 == 'O') &&\n                     (ch1 == 'n' || ch1 == 'N') ) {\n                     return Boolean.TRUE;\n                 }\n-                if ((ch0 == 'n' || ch0 == 'N') && \n+                if ((ch0 == 'n' || ch0 == 'N') &&\n                     (ch1 == 'o' || ch1 == 'O') ) {\n                     return Boolean.FALSE;\n                 }\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Converts a String to a boolean (optimised for performance).</p>\n-     * \n+     *\n      * <p>{@code 'true'}, {@code 'on'} or {@code 'yes'}\n      * (case insensitive) will return {@code true}. Otherwise,\n      * {@code false} is returned.</p>\n-     * \n+     *\n      * <p>This method performs 4 times faster (JDK1.4) than\n      * {@code Boolean.valueOf(String)}. However, this method accepts\n      * 'on' and 'yes' as true values.\n     public static boolean toBoolean(String str) {\n         return toBooleanObject(str) == Boolean.TRUE;\n     }\n-    \n+\n     /**\n      * <p>Converts a String to a Boolean throwing an exception if no match found.</p>\n-     * \n+     *\n      * <p>null is returned if there is no match.</p>\n      *\n      * <pre>\n     /**\n      * <p>Converts a Boolean to a String returning {@code 'true'},\n      * {@code 'false'}, or {@code null}.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toStringTrueFalse(Boolean.TRUE)  = \"true\"\n      *   BooleanUtils.toStringTrueFalse(Boolean.FALSE) = \"false\"\n     public static String toStringTrueFalse(Boolean bool) {\n         return toString(bool, \"true\", \"false\", null);\n     }\n-    \n+\n     /**\n      * <p>Converts a Boolean to a String returning {@code 'on'},\n      * {@code 'off'}, or {@code null}.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toStringOnOff(Boolean.TRUE)  = \"on\"\n      *   BooleanUtils.toStringOnOff(Boolean.FALSE) = \"off\"\n     public static String toStringOnOff(Boolean bool) {\n         return toString(bool, \"on\", \"off\", null);\n     }\n-    \n+\n     /**\n      * <p>Converts a Boolean to a String returning {@code 'yes'},\n      * {@code 'no'}, or {@code null}.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toStringYesNo(Boolean.TRUE)  = \"yes\"\n      *   BooleanUtils.toStringYesNo(Boolean.FALSE) = \"no\"\n     public static String toStringYesNo(Boolean bool) {\n         return toString(bool, \"yes\", \"no\", null);\n     }\n-    \n+\n     /**\n      * <p>Converts a Boolean to a String returning one of the input Strings.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toString(Boolean.TRUE, \"true\", \"false\", null)   = \"true\"\n      *   BooleanUtils.toString(Boolean.FALSE, \"true\", \"false\", null)  = \"false\"\n         }\n         return bool.booleanValue() ? trueString : falseString;\n     }\n-    \n+\n     // boolean to String methods\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Converts a boolean to a String returning {@code 'true'}\n      * or {@code 'false'}.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toStringTrueFalse(true)   = \"true\"\n      *   BooleanUtils.toStringTrueFalse(false)  = \"false\"\n     public static String toStringTrueFalse(boolean bool) {\n         return toString(bool, \"true\", \"false\");\n     }\n-    \n+\n     /**\n      * <p>Converts a boolean to a String returning {@code 'on'}\n      * or {@code 'off'}.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toStringOnOff(true)   = \"on\"\n      *   BooleanUtils.toStringOnOff(false)  = \"off\"\n     public static String toStringOnOff(boolean bool) {\n         return toString(bool, \"on\", \"off\");\n     }\n-    \n+\n     /**\n      * <p>Converts a boolean to a String returning {@code 'yes'}\n      * or {@code 'no'}.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toStringYesNo(true)   = \"yes\"\n      *   BooleanUtils.toStringYesNo(false)  = \"no\"\n     public static String toStringYesNo(boolean bool) {\n         return toString(bool, \"yes\", \"no\");\n     }\n-    \n+\n     /**\n      * <p>Converts a boolean to a String returning one of the input Strings.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.toString(true, \"true\", \"false\")   = \"true\"\n      *   BooleanUtils.toString(false, \"true\", \"false\")  = \"false\"\n     public static String toString(boolean bool, String trueString, String falseString) {\n         return bool ? trueString : falseString;\n     }\n-    \n+\n     // xor methods\n     // ----------------------------------------------------------------------\n     /**\n \n     /**\n      * <p>Performs an xor on an array of Booleans.</p>\n-     * \n+     *\n      * <pre>\n      *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE\n      *   BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE", "timestamp": 1302205618, "metainfo": ""}