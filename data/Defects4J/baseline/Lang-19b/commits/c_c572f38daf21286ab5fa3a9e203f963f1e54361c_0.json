{"sha": "c572f38daf21286ab5fa3a9e203f963f1e54361c", "log": "Normalize Javadocs.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n import org.apache.commons.lang.SystemUtils;\n \n /**\n- * <p><code>ExceptionUtils</code> provides utilities for manipulating \n+ * <p>Provides utilities for manipulating and examining \n  * <code>Throwable</code> objects.</p>\n  *\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author Dmitri Plotnikov\n  * @author Stephen Colebourne\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: ExceptionUtils.java,v 1.23 2003/05/14 02:59:13 bayard Exp $\n+ * @version $Id: ExceptionUtils.java,v 1.24 2003/05/31 17:16:11 ggregory Exp $\n  */\n public class ExceptionUtils {\n+    \n     /**\n      * Used when printing stack frames to denote the start of a\n      * wrapped exception.  Package private for accessibility by test\n     }\n \n     /**\n-     * <p>Find a throwable by method name.</p>\n+     * <p>Finds a <code>Throwable</code> by method name.</p>\n      * \n      * @param throwable  the exception to examine\n      * @param methodName  the name of the method to find and invoke\n     }\n \n     /**\n-     * <p>Find a throwable by field name.</p>\n+     * <p>Finds a <code>Throwable</code> by field name.</p>\n      * \n      * @param throwable  the exception to examine\n      * @param fieldName  the name of the attribute to examine\n     }\n \n     /**\n-     * Equivalent to printRootCauseStackTrace(t, System.err)\n+     * Equivalent to <code>printRootCauseStackTrace(t, System.err);</code>\n+     * \n+     * @see #printRootCauseStackTrace(Throwable,PrintWriter)\n      */\n     public static void printRootCauseStackTrace(Throwable t) {\n         printRootCauseStackTrace(t, System.err);\n     }\n \n     /**\n-     * Same as printRootCauseStackTrace(t, stream), except it takes\n+     * Same as {@link #printRootCauseStackTrace(Throwable,java.io.PrintStream)}, except it takes\n      * a PrintWriter as an argument.\n      */\n     public static void printRootCauseStackTrace(Throwable t, PrintWriter writer) {\n \n     /**\n      * Creates a compact stack trace for the root cause of the supplied \n-     * throwable.\n-     *   \n-     * See <code>printRootCauseStackTrace(Throwable t, PrintStream s)</code> \n+     * <code>Throwable</code>.\n      */\n     public static String[] getRootCauseStackTrace(Throwable t) {\n         Throwable throwables[] = getThrowables(t);\n     }\n \n     /**\n-     * Given two stack traces, removes common frames from the cause trace.\n+     * Removes common frames from the cause trace given the two stack traces.\n      * \n      * @param causeFrames   stack trace of a cause throwable\n      * @param wrapperFrames stack trace of a wrapper throwable \n     }\n \n     /**\n-     * Whether an Throwable is considered nested or not.\n+     * Returns whether a <code>Throwable </code> is considered nested or not.\n      *\n      * @param t The <code>Throwable</code>.\n      * @return boolean true/false\n             // ignore\n         }\n     }\n+    \n     /**\n      * Checks if the Throwable class has a <code>getCause</code> method.\n      */", "timestamp": 1054401371, "metainfo": ""}