{"sha": "25bbcbcbc774cf70e185060de2f3237eb8d0d9d6", "log": "Added test for contains method, along with a null fix for contains and improved javadoc - LANG-551  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Range.java\n+++ b/src/java/org/apache/commons/lang/Range.java\n     //--------------------------------------------------------------------\n     \n     /**\n-     * <p>Tests whether the specified <code>Number</code> occurs within\n-     * this range.</p>\n-     * \n-     * <p>The exact comparison implementation varies by subclass. It is\n-     * intended that an <code>int</code> specific subclass will compare using\n-     * <code>int</code> comparison.</p>\n+     * <p>Tests whether the specified element occurs within this range.</p>\n      * \n      * <p><code>null</code> is handled and returns <code>false</code>.</p>\n      *\n-     * @param number  the number to test, may be <code>null</code>\n-     * @return <code>true</code> if the specified number occurs within this range\n+     * @param element  the element to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified element occurs within this range\n      * @throws IllegalArgumentException if the <code>Number</code> cannot be compared\n      */\n-    public boolean contains(T t) {\n-// TODO: Rewrite in terms of !lessThan and !greaterThan?\n-        return (comparator.compare(t, getMinimum()) > -1) && (comparator.compare(t, getMaximum()) < 1);\n+    public boolean contains(T element) {\n+        if(element == null) {\n+            return false;\n+        }\n+        return (comparator.compare(element, getMinimum()) > -1) && (comparator.compare(element, getMaximum()) < 1);\n     }\n \n     public boolean lessThan(T element) {\n             return false;\n         }\n         \n-        return this.comparator.compare(this.getMinimum(), element) < 1;\n+        return this.comparator.compare(getMinimum(), element) < 1;\n     }\n \n     public boolean greaterThan(T element) {\n--- a/src/test/org/apache/commons/lang/RangeTest.java\n+++ b/src/test/org/apache/commons/lang/RangeTest.java\n         assertEquals(20f, floatRange.getMaximum(), 0.00001f);\n         assertEquals(20d, doubleRange.getMaximum(), 0.00001d);\n     }\n+\n+    public void testContains() {\n+        assertFalse(intRange.contains(null));\n+        \n+        assertFalse(intRange.contains(5));\n+        assertTrue(intRange.contains(10));\n+        assertTrue(intRange.contains(15));\n+        assertTrue(intRange.contains(20));\n+        assertFalse(intRange.contains(25));\n+    }\n+\n }", "timestamp": 1257504435, "metainfo": ""}