{"sha": "5b2078f7f2cec091e9cd6a7243a21ce6a15e7ad7", "log": "Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/tuple/Pair.java\n+++ b/src/main/java/org/apache/commons/lang3/tuple/Pair.java\n     /**\n      * <p>Format this {@link Pair}.  Basic format is in the form: (L,R).</p>\n      * \n-     * @param formatter target\n-     * @param flags for output format\n-     * @param width of output\n-     * @param precision of output\n+     * @param formatter  the target formatter to append to, not null\n+     * @param flags  the flags for output format, see {@code Formattable}\n+     * @param width  the width of the output, see {@code Formattable}\n+     * @param precision the precision of the output, see {@code Formattable}\n      */\n     public void formatTo(Formatter formatter, int flags, int width, int precision) {\n         FormattableUtils.append(String.format(DEFAULT_FORMAT_STRING, getLeft(), getRight()),\n     /**\n      * Formats the receiver using the given string.\n      * \n-     * @param format\n-     *            The format string where <code>%1$</code> is the key (left) and <code>%2$</code> is the value (right).\n-     * @return The formatted string\n+     * @param format  the {@code Formattable} format string, where {@code %1$} is\n+     *  the left element (key) and {@code %2$} is the right element (value), not null\n+     * @return the formatted string, not null\n      */\n     public Object toString(String format) {\n         return String.format(format, getLeft(), getRight());", "timestamp": 1304504712, "metainfo": ""}