{"sha": "3f426fd8d470ede3883272a1b80cada0ddf1bb40", "log": "Rolling back r611543 for LANG-393, and removing the special handling of BigDecimal to use compareTo instead of equals because it creates an inequality with HashCodeBuilder [reported in LANG-467 by David Jones]  ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n         }\n         Class<?> lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-            if (lhs instanceof java.math.BigDecimal && rhs instanceof java.math.BigDecimal) {\n-                isEquals = (((java.math.BigDecimal)lhs).compareTo((java.math.BigDecimal)rhs) == 0);\n-            } else {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-            }\n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n             this.setEquals(false);\n--- a/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n         assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());\n     }\n \n-    // https://issues.apache.org/jira/browse/LANG-393\n-    public void testBigDecimal() {\n-        BigDecimal o1 = new BigDecimal(\"2.0\");\n-        BigDecimal o2 = new BigDecimal(\"2.00\");\n-        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n-        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n-    }\n-\n     public void testAccessors() {\n         EqualsBuilder equalsBuilder = new EqualsBuilder();\n         assertTrue(equalsBuilder.isEquals());", "timestamp": 1258193419, "metainfo": ""}