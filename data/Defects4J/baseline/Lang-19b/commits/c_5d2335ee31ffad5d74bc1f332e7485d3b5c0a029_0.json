{"sha": "5d2335ee31ffad5d74bc1f332e7485d3b5c0a029", "log": "Generifying the general Mutable, and the underlying MutableObject. This then allows for typed checking of a MutableBigDecimal for example as per LANG-276  ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/Mutable.java\n+++ b/src/java/org/apache/commons/lang/mutable/Mutable.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public interface Mutable {\n+public interface Mutable<T> {\n \n     /**\n      * Gets the value of this mutable.\n      * \n      * @return the stored value\n      */\n-    Object getValue();\n+    T getValue();\n \n     /**\n      * Sets the value of this mutable.\n      * @throws ClassCastException\n      *             if the type is invalid\n      */\n-    void setValue(Object value);\n+    void setValue(T value);\n \n }\n--- a/src/java/org/apache/commons/lang/mutable/MutableObject.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableObject.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableObject implements Mutable, Serializable {\n+public class MutableObject<T> implements Mutable<T>, Serializable {\n \n     /**\n      * Required for serialization support.\n     private static final long serialVersionUID = 86241875189L;\n \n     /** The mutable value. */\n-    private Object value;\n+    private T value;\n \n     /**\n      * Constructs a new MutableObject with the default value of <code>null</code>.\n      * @param value\n      *            a value.\n      */\n-    public MutableObject(Object value) {\n+    public MutableObject(T value) {\n         super();\n         this.value = value;\n     }\n      * \n      * @return the value\n      */\n-    public Object getValue() {\n+    public T getValue() {\n         return this.value;\n     }\n \n      * @param value\n      *            the value to set\n      */\n-    public void setValue(Object value) {\n+    public void setValue(T value) {\n         this.value = value;\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n-     * is not <code>null</code> and is a <code>MutableObject</code> object that contains the same <code>Object</code>\n+     * is not <code>null</code> and is a <code>MutableObject</code> object that contains the same <code>T</code>\n      * value as this object.\n      * \n      * @param obj\n      *            the object to compare with.\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (obj instanceof MutableObject) {\n-            Object other = ((MutableObject) obj).value;\n-            return value == other || (value != null && value.equals(other));\n+    public boolean equals(MutableObject<T> obj) {\n+        if(obj == null) {\n+            return false;\n         }\n-        return false;\n+\n+        T other = obj.value;\n+        return value == other || (value != null && value.equals(other));\n     }\n \n     /**", "timestamp": 1245907523, "metainfo": ""}