{"sha": "ce182bf2a4876f4591c270109ccc462e259920e5", "log": "LANG-374 - Add escaping for CSV columns to StringEscapeUtils  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n         return StringUtils.replace(str, \"'\", \"''\");\n     }\n \n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * <p>Returns a <code>String</code> value for a CSV column escaping with double quotes,\n+     * if required.</p>\n+     *\n+     * <p>If the value contains a comma, newline or double quote, then the\n+     *    String value is returned enclosed in double quotes.</p>\n+     * </p>\n+     *\n+     * <p>Any double quote characters in the value are escaped with another double quote.</p>\n+     *\n+     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n+     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n+     *\n+     * @param str  the string to escape, may be null\n+     * @return a new String, escaped for CSV, <code>null</code> if null string input\n+     * @since 2.4\n+     */\n+    public static String escapeCsv(String str) {\n+        if (!containsCsvChars(str)) {\n+            return str;\n+        }\n+        StringBuffer buffer = new StringBuffer(str.length() + 10);\n+        buffer.append('\"');\n+        for (int i = 0; i < str.length(); i++) {\n+            char c = str.charAt(i);\n+            if (c == '\"') {\n+                buffer.append('\"'); // escape double quote\n+            }\n+            buffer.append(c);\n+        }\n+        buffer.append('\"');\n+        return buffer.toString();\n+    }\n+\n+    /**\n+     * <p>Writes a <code>String</code> value for a CSV column escaping with double quotes,\n+     * if required.</p>\n+     *\n+     * <p>If the value contains a comma, newline or double quote, then the\n+     *    String value is written enclosed in double quotes.</p>\n+     * </p>\n+     *\n+     * <p>Any double quote characters in the value are escaped with another double quote.</p>\n+     *\n+     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n+     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n+     *\n+     * @param str  the string to escape, may be null\n+     * @param out  Writer to write escaped string into\n+     * in double quotes or only when the value contains double quotes, commas or newline\n+     * characters.\n+     * @throws IOException if error occurs on underlying Writer\n+     * @since 2.4\n+     */\n+    public static void escapeCsv(Writer out, String str) throws IOException {\n+        if (!containsCsvChars(str)) {\n+            if (str != null) {\n+                out.write(str);\n+            }\n+            return;\n+        }\n+        out.write('\"');\n+        for (int i = 0; i < str.length(); i++) {\n+            char c = str.charAt(i);\n+            if (c == '\"') {\n+                out.write('\"'); // escape double quote\n+            }\n+            out.write(c);\n+        }\n+        out.write('\"');\n+    }\n+\n+    /**\n+     * Determine if the String contains any characters that need escaping for CSV files.\n+     *\n+     * @param str  the string to escape, may be null\n+     * @return <code>true</code> if the String contains characters that need escaping\n+     * for CSV files, otherwise <code>false</code>\n+     * @since 2.4\n+     */\n+    private static boolean containsCsvChars(String str) {\n+        return (StringUtils.contains(str, '\"') ||\n+                StringUtils.contains(str, ',') ||\n+                StringUtils.contains(str, CharUtils.CR) ||\n+                StringUtils.contains(str, CharUtils.LF));\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n         assertEquals(\"& &\", StringEscapeUtils.unescapeHtml(\"& &amp;\"));\n     }\n \n+\n+    public void testEscapeCsvString() throws Exception\n+    {\n+        assertEquals(\"foo.bar\",          StringEscapeUtils.escapeCsv(\"foo.bar\"));\n+        assertEquals(\"\\\"foo,bar\\\"\",      StringEscapeUtils.escapeCsv(\"foo,bar\"));\n+        assertEquals(\"\\\"foo\\nbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\nbar\"));\n+        assertEquals(\"\\\"foo\\rbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\rbar\"));\n+        assertEquals(\"\\\"foo\\\"\\\"bar\\\"\",   StringEscapeUtils.escapeCsv(\"foo\\\"bar\"));\n+        assertEquals(\"\",   StringEscapeUtils.escapeCsv(\"\"));\n+        assertEquals(null, StringEscapeUtils.escapeCsv(null));\n+    }\n+\n+    public void testEscapeCsvWriter() throws Exception\n+    {\n+        checkCsvEscapeWriter(\"foo.bar\",        \"foo.bar\");\n+        checkCsvEscapeWriter(\"\\\"foo,bar\\\"\",    \"foo,bar\");\n+        checkCsvEscapeWriter(\"\\\"foo\\nbar\\\"\",   \"foo\\nbar\");\n+        checkCsvEscapeWriter(\"\\\"foo\\rbar\\\"\",   \"foo\\rbar\");\n+        checkCsvEscapeWriter(\"\\\"foo\\\"\\\"bar\\\"\", \"foo\\\"bar\");\n+        checkCsvEscapeWriter(\"\", null);\n+        checkCsvEscapeWriter(\"\", \"\");\n+    }\n+\n+    private void checkCsvEscapeWriter(String expected, String value) {\n+        try {\n+            StringWriter writer = new StringWriter();\n+            StringEscapeUtils.escapeCsv(writer, value);\n+            assertEquals(expected, writer.toString());\n+        } catch (IOException e) {\n+            fail(\"Threw: \" + e);\n+        }\n+    }\n }", "timestamp": 1195186364, "metainfo": ""}