{"sha": "d66d5da2bb1e34aef6d0f785c00bf61f006073d7", "log": "Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n  * {@link java.text.SimpleDateFormat}.</p>\n  *\n  * <p>This class can be used as a direct replacement to\n- * <code>SimpleDateFormat</code> in most formatting situations.\n+ * {@code SimpleDateFormat} in most formatting situations.\n  * This class is especially useful in multi-threaded server environments.\n- * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n+ * {@code SimpleDateFormat} is not thread-safe in any JDK version,\n  * nor will it be as Sun have closed the bug/RFE.\n  * </p>\n  *\n  * <p>Only formatting is supported, but all patterns are compatible with\n  * SimpleDateFormat (except time zones - see below).</p>\n  *\n- * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n- * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n+ * <p>Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent\n+ * time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).\n  * This pattern letter can be used here (on all JDK versions).</p>\n  *\n- * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n- * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n+ * <p>In addition, the pattern {@code 'ZZ'} has been made to represent\n+ * ISO8601 full format time zones (eg. {@code +08:00} or {@code -11:00}).\n  * This introduces a minor incompatibility with Java 1.4, but at a gain of\n  * useful functionality.</p>\n  *\n      * @param locale  optional locale, overrides system locale\n      * @return a pattern based date/time formatter\n      * @throws IllegalArgumentException if pattern is invalid\n-     *  or <code>null</code>\n+     *  or {@code null}\n      */\n     public static FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {\n         return cache.getInstance(pattern, timeZone, locale);\n      *\n      * @param tz  the zone to query\n      * @param daylight  true if daylight savings\n-     * @param style  the style to use <code>TimeZone.LONG</code>\n-     *  or <code>TimeZone.SHORT</code>\n+     * @param style  the style to use {@code TimeZone.LONG} or {@ TimeZone.SHORT}\n      * @param locale  the locale to use\n      * @return the textual name of the time zone\n      */\n     /**\n      * <p>Returns a list of Rules given a pattern.</p>\n      *\n-     * @return a <code>List</code> of Rule objects\n+     * @return a {@code List} of Rule objects\n      * @throws IllegalArgumentException if pattern is invalid\n      */\n     protected List<Rule> parsePattern() {\n     // Format methods\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Formats a <code>Date</code>, <code>Calendar</code> or\n-     * <code>Long</code> (milliseconds) object.</p>\n+     * <p>Formats a {@code Date}, {@code Calendar} or\n+     * {@code Long} (milliseconds) object.</p>\n      *\n      * @param obj  the object to format\n      * @param toAppendTo  the buffer to append to\n     }\n \n     /**\n-     * <p>Formats a millisecond <code>long</code> value.</p>\n+     * <p>Formats a millisecond {@code long} value.</p>\n      *\n      * @param millis  the millisecond value to format\n      * @return the formatted string\n     }\n \n     /**\n-     * <p>Formats a <code>Date</code> object.</p>\n+     * <p>Formats a {@code Date} object.</p>\n      *\n      * @param date  the date to format\n      * @return the formatted string\n     }\n \n     /**\n-     * <p>Formats a <code>Calendar</code> object.</p>\n+     * <p>Formats a {@code Calendar} object.</p>\n      *\n      * @param calendar  the calendar to format\n      * @return the formatted string\n     }\n \n     /**\n-     * <p>Formats a milliseond <code>long</code> value into the\n-     * supplied <code>StringBuffer</code>.</p>\n+     * <p>Formats a milliseond {@code long} value into the\n+     * supplied {@code StringBuffer}.</p>\n      *\n      * @param millis  the millisecond value to format\n      * @param buf  the buffer to format into\n     }\n \n     /**\n-     * <p>Formats a <code>Date</code> object into the\n-     * supplied <code>StringBuffer</code>.</p>\n+     * <p>Formats a {@code Date} object into the\n+     * supplied {@code StringBuffer}.</p>\n      *\n      * @param date  the date to format\n      * @param buf  the buffer to format into\n     }\n \n     /**\n-     * <p>Formats a <code>Calendar</code> object into the\n-     * supplied <code>StringBuffer</code>.</p>\n+     * <p>Formats a {@code Calendar} object into the\n+     * supplied {@code StringBuffer}.</p>\n      *\n      * @param calendar  the calendar to format\n      * @param buf  the buffer to format into\n      *\n      * @param source  the string to parse\n      * @param pos  the parsing position\n-     * @return <code>null</code> as not supported\n+     * @return {@code null} as not supported\n      */\n     @Override\n     public Object parseObject(String source, ParsePosition pos) {\n     /**\n      * <p>Gets the time zone used by this formatter.</p>\n      *\n-     * <p>This zone is always used for <code>Date</code> formatting. </p>\n+     * <p>This zone is always used for {@code Date} formatting. </p>\n      *\n      * @return the time zone\n      */\n      * <p>Compares two objects for equality.</p>\n      *\n      * @param obj  the object to compare to\n-     * @return <code>true</code> if equal\n+     * @return {@code true} if equal\n      */\n     @Override\n     public boolean equals(Object obj) {\n         private final char mValue;\n \n         /**\n-         * Constructs a new instance of <code>CharacterLiteral</code>\n+         * Constructs a new instance of {@code CharacterLiteral}\n          * to hold the specified value.\n          *\n          * @param value the character literal\n         private final String mValue;\n \n         /**\n-         * Constructs a new instance of <code>StringLiteral</code>\n+         * Constructs a new instance of {@code StringLiteral}\n          * to hold the specified value.\n          *\n          * @param value the string literal\n         private final String[] mValues;\n \n         /**\n-         * Constructs an instance of <code>TextField</code>\n+         * Constructs an instance of {@code TextField}\n          * with the specified field and values.\n          *\n          * @param field the field\n         private final int mField;\n \n         /**\n-         * Constructs an instance of <code>UnpadedNumberField</code> with the specified field.\n+         * Constructs an instance of {@code UnpadedNumberField} with the specified field.\n          *\n          * @param field the field\n          */\n         static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();\n \n         /**\n-         * Constructs an instance of <code>UnpaddedMonthField</code>.\n+         * Constructs an instance of {@code UnpaddedMonthField}.\n          *\n          */\n         UnpaddedMonthField() {\n         private final int mSize;\n \n         /**\n-         * Constructs an instance of <code>PaddedNumberField</code>.\n+         * Constructs an instance of {@code PaddedNumberField}.\n          *\n          * @param field the field\n          * @param size size of the output field\n         private final int mField;\n \n         /**\n-         * Constructs an instance of <code>TwoDigitNumberField</code> with the specified field.\n+         * Constructs an instance of {@code TwoDigitNumberField} with the specified field.\n          *\n          * @param field the field\n          */\n         static final TwoDigitYearField INSTANCE = new TwoDigitYearField();\n \n         /**\n-         * Constructs an instance of <code>TwoDigitYearField</code>.\n+         * Constructs an instance of {@code TwoDigitYearField}.\n          */\n         TwoDigitYearField() {\n             super();\n         static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();\n \n         /**\n-         * Constructs an instance of <code>TwoDigitMonthField</code>.\n+         * Constructs an instance of {@code TwoDigitMonthField}.\n          */\n         TwoDigitMonthField() {\n             super();\n         private final NumberRule mRule;\n \n         /**\n-         * Constructs an instance of <code>TwelveHourField</code> with the specified\n-         * <code>NumberRule</code>.\n+         * Constructs an instance of {@code TwelveHourField} with the specified\n+         * {@code NumberRule}.\n          *\n          * @param rule the rule\n          */\n         private final NumberRule mRule;\n \n         /**\n-         * Constructs an instance of <code>TwentyFourHourField</code> with the specified\n-         * <code>NumberRule</code>.\n+         * Constructs an instance of {@code TwentyFourHourField} with the specified\n+         * {@code NumberRule}.\n          *\n          * @param rule the rule\n          */\n         private final String mDaylight;\n \n         /**\n-         * Constructs an instance of <code>TimeZoneNameRule</code> with the specified properties.\n+         * Constructs an instance of {@code TimeZoneNameRule} with the specified properties.\n          *\n          * @param timeZone the time zone\n          * @param locale the locale\n     }\n \n     /**\n-     * <p>Inner class to output a time zone as a number <code>+/-HHMM</code>\n-     * or <code>+/-HH:MM</code>.</p>\n+     * <p>Inner class to output a time zone as a number {@code +/-HHMM}\n+     * or {@code +/-HH:MM}.</p>\n      */\n     private static class TimeZoneNumberRule implements Rule {\n         static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);\n         final boolean mColon;\n \n         /**\n-         * Constructs an instance of <code>TimeZoneNumberRule</code> with the specified properties.\n+         * Constructs an instance of {@code TimeZoneNumberRule} with the specified properties.\n          *\n-         * @param colon add colon between HH and MM in the output if <code>true</code>\n+         * @param colon add colon between HH and MM in the output if {@code true}\n          */\n         TimeZoneNumberRule(boolean colon) {\n             mColon = colon;\n         private final Locale mLocale;\n \n         /**\n-         * Constructs an instance of <code>TimeZoneDisplayKey</code> with the specified properties.\n+         * Constructs an instance of {@code TimeZoneDisplayKey} with the specified properties.\n          *\n          * @param timeZone the time zone\n-         * @param daylight adjust the style for daylight saving time if <code>true</code>\n+         * @param daylight adjust the style for daylight saving time if {@code true}\n          * @param style the timezone style\n          * @param locale the timezone locale\n          */", "timestamp": 1304505434, "metainfo": ""}