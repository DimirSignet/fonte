{"sha": "b09b2ed40443dae8b6500b7b0daee1afeb53ea64", "log": "Removing isThrowableNested, isNestedThrowable and getFullStackTrace as they were all types of no-op once you got to JDK 1.4. LANG-491  ", "commit": "\n--- a/src/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Checks if the Throwable class has a <code>getCause</code> method.</p>\n-     *\n-     * <p>This is true for JDK 1.4 and above.</p>\n-     *\n-     * @return true if Throwable is nestable\n-     * @since 2.0\n-     */\n-    public static boolean isThrowableNested() {\n-        return THROWABLE_CAUSE_METHOD != null;\n-    }\n-    \n-    /**\n-     * <p>Checks whether this <code>Throwable</code> class can store a cause.</p>\n-     *\n-     * <p>This method does <b>not</b> check whether it actually does store a cause.<p>\n-     *\n-     * @param throwable  the <code>Throwable</code> to examine, may be null\n-     * @return boolean <code>true</code> if nested otherwise <code>false</code>\n-     * @since 2.0\n-     */\n-    public static boolean isNestedThrowable(Throwable throwable) {\n-        if (throwable == null) {\n-            return false;\n-        }\n-\n-        if (throwable instanceof SQLException) {\n-            return true;\n-        } else if (throwable instanceof InvocationTargetException) {\n-            return true;\n-        } else if (isThrowableNested()) {\n-            return true;\n-        }\n-\n-        Class<? extends Throwable> cls = throwable.getClass();\n-        synchronized(CAUSE_METHOD_NAMES_LOCK) {\n-            for (int i = 0, isize = CAUSE_METHOD_NAMES.length; i < isize; i++) {\n-                try {\n-                    Method method = cls.getMethod(CAUSE_METHOD_NAMES[i], (Class[]) null);\n-                    if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {\n-                        return true;\n-                    }\n-                } catch (NoSuchMethodException ignored) {\n-                    // exception ignored\n-                } catch (SecurityException ignored) {\n-                    // exception ignored\n-                }\n-            }\n-        }\n-\n-        try {\n-            Field field = cls.getField(\"detail\");\n-            if (field != null) {\n-                return true;\n-            }\n-        } catch (NoSuchFieldException ignored) {\n-            // exception ignored\n-        } catch (SecurityException ignored) {\n-            // exception ignored\n-        }\n-\n-        return false;\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * <p>Counts the number of <code>Throwable</code> objects in the\n      * exception chain.</p>\n      *\n             causeFrameIndex--;\n             wrapperFrameIndex--;\n         }\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>A way to get the entire nested stack-trace of an throwable.</p>\n-     *\n-     * <p>The result of this method is highly dependent on the JDK version\n-     * and whether the exceptions override printStackTrace or not.</p>\n-     *\n-     * @param throwable  the <code>Throwable</code> to be examined\n-     * @return the nested stack trace, with the root cause first\n-     * @since 2.0\n-     */\n-    public static String getFullStackTrace(Throwable throwable) {\n-        StringWriter sw = new StringWriter();\n-        PrintWriter pw = new PrintWriter(sw, true);\n-        Throwable[] ts = getThrowables(throwable);\n-        for (int i = 0; i < ts.length; i++) {\n-            ts[i].printStackTrace(pw);\n-            if (isNestedThrowable(ts[i])) {\n-                break;\n-            }\n-        }\n-        return sw.getBuffer().toString();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n+++ b/src/test/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testIsThrowableNested() {\n-        if (SystemUtils.isJavaVersionAtLeast(140)) {\n-            assertEquals(true, ExceptionUtils.isThrowableNested());\n-        } else {\n-            assertEquals(false, ExceptionUtils.isThrowableNested());\n-        }\n-    }\n-    \n-    public void testIsNestedThrowable_Throwable() {\n-        assertEquals(true, ExceptionUtils.isNestedThrowable(new SQLException()));\n-        assertEquals(true, ExceptionUtils.isNestedThrowable(new InvocationTargetException(new Exception())));\n-        assertEquals(true, ExceptionUtils.isNestedThrowable(new NestableRuntimeException()));\n-        assertEquals(true, ExceptionUtils.isNestedThrowable(withCause));\n-        assertEquals(true, ExceptionUtils.isNestedThrowable(nested));\n-        if (SystemUtils.isJavaVersionAtLeast(140)) {\n-            assertEquals(true, ExceptionUtils.isNestedThrowable(withoutCause));\n-            assertEquals(true, ExceptionUtils.isNestedThrowable(new Throwable()));\n-        } else {\n-            assertEquals(false, ExceptionUtils.isNestedThrowable(withoutCause));\n-            assertEquals(false, ExceptionUtils.isNestedThrowable(new Throwable()));\n-        }\n-    }\n-\n-    //-----------------------------------------------------------------------\n     public void testGetThrowableCount_Throwable() {\n         assertEquals(0, ExceptionUtils.getThrowableCount(null));\n         assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));", "timestamp": 1262390766, "metainfo": ""}