{"sha": "d7f5013886304fe8cbc8054e55b053bd586d282a", "log": "LANG-692 - Add hashCodeMulti varargs method  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n      * @since 2.1\n      */\n     public static int hashCode(Object obj) {\n+        // hashCode(Object) retained for performance, as hash code is often critical\n         return (obj == null) ? 0 : obj.hashCode();\n+    }\n+\n+    /**\n+     * <p>Gets the hash code for multiple objects.</p>\n+     * \n+     * <p>This allows a hash code to be rapidly calculated for a number of objects.\n+     * The hash code for a single object is the <em>not</em> same as {@link #hashCode(Object)}.\n+     * The hash code for multiple objects is the same as that calculated by an\n+     * {@code ArrayList} containing the specified objects.</p>\n+     *\n+     * <pre>\n+     * ObjectUtils.hashCodeMulti()                 = 1\n+     * ObjectUtils.hashCodeMulti((Object[]) null)  = 1\n+     * ObjectUtils.hashCodeMulti(a)                = 31 + a.hashCode()\n+     * ObjectUtils.hashCodeMulti(a,b)              = (31 + a.hashCode()) * 31 + b.hashCode()\n+     * ObjectUtils.hashCodeMulti(a,b,c)            = ((31 + a.hashCode()) * 31 + b.hashCode()) * 31 + c.hashCode()\n+     * </pre>\n+     *\n+     * @param first  the first object, may be {@code null}\n+     * @param objects  the objects to obtain the hash code of, may be {@code null}\n+     * @return the hash code of the objects, or zero if null\n+     * @since 3.0\n+     */\n+    public static int hashCodeMulti(Object... objects) {\n+        int hash = 1;\n+        if (objects != null) {\n+            for (int i = 0; i < objects.length; i++) {\n+                hash = hash * 31 + ObjectUtils.hashCode(objects[i]);\n+            }\n+        }\n+        return hash;\n     }\n \n     // Identity ToString\n--- a/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n+import java.util.List;\n \n import junit.framework.TestCase;\n \n         assertEquals(\"a\".hashCode(), ObjectUtils.hashCode(\"a\"));\n     }\n \n+    public void testHashCodeMulti_multiple_emptyArray() {\n+        Object[] array = new Object[0];\n+        assertEquals(1, ObjectUtils.hashCodeMulti(array));\n+    }\n+\n+    public void testHashCodeMulti_multiple_nullArray() {\n+        Object[] array = null;\n+        assertEquals(1, ObjectUtils.hashCodeMulti(array));\n+    }\n+\n+    public void testHashCodeMulti_multiple_likeList() {\n+        List<Object> list0 = new ArrayList<Object>(Arrays.asList());\n+        assertEquals(list0.hashCode(), ObjectUtils.hashCodeMulti());\n+        \n+        List<Object> list1 = new ArrayList<Object>(Arrays.asList(\"a\"));\n+        assertEquals(list1.hashCode(), ObjectUtils.hashCodeMulti(\"a\"));\n+        \n+        List<Object> list2 = new ArrayList<Object>(Arrays.asList(\"a\", \"b\"));\n+        assertEquals(list2.hashCode(), ObjectUtils.hashCodeMulti(\"a\", \"b\"));\n+        \n+        List<Object> list3 = new ArrayList<Object>(Arrays.asList(\"a\", \"b\", \"c\"));\n+        assertEquals(list3.hashCode(), ObjectUtils.hashCodeMulti(\"a\", \"b\", \"c\"));\n+    }\n+\n //    /**\n //     * Show that java.util.Date and java.sql.Timestamp are apples and oranges.\n //     * Prompted by an email discussion. ", "timestamp": 1302621216, "metainfo": ""}