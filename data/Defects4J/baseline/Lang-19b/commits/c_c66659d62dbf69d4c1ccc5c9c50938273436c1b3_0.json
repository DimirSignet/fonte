{"sha": "c66659d62dbf69d4c1ccc5c9c50938273436c1b3", "log": "Javadoc fixes. Shouldn't have been anything other than javadoc changes in this.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.17 2003/07/12 10:09:40 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.18 2003/07/14 22:25:02 bayard Exp $\n  */\n public class ArrayUtils {\n \n-    /** An empty immutable object array */\n+    /**\n+     * An empty immutable <code>Object</code> array.\n+     */\n     public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n-    /** An empty immutable class array */\n+    /**\n+     * An empty immutable <code>Class</code> array.\n+     */\n     public static final Class[] EMPTY_CLASS_ARRAY = new Class[0];\n-    /** An empty immutable string array */\n+    /**\n+     * An empty immutable <code>String</code> array.\n+     */\n     public static final String[] EMPTY_STRING_ARRAY = new String[0];\n-    /** An empty immutable long array */\n+    /**\n+     * An empty immutable <code>long</code> array.\n+     */\n     public static final long[] EMPTY_LONG_ARRAY = new long[0];\n-    /** An empty immutable Long array */\n+    /**\n+     * An empty immutable <code>Long</code> array.\n+     */\n     public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];\n-    /** An empty immutable int array */\n+    /**\n+     * An empty immutable <code>int</code> array.\n+     */\n     public static final int[] EMPTY_INT_ARRAY = new int[0];\n-    /** An empty immutable Integer array */\n+    /**\n+     * An empty immutable <code>Integer</code> array.\n+     */\n     public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n-    /** An empty immutable short array */\n+    /**\n+     * An empty immutable <code>short</code> array.\n+     */\n     public static final short[] EMPTY_SHORT_ARRAY = new short[0];\n-    /** An empty immutable Short array */\n+    /**\n+     * An empty immutable <code>Short</code> array.\n+     */\n     public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];\n-    /** An empty immutable byte array */\n+    /**\n+     * An empty immutable <code>byte</code> array.\n+     */\n     public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n-    /** An empty immutable Byte array */\n+    /**\n+     * An empty immutable <code>Byte</code> array.\n+     */\n     public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];\n-    /** An empty immutable double array */\n+    /**\n+     * An empty immutable <code>double</code> array.\n+     */\n     public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];\n-    /** An empty immutable Double array */\n+    /**\n+     * An empty immutable <code>Double</code> array.\n+     */\n     public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];\n-    /** An empty immutable float array */\n+    /**\n+     * An empty immutable <code>float</code> array.\n+     */\n     public static final float[] EMPTY_FLOAT_ARRAY = new float[0];\n-    /** An empty immutable Float array */\n+    /**\n+     * An empty immutable <code>Float</code> array.\n+     */\n     public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];\n-    /** An empty immutable boolean array */\n+    /**\n+     * An empty immutable <code>boolean</code> array.\n+     */\n     public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];\n-    /** An empty immutable Boolean array */\n+    /**\n+     * An empty immutable <code>Boolean</code> array.\n+     */\n     public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];\n-    /** An empty immutable char array */\n+    /**\n+     * An empty immutable <code>char</code> array.\n+     */\n     public static final char[] EMPTY_CHAR_ARRAY = new char[0];\n-    /** An empty immutable Character array */\n+    /**\n+     * An empty immutable <code>Character</code> array.\n+     */\n     public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];\n \n     /**\n      * <p>Multi-dimensional arrays are handled correctly, including\n      * multi-dimensional primitive arrays.</p>\n      *\n-     * <p>The format is that of Java source code, for example {a,b}.</p>\n+     * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n      * \n      * @param array  the array to get a toString for, may be <code>null</code>\n      * @return a String representation of the array, '{}' if <code>null</code> passed in\n      * <p>Multi-dimensional arrays are handled correctly, including\n      * multi-dimensional primitive arrays.</p>\n      *\n-     * <p>The format is that of Java source code, for example {a,b}.</p>\n+     * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n      * \n      * @param array  the array to get a toString for, may be <code>null</code>\n      * @param stringIfNull  the String to return if the array is <code>null</code>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n-     * @return the index of the object within the array, or -1 if not found\n+     * @return the index of the object within the array, or <code>-1</code> if not found\n      */\n     public static int indexOf(final Object[] array, final Object objectToFind) {\n         return indexOf(array, objectToFind, 0);\n      * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n+     * length will return <code>-1</code>.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @param startIndex  the index to start searching at\n      * @return the index of the object within the array starting at the\n-     *  given index, or -1 if not found\n+     *  given index, or <code>-1</code> if not found\n      */\n     public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n-     * @return the last index of the object to find, or -1 if not found\n+     * @return the last index of the object to find, or <code>-1</code> if not found\n      */\n     public static int lastIndexOf(final Object[] array, final Object objectToFind) {\n         return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n      *\n      * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n      *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n+     * <p>A negative startIndex will return <code>-1</code>. A startIndex larger than\n+     * the array length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the object within the array starting at the given index,\n-     *  or -1 if not found\n+     *  or <code>-1</code> if not found\n      */\n     public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {\n         if (array == null) {\n     }\n \n     /**\n-     * <p>Converts an array of object Booleans to primitives handling null.</p>\n+     * <p>Converts an array of object Booleans to primitives handling <code>null</code>.</p>\n      * \n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n     }\n \n     /**\n-     * <p>Converts an array of object Bytes to primitives handling null.</p>\n+     * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>\n      * \n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n     }\n \n     /**\n-     * <p>Converts an array of object Short to primitives handling null.</p>\n+     * <p>Converts an array of object Short to primitives handling <code>null</code>.</p>\n      * \n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n     }\n \n     /**\n-     * <p>Converts an array of object Integer to primitives handling null.</p>\n+     * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>\n      * \n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n     }\n     \n     /**\n-     * <p>Converts an array of object Long to primitives handling null.</p>\n+     * <p>Converts an array of object Long to primitives handling <code>null</code>.</p>\n      * \n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n     }\n \n     /**\n-     * <p>Converts an array of object Floats to primitives handling null.</p>\n+     * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>\n      * \n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n     }\n \n     /**\n-     * <p>Converts an array of object Doubles to primitives handling null.</p>\n+     * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p>\n      * \n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: BooleanUtils.java,v 1.6 2003/06/28 18:16:03 scolebourne Exp $\n+ * @version $Id: BooleanUtils.java,v 1.7 2003/07/14 22:25:02 bayard Exp $\n  */\n public class BooleanUtils {\n \n     }\n     \n     /**\n-     * <p>Converts a Boolean to a boolean handling null by returning false.</p>\n+     * <p>Converts a Boolean to a boolean handling <code>null</code>\n+     * by returning <code>false</code>.</p>\n      * \n      * @param bool  the boolean to convert\n-     * @return true or false\n+     * @return <code>true</code> or <code>false</code>\n      */\n     public static boolean toBoolean(Boolean bool) {\n         if (bool == null) {\n     }\n     \n     /**\n-     * <p>Converts a Boolean to a boolean handling null.</p>\n+     * <p>Converts a Boolean to a boolean handling <code>null</code>.</p>\n      * \n      * @param bool  the boolean to convert\n-     * @param valueIfNull  the boolean value to return if null\n-     * @return true or false\n+     * @param valueIfNull  the boolean value to return if <code>null</code>\n+     * @return <code>true</code> or <code>false</code>\n      */\n     public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull) {\n         if (bool == null) {\n     // Integer to Boolean methods\n     //--------------------------------------------------------------------------\n     /**\n-     * <p>Convert an int to a boolean using the convention that zero is false.</p>\n+     * <p>Convert an int to a boolean using the convention that <code>zero</code>\n+     * is <code>false</code>.</p>\n      * \n      * @param value  the int to convert\n-     * @return true if non-zero, false if zero\n+     * @return <code>true</code> if non-zero, <code>false</code>\n+     *  if zero\n      */\n     public static boolean toBoolean(int value) {\n         return (value == 0 ? false : true);\n     }\n     \n     /**\n-     * <p>Convert an int to a Boolean using the convention that zero is false.</p>\n+     * <p>Convert an int to a Boolean using the convention that <code>zero</code>\n+     * is <code>false</code>.</p>\n      * \n      * @param value  the int to convert\n-     * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero, null if null\n+     * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,\n+     *  <code>null</code> if <code>null</code>\n      */\n     public static Boolean toBooleanObject(int value) {\n         return (value == 0 ? Boolean.FALSE : Boolean.TRUE);\n     }\n     \n     /**\n-     * <p>Convert an Integer to a Boolean using the convention that zero is false.</p>\n-     * \n-     * <p>null will be converted to null.</p>\n+     * <p>Convert an Integer to a Boolean using the convention that <code>zero</code>\n+     * is <code>false</code>.</p>\n+     * \n+     * <p><code>null</code> will be converted to <code>null</code>.</p>\n      * \n      * @param value  the Integer to convert\n-     * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero, null if null\n+     * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,\n+     *  <code>null</code> if <code>null</code>\n      */\n     public static Boolean toBooleanObject(Integer value) {\n         if (value == null) {\n      * <p>Convert an int to a boolean specifying the conversion values.</p>\n      * \n      * @param value  the Integer to convert\n-     * @param trueValue  the value to match for true\n-     * @param falseValue  the value to match for false\n-     * @return true or false\n+     * @param trueValue  the value to match for <code>true</code>\n+     * @param falseValue  the value to match for <code>false</code>\n+     * @return <code>true</code> or <code>false</code>\n      * @throws IllegalArgumentException if no match\n      */\n     public static boolean toBoolean(int value, int trueValue, int falseValue) {\n      * <p>Convert an Integer to a boolean specifying the conversion values.</p>\n      * \n      * @param value  the Integer to convert\n-     * @param trueValue  the value to match for true, may be null\n-     * @param falseValue  the value to match for false, may be null\n-     * @return true or false\n+     * @param trueValue  the value to match for <code>true</code>,\n+     *  may be <code>null</code>\n+     * @param falseValue  the value to match for <code>false</code>,\n+     *  may be <code>null</code>\n+     * @return <code>true</code> or <code>false</code>\n      * @throws IllegalArgumentException if no match\n      */\n     public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {\n      * <p>Convert an int to a Boolean specifying the conversion values.</p>\n      * \n      * @param value  the Integer to convert\n-     * @param trueValue  the value to match for true\n-     * @param falseValue  the value to match for false\n-     * @param nullValue  the value to to match for null\n-     * @return Boolean.TRUE, Boolean.FALSE, or null\n+     * @param trueValue  the value to match for <code>true</code>\n+     * @param falseValue  the value to match for <code>false</code>\n+     * @param nullValue  the value to to match for <code>null</code>\n+     * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>\n      * @throws IllegalArgumentException if no match\n      */\n     public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue) {\n      * <p>Convert an Integer to a Boolean specifying the conversion values.</p>\n      * \n      * @param value  the Integer to convert\n-     * @param trueValue  the value to match for true, may be null\n-     * @param falseValue  the value to match for false, may be null\n-     * @param nullValue  the value to to match for null, may be null\n-     * @return Boolean.TRUE, Boolean.FALSE, or null\n+     * @param trueValue  the value to match for <code>true</code>,\n+     *  may be <code>null</code>\n+     * @param falseValue  the value to match for <code>false</code>,\n+     *  may be <code>null</code>\n+     * @param nullValue  the value to to match for <code>null</code>,\n+     *  may be <code>null</code>\n+     * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>\n      * @throws IllegalArgumentException if no match\n      */\n     public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {\n     // Boolean to Integer methods\n     //--------------------------------------------------------------------------\n     /**\n-     * <p>Convert a boolean to an int using the convention that zero is false.</p>\n+     * <p>Convert a boolean to an int using the convention that\n+     * <code>zero</code> is <code>false</code>.</p>\n      * \n      * @param bool  the boolean to convert\n-     * @return one if true, zero if false\n+     * @return one if <code>true</code>, zero if <code>false</code>\n      */\n     public static int toInteger(boolean bool) {\n         return (bool ? 1 : 0);\n     }\n     \n     /**\n-     * <p>Convert a boolean to an Integer using the convention that zero is false.</p>\n+     * <p>Convert a boolean to an Integer using the convention that\n+     * <code>zero</code> is <code>false</code>.</p>\n      * \n      * @param bool  the boolean to convert\n-     * @return one if true, zero if false\n+     * @return one if <code>true</code>, zero if <code>false</code>\n      */\n     public static Integer toIntegerObject(boolean bool) {\n         return (bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO);\n     }\n     \n     /**\n-     * <p>Convert a Boolean to a Integer using the convention that zero is false.</p>\n-     * \n-     * <p>null will be converted to null.</p>\n+     * <p>Convert a Boolean to a Integer using the convention that\n+     * <code>zero</code> is <code>false</code>.</p>\n+     * \n+     * <p><code>null</code> will be converted to <code>null</code>.</p>\n      * \n      * @param bool  the Boolean to convert\n-     * @return one if Boolean.TRUE, zero if Boolean.FALSE, null if null\n+     * @return one if Boolean.TRUE, zero if Boolean.FALSE, <code>null</code> if <code>null</code>\n      */\n     public static Integer toIntegerObject(Boolean bool) {\n         if (bool == null) {\n      * <p>Convert a boolean to an int specifying the conversion values.</p>\n      * \n      * @param bool  the to convert\n-     * @param trueValue  the value to return if true\n-     * @param falseValue  the value to return if false\n+     * @param trueValue  the value to return if <code>true</code>\n+     * @param falseValue  the value to return if <code>false</code>\n      * @return the appropriate value\n      */\n     public static int toInteger(boolean bool, int trueValue, int falseValue) {\n      * <p>Convert a Boolean to an int specifying the conversion values.</p>\n      * \n      * @param bool  the Boolean to convert\n-     * @param trueValue  the value to return if true\n-     * @param falseValue  the value to return if false\n-     * @param nullValue  the value to return if null\n+     * @param trueValue  the value to return if <code>true</code>\n+     * @param falseValue  the value to return if <code>false</code>\n+     * @param nullValue  the value to return if <code>null</code>\n      * @return the appropriate value\n      */\n     public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue) {\n      * <p>Convert a boolean to an Integer specifying the conversion values.</p>\n      * \n      * @param bool  the to convert\n-     * @param trueValue  the value to return if true, may be null\n-     * @param falseValue  the value to return if false, may be null\n+     * @param trueValue  the value to return if <code>true</code>,\n+     *  may be <code>null</code>\n+     * @param falseValue  the value to return if <code>false</code>,\n+     *  may be <code>null</code>\n      * @return the appropriate value\n      */\n     public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {\n      * <p>Convert a Boolean to an Integer specifying the conversion values.</p>\n      * \n      * @param bool  the Boolean to convert\n-     * @param trueValue  the value to return if true, may be null\n-     * @param falseValue  the value to return if false, may be null\n-     * @param nullValue  the value to return if null, may be null\n+     * @param trueValue  the value to return if <code>true</code>,\n+     *  may be <code>null</code>\n+     * @param falseValue  the value to return if <code>false</code>,\n+     *  may be <code>null</code>\n+     * @param nullValue  the value to return if <code>null</code>,\n+     *  may be <code>null</code>\n      * @return the appropriate value\n      */\n     public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {\n     /**\n      * <p>Converts a String to a Boolean.</p>\n      * \n-     * <p>'true', 'on' or 'yes' (case insensitive) will return true.\n-     * 'false', 'off' or 'no' (case insensitive) will return false.\n-     * Otherwise, null is returned.</p>\n+     * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>\n+     * (case insensitive) will return <code>true</code>.\n+     * <code>'false'</code>, <code>'off'</code> or <code>'no'</code>\n+     * (case insensitive) will return <code>false</code>.\n+     * Otherwise, <code>null</code> is returned.</p>\n      *\n      * @param str  the String to check\n-     * @return the Boolean value of the string, null if no match or null input\n+     * @return the Boolean value of the string, <code>null</code>\n+     *  if no match or <code>null</code> input\n      */\n     public static Boolean toBooleanObject(String str) {\n         if (\"true\".equalsIgnoreCase(str)) {\n      * <p>Converts a String to a Boolean throwing an exception if no match.</p>\n      *\n      * @param str  the String to check\n-     * @param trueString  the String to match for true (case sensitive), may be null\n-     * @param falseString  the String to match for false (case sensitive), may be null\n-     * @param nullString  the String to match for null (case sensitive), may be null\n-     * @return the Boolean value of the string, null if no match or null input\n+     * @param trueString  the String to match for <code>true</code>\n+     *  (case sensitive), may be <code>null</code>\n+     * @param falseString  the String to match for <code>false</code>\n+     *  (case sensitive), may be <code>null</code>\n+     * @param nullString  the String to match for <code>null</code>\n+     *  (case sensitive), may be <code>null</code>\n+     * @return the Boolean value of the string, <code>null</code>\n+     *  if no match or <code>null</code> input\n      */\n     public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {\n         if (str == null) {\n     /**\n      * <p>Converts a String to a boolean.</p>\n      * \n-     * <p>'true', 'on' or 'yes' (case insensitive) will return true.\n-     * Otherwise, false is returned.</p>\n+     * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>\n+     * (case insensitive) will return <code>true</code>. Otherwise,\n+     * <code>false</code> is returned.</p>\n      *\n      * @param str  the String to check\n-     * @return the boolean value of the string, false if no match\n+     * @return the boolean value of the string, <code>false</code> if no match\n      */\n     public static boolean toBoolean(String str) {\n         if (\"true\".equalsIgnoreCase(str)) {\n      * <p>null is returned if there is no match.</p>\n      *\n      * @param str  the String to check\n-     * @param trueString  the String to match for true (case sensitive), may be null\n-     * @param falseString  the String to match for false (case sensitive), may be null\n+     * @param trueString  the String to match for <code>true</code>\n+     *  (case sensitive), may be <code>null</code>\n+     * @param falseString  the String to match for <code>false</code>\n+     *  (case sensitive), may be <code>null</code>\n      * @return the boolean value of the string\n      * @throws IllegalArgumentException if the String doesn't match\n      */\n     // Boolean to String methods\n     //--------------------------------------------------------------------------\n     /**\n-     * <p>Converts a Boolean to a String returning 'true', 'false', or <code>null</code>.</p>\n-     * \n-     * @param bool  the Boolean to check\n-     * @return 'true', 'false', or <code>null</code>\n+     * <p>Converts a Boolean to a String returning <code>'true'</code>,\n+     * <code>'false'</code>, or <code>null</code>.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return <code>'true'</code>, <code>'false'</code>,\n+     *  or <code>null</code>\n      */\n     public static String toStringTrueFalse(Boolean bool) {\n         return toString(bool, \"true\", \"false\", null);\n     }\n     \n     /**\n-     * <p>Converts a Boolean to a String returning 'on', 'off', or <code>null</code>.</p>\n-     * \n-     * @param bool  the Boolean to check\n-     * @return 'on', 'off', or <code>null</code>\n+     * <p>Converts a Boolean to a String returning <code>'on'</code>,\n+     * <code>'off'</code>, or <code>null</code>.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return <code>'on'</code>, <code>'off'</code>,\n+     *  or <code>null</code>\n      */\n     public static String toStringOnOff(Boolean bool) {\n         return toString(bool, \"on\", \"off\", null);\n     }\n     \n     /**\n-     * <p>Converts a Boolean to a String returning 'yes', 'no', or <code>null</code>.</p>\n-     * \n-     * @param bool  the Boolean to check\n-     * @return 'yes', 'no', or <code>null</code>\n+     * <p>Converts a Boolean to a String returning <code>'yes'</code>,\n+     * <code>'no'</code>, or <code>null</code>.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return <code>'yes'</code>, <code>'no'</code>,\n+     *  or <code>null</code>\n      */\n     public static String toStringYesNo(Boolean bool) {\n         return toString(bool, \"yes\", \"no\", null);\n      * <p>Converts a Boolean to a String returning one of the input Strings.</p>\n      * \n      * @param bool  the Boolean to check\n-     * @param trueString  the String to return if true, may be null\n-     * @param falseString  the String to return if false, may be null\n-     * @param nullString  the String to return if null, may be null\n+     * @param trueString  the String to return if <code>true</code>,\n+     *  may be <code>null</code>\n+     * @param falseString  the String to return if <code>false</code>,\n+     *  may be <code>null</code>\n+     * @param nullString  the String to return if <code>null</code>,\n+     *  may be <code>null</code>\n      * @return one of the three input Strings\n      */\n     public static String toString(Boolean bool, String trueString, String falseString, String nullString) {\n     // boolean to String methods\n     //--------------------------------------------------------------------------\n     /**\n-     * <p>Converts a boolean to a String returning 'true' or 'false'.</p>\n-     * \n-     * @param bool  the Boolean to check\n-     * @return 'true', 'false', or <code>null</code>\n+     * <p>Converts a boolean to a String returning <code>'true'</code>\n+     * or <code>'false'</code>.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return <code>'true'</code>, <code>'false'</code>,\n+     *  or <code>null</code>\n      */\n     public static String toStringTrueFalse(boolean bool) {\n         return toString(bool, \"true\", \"false\");\n     }\n     \n     /**\n-     * <p>Converts a boolean to a String returning 'on' or 'off'.</p>\n-     * \n-     * @param bool  the Boolean to check\n-     * @return 'on', 'off', or <code>null</code>\n+     * <p>Converts a boolean to a String returning <code>'on'</code>\n+     * or <code>'off'</code>.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return <code>'on'</code>, <code>'off'</code>,\n+     *  or <code>null</code>\n      */\n     public static String toStringOnOff(boolean bool) {\n         return toString(bool, \"on\", \"off\");\n     }\n     \n     /**\n-     * <p>Converts a boolean to a String returning 'yes' or 'no'.</p>\n-     * \n-     * @param bool  the Boolean to check\n-     * @return 'yes', 'no', or <code>null</code>\n+     * <p>Converts a boolean to a String returning <code>'yes'</code>\n+     * or <code>'no'</code>.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return <code>'yes'</code>, <code>'no'</code>,\n+     *  or <code>null</code>\n      */\n     public static String toStringYesNo(boolean bool) {\n         return toString(bool, \"yes\", \"no\");\n      * <p>Converts a boolean to a String returning one of the input Strings.</p>\n      * \n      * @param bool  the Boolean to check\n-     * @param trueString  the String to return if true, may be null\n-     * @param falseString  the String to return if false, may be null\n+     * @param trueString  the String to return if <code>true</code>,\n+     *  may be <code>null</code>\n+     * @param falseString  the String to return if <code>false</code>,\n+     *  may be <code>null</code>\n      * @return one of the two input Strings\n      */\n     public static String toString(boolean bool, String trueString, String falseString) {\n     // xor methods\n     //  --------------------------------------------------------------------------\n     /**\n-     * Performs an xor on a set of booleans.\n+     * <p>Performs an xor on a set of booleans.</p>\n      * \n      * @param array  an array of <code>boolean<code>s\n      * @return <code>true</code> if the xor is successful.\n     }\n \n     /**\n-     * Performs an xor on an array of Booleans.\n+     * <p>Performs an xor on an array of Booleans.</p>\n      * \n      * @param array  an array of <code>Boolean<code>s\n      * @return <code>true</code> if the xor is successful.\n--- a/src/java/org/apache/commons/lang/CharRange.java\n+++ b/src/java/org/apache/commons/lang/CharRange.java\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharRange.java,v 1.5 2003/03/23 17:59:09 scolebourne Exp $\n+ * @version $Id: CharRange.java,v 1.6 2003/07/14 22:25:02 bayard Exp $\n  */\n class CharRange {\n \n     /**\n-     * Used internally to represent null in a char.\n+     * <p>Used internally to represent <code>null</code> in a char.</p>\n      */\n     private static char UNSET;\n \n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharSetUtils.java,v 1.11 2003/04/09 00:07:50 ggregory Exp $\n+ * @version $Id: CharSetUtils.java,v 1.12 2003/07/14 22:25:02 bayard Exp $\n  */\n public class CharSetUtils {\n \n      * set logic to be performed.</p>\n      * <p>The syntax is:</p>\n      * <ul>\n-     *  <li>\"aeio\" which implies 'a','e',..\n-     *  <li>\"^e\" implies not e. However it only negates, it's not\n-     *   a set in itself due to the size of that set in unicode.\n-     *  <li>\"ej-m\" implies e,j->m. e,j,k,l,m.\n+     *  <li>&quot;aeio&quot; which implies 'a','e',..</li>\n+     *  <li>&quot;^e&quot; implies not e. However it only negates, it's not\n+     *   a set in itself due to the size of that set in unicode.</li>\n+     *  <li>&quot;ej-m&quot; implies e,j->m. e,j,k,l,m.</li>\n      * </ul>\n      *\n      * @param set\n      *\n      * <p>An example is:</p>\n      * <ul>\n-     *  <li>squeeze(\"hello\", \"el\")  => \"helo\"\n+     *  <li>squeeze(&quot;hello&quot;, &quot;el&quot;) => &quot;helo&quot;</li>\n      * </ul>\n      * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      *\n      *\n      * <p>An example is:</p>\n      * <ul>\n-     *   <li>squeeze(\"hello\", {\"el\"})  => \"helo\"\n+     *   <li>squeeze(&quot;hello&quot;, {&quot;el&quot;}) => &quot;helo&quot;</li>\n      * </ul>\n      * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * \n      *\n      * <p>An example would be:</p>\n      * <ul>\n-     *   <li>count(\"hello\", {\"c-f\",\"o\"}) returns 2.\n+     *   <li>count(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns 2.</li>\n      * </ul>\n      *\n      * @param str  String target to count characters in\n      * <p>Takes an argument in set-syntax, see evaluateSet,\n      * and returns the number of characters present in the specified string.</p>\n      *\n-     * An example would be:</p>\n-     * <ul>\n-     *  <li>count(\"hello\", {\"c-f\",\"o\"}) returns 2.\n+     * <p>An example would be:</p>\n+     * <ul>\n+     *  <li>count(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns 2.</li>\n      * </ul>\n      *\n      * @param str  String target to count characters in\n      *\n      * <p>An example would be:</p>\n      * <ul>\n-     *   <li>keep(\"hello\", {\"c-fo\"}) returns \"hll\"\n+     *   <li>keep(&quot;hello&quot;, {&quot;c-fo&quot;}) returns &quot;hll&quot;</li>\n      * </ul>\n      *\n      * @param str  String target to keep characters from\n      *\n      * <p>An example would be:</p>\n      * <ul>\n-     *  <li>keep(\"hello\", {\"c-f\",\"o\"}) returns \"hll\"\n+     *  <li>keep(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;})\n+     *   returns &quot;hll&quot;</li>\n      * </ul>\n      *\n      * @param str  String target to keep characters from\n      *\n      * <p>An example would be:</p>\n      * <ul>\n-     *   <li>delete(\"hello\", {\"c-fo\"}) returns \"hll\"\n+     *   <li>delete(&quot;hello&quot;, {&quot;c-fo&quot;}) returns &quot;hll&quot;</li>\n      * </ul>\n      *\n      * @param str  String target to delete characters from\n      *\n      * <p>An example would be:</p>\n      * <ul>\n-     *  <li>delete(\"hello\", {\"c-f\",\"o\"}) returns \"hll\"\n+     *  <li>delete(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns\n+     *   &quot;hll&quot;</li>\n      * </ul>\n      *\n      * @param str  String target to delete characters from\n      *\n      * <p>An example is:</p>\n      * <ul>\n-     *   <li>translate(\"hello\", \"ho\", \"jy\") => jelly\n+     *   <li>translate(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;)\n+     *    => jelly</li>\n      * </ul>\n      *\n      * <p>If the length of characters to search for is greater than the\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.12 2003/05/29 21:02:53 ggregory Exp $\n+ * @version $Id: ClassUtils.java,v 1.13 2003/07/14 22:25:02 bayard Exp $\n  */\n public class ClassUtils {\n \n     /**\n-     * The package separator character: <code>&#x2e;</code>\n+     * <p>The package separator character: <code>&#x2e;</code>.</p>\n      */\n     public static final char PACKAGE_SEPARATOR_CHAR = '.';\n     \n     /**\n-     * The package separator String: <code>&#x2e;</code>\n+     * <p>The package separator String: <code>&#x2e;</code>.</p>\n      */\n     public static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);\n     \n     /**\n-     * The inner class separator character: <code>$</code>\n+     * <p>The inner class separator character: <code>$</code>.</p>\n      */\n     public static final char INNER_CLASS_SEPARATOR_CHAR = '$';\n     \n     /**\n-     * The inner class separator String: <code>$</code>\n+     * <p>The inner class separator String: <code>$</code>.</p>\n      */\n     public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);\n     \n     // -------------------------------------------------------------------------\n     \n     /**\n-     * <p>Given a <code>List</code> of class names, this method converts them into classes.     \n-     *\n-     * A new <code>List</code> is returned. If the class name cannot be found, <code>null</code>\n+     * <p>Given a <code>List</code> of class names, this method converts them into classes.</p>\n+     *\n+     * <p>A new <code>List</code> is returned. If the class name cannot be found, <code>null</code>\n      * is stored in the <code>List</code>. If the class name in the <code>List</code> is\n      * <code>null</code>, <code>null</code> is stored in the output <code>List</code>.</p>\n      * \n     \n     /**\n      * <p>Given a <code>List</code> of <code>Class</code> objects, this method converts\n-     * them into class names.\n-     * A new <code>List</code> is returned. <code>null</code> objects will be copied into\n+     * them into class names.</p>\n+     *\n+     * <p>A new <code>List</code> is returned. <code>null</code> objects will be copied into\n      * the returned list as <code>null</code>.</p>\n      * \n      * @param classes  the classes to change\n--- a/src/java/org/apache/commons/lang/IllegalClassException.java\n+++ b/src/java/org/apache/commons/lang/IllegalClassException.java\n package org.apache.commons.lang;\n \n /**\n- * Thrown when an object is an instance of an unexpected type (a class or interface).\n+ * <p>Thrown when an object is an instance of an unexpected type (a class or interface).</p>\n  * \n  * @author Matthew Hawthorne\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: IllegalClassException.java,v 1.3 2003/06/03 20:49:59 ggregory Exp $\n+ * @version $Id: IllegalClassException.java,v 1.4 2003/07/14 22:25:02 bayard Exp $\n  */\n public class IllegalClassException extends IllegalArgumentException {\n \n     /**\n-     * Instantiates with the specified types (classes or interfaces).\n+     * <p>Instantiates with the specified types (classes or interfaces).</p>\n      * \n      * @param expected  the expected type\n      * @param actual  the actual type\n     }\n \n     /**\n-     * Instantiates with the specified message.\n+     * <p>Instantiates with the specified message.</p>\n      * \n      * @param message  the exception message\n      */\n     }\n \n     /**\n-     * Returns the class name or <code>null</code> if the class is <code>null</code>.\n+     * <p>Returns the class name or <code>null</code> if the class is\n+     * <code>null</code>.</p>\n      * \n      * @param cls  a <code>Class</code>\n      * @return the name of <code>cls</code>, or <code>null</code> if if <code>cls</code> is <code>null</code>.\n--- a/src/java/org/apache/commons/lang/IncompleteArgumentException.java\n+++ b/src/java/org/apache/commons/lang/IncompleteArgumentException.java\n import java.util.Arrays;\n \n /**\n- * Thrown to indicate an incomplete argument to a method.\n+ * <p>Thrown to indicate an incomplete argument to a method.</p>\n  * \n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: IncompleteArgumentException.java,v 1.2 2003/05/16 16:14:17 scolebourne Exp $\n+ * @version $Id: IncompleteArgumentException.java,v 1.3 2003/07/14 22:25:02 bayard Exp $\n  */\n public class IncompleteArgumentException extends IllegalArgumentException {\n \n     /**\n-     * Instantiates with the specified description.\n+     * <p>Instantiates with the specified description.</p>\n      * \n      * @param argName  a description of the incomplete argument\n      */\n     }\n \n     /**\n-     * Instantiates with the specified description.\n+     * <p>Instantiates with the specified description.</p>\n      * \n      * @param argName  a description of the incomplete argument\n      * @param items  an array describing the arguments missing\n     }\n \n     /**\n-     * Converts an array to a string without throwing an exception.\n+     * <p>7Converts an array to a string without throwing an exception.</p>\n      * \n      * @param array  an array\n      * @return the array as a string\n--- a/src/java/org/apache/commons/lang/IntHashMap.java\n+++ b/src/java/org/apache/commons/lang/IntHashMap.java\n package org.apache.commons.lang;\n \n /**\n- * A hash map that uses primitive ints for the key rather than objects.\n- * Note that this class is for internal optimization purposes only, and may\n+ * <p>A hash map that uses primitive ints for the key rather than objects.</p>\n+ *\n+ * <p>Note that this class is for internal optimization purposes only, and may\n  * not be supported in future releases of Jakarta Commons Lang.  Utilities of\n- * this sort may be included in future releases of Jakarta Commons Collections.\n+ * this sort may be included in future releases of Jakarta Commons Collections.</p>\n  *\n  * @author Justin Couch\n  * @author Alex Chaffee (alex@apache.org)\n- * @version $Revision: 1.1 $\n+ * @version $Revision: 1.2 $\n  * @see java.util.HashMap\n  */\n public class IntHashMap\n     private float loadFactor;\n \n     /**\n-     * Innerclass that acts as a datastructure to create a new entry in the\n-     * table.\n+     * <p>Innerclass that acts as a datastructure to create a new entry in the\n+     * table.</p>\n      */\n     private static class Entry\n     {\n         Entry next;\n \n         /**\n-         * Create a new entry with the given values.\n+         * <p>Create a new entry with the given values.</p>\n          *\n          * @param hash The code used to hash the object with\n          * @param key The key used to enter this in the table\n     }\n \n     /**\n-     * Constructs a new, empty hashtable with a default capacity and load\n-     * factor, which is <tt>20</tt> and <tt>0.75</tt> respectively.\n+     * <p>Constructs a new, empty hashtable with a default capacity and load\n+     * factor, which is <code>20</code> and <code>0.75</code> respectively.</p>\n      */\n     public IntHashMap()\n     {\n     }\n \n     /**\n-     * Constructs a new, empty hashtable with the specified initial capacity\n-     * and default load factor, which is <tt>0.75</tt>.\n+     * <p>Constructs a new, empty hashtable with the specified initial capacity\n+     * and default load factor, which is <code>0.75</code>.</p>\n      *\n      * @param  initialCapacity the initial capacity of the hashtable.\n      * @throws IllegalArgumentException if the initial capacity is less\n     }\n \n     /**\n-     * Constructs a new, empty hashtable with the specified initial\n-     * capacity and the specified load factor.\n+     * <p>Constructs a new, empty hashtable with the specified initial\n+     * capacity and the specified load factor.</p>\n      *\n      * @param initialCapacity the initial capacity of the hashtable.\n      * @param loadFactor the load factor of the hashtable.\n     }\n \n     /**\n-     * Returns the number of keys in this hashtable.\n+     * <p>Returns the number of keys in this hashtable.</p>\n      *\n      * @return  the number of keys in this hashtable.\n      */\n     }\n \n     /**\n-     * Tests if this hashtable maps no keys to values.\n+     * <p>Tests if this hashtable maps no keys to values.</p>\n      *\n      * @return  <code>true</code> if this hashtable maps no keys to values;\n      *          <code>false</code> otherwise.\n     }\n \n     /**\n-     * Tests if some key maps into the specified value in this hashtable.\n+     * <p>Tests if some key maps into the specified value in this hashtable.\n      * This operation is more expensive than the <code>containsKey</code>\n-     * method.<p>\n-     *\n-     * Note that this method is identical in functionality to containsValue,\n-     * (which is part of the Map interface in the collections framework).\n+     * method.</p>\n+     *\n+     * <p>Note that this method is identical in functionality to containsValue,\n+     * (which is part of the Map interface in the collections framework).</p>\n      *\n      * @param      value   a value to search for.\n      * @return     <code>true</code> if and only if some key maps to the\n     }\n \n     /**\n-     * Returns true if this HashMap maps one or more keys to this value.<p>\n-     *\n-     * Note that this method is identical in functionality to contains\n-     * (which predates the Map interface).\n+     * <p>Returns <code>true</code> if this HashMap maps one or more keys\n+     * to this value.</p>\n+     *\n+     * <p>Note that this method is identical in functionality to contains\n+     * (which predates the Map interface).</p>\n      *\n      * @param value value whose presence in this HashMap is to be tested.\n      * @see    java.util.Map\n     }\n \n     /**\n-     * Tests if the specified object is a key in this hashtable.\n+     * <p>Tests if the specified object is a key in this hashtable.</p>\n      *\n      * @param  key  possible key.\n      * @return <code>true</code> if and only if the specified object is a\n     }\n \n     /**\n-     * Returns the value to which the specified key is mapped in this map.\n+     * <p>Returns the value to which the specified key is mapped in this map.</p>\n      *\n      * @param   key   a key in the hashtable.\n      * @return  the value to which the key is mapped in this hashtable;\n     }\n \n     /**\n-     * Increases the capacity of and internally reorganizes this\n+     * <p>Increases the capacity of and internally reorganizes this\n      * hashtable, in order to accommodate and access its entries more\n-     * efficiently.  This method is called automatically when the\n-     * number of keys in the hashtable exceeds this hashtable's capacity\n-     * and load factor.\n+     * efficiently.</p>\n+     *\n+     * <p>This method is called automatically when the number of keys\n+     * in the hashtable exceeds this hashtable's capacity and load\n+     * factor.</p>\n      */\n     protected void rehash()\n     {\n     }\n \n     /**\n-     * Maps the specified <code>key</code> to the specified\n+     * <p>Maps the specified <code>key</code> to the specified\n      * <code>value</code> in this hashtable. The key cannot be\n-     * <code>null</code>. <p>\n-     *\n-     * The value can be retrieved by calling the <code>get</code> method\n-     * with a key that is equal to the original key.\n+     * <code>null</code>. </p>\n+     *\n+     * <p>The value can be retrieved by calling the <code>get</code> method\n+     * with a key that is equal to the original key.</p>\n      *\n      * @param key     the hashtable key.\n      * @param value   the value.\n     }\n \n     /**\n-     * Removes the key (and its corresponding value) from this\n-     * hashtable. This method does nothing if the key is not in the hashtable.\n+     * <p>Removes the key (and its corresponding value) from this\n+     * hashtable.</p>\n+     *\n+     * <p>This method does nothing if the key is not present in the\n+     * hashtable.</p>\n      *\n      * @param   key   the key that needs to be removed.\n      * @return  the value to which the key had been mapped in this hashtable,\n     }\n \n     /**\n-     * Clears this hashtable so that it contains no keys.\n+     * <p>Clears this hashtable so that it contains no keys.</p>\n      */\n     public synchronized void clear()\n     {\n--- a/src/java/org/apache/commons/lang/NotImplementedException.java\n+++ b/src/java/org/apache/commons/lang/NotImplementedException.java\n package org.apache.commons.lang;\n \n /**\n- * Thrown to indicate that a method has not been implemented.\n+ * <p>Thrown to indicate that a method has not been implemented.</p>\n  * \n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: NotImplementedException.java,v 1.2 2003/05/16 16:14:17 scolebourne Exp $\n+ * @version $Id: NotImplementedException.java,v 1.3 2003/07/14 22:25:02 bayard Exp $\n  */\n public class NotImplementedException extends UnsupportedOperationException {\n \n     /**\n-     * Constructes the exception with the specified class.\n+     * <p>Constructes the exception with the specified class.</p>\n      * \n      * @param clazz  the <code>Class</code> that has not implemented the method\n      */\n     }\n \n     /**\n-     * Constructs the exception with the specified message.\n+     * <p>Constructs the exception with the specified message.</p>\n      * \n      * @param msg  the exception message.\n      */\n--- a/src/java/org/apache/commons/lang/NullArgumentException.java\n+++ b/src/java/org/apache/commons/lang/NullArgumentException.java\n package org.apache.commons.lang;\n \n /**\n- * Thrown to indicate that an argument was null and should not have been.\n+ * <p>Thrown to indicate that an argument was <code>null</code> and should\n+ * not have been.</p>\n  * \n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: NullArgumentException.java,v 1.2 2003/05/16 16:14:17 scolebourne Exp $\n+ * @version $Id: NullArgumentException.java,v 1.3 2003/07/14 22:25:02 bayard Exp $\n  */\n public class NullArgumentException extends IllegalArgumentException {\n \n \t/**\n-\t * Instantiates with the given argument name.\n-     * \n-\t * @param argName  the name of the argument that was null.\n+\t * <p>Instantiates with the given argument name.</p>\n+         *\n+\t * @param argName  the name of the argument that was <code>null</code>.\n \t */\n \tpublic NullArgumentException(String argName) {\n \t\tsuper(argName + \" cannot be null.\");\n--- a/src/java/org/apache/commons/lang/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/NumberRange.java\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Revision: 1.8 $ $Date: 2003/06/08 14:10:54 $\n+ * @version $Revision: 1.9 $ $Date: 2003/07/14 22:25:03 $\n  * \n  * @deprecated Use one of the Range classes in org.apache.commons.lang.math.\n  *             Class will be removed in Commons Lang 3.0.\n \n \n     /**\n-     * <p>Constructs a new <code>NumberRange</code> using the specified\n-     * number as both the minimum and maximum in this range.</p>\n+     * <p>Constructs a new <code>NumberRange</code> using\n+     * <code>number</code> as both the minimum and maximum in\n+     * this range.</p>\n      *\n      * @param num the number to use for this range\n      * @throws NullPointerException if the number is <code>null</code>\n      * <p>Constructs a new <code>NumberRange</code> with the specified\n      * minimum and maximum numbers.</p>\n      * \n-     * <p>If the maximum is less than the minimum, the range will be constructed\n-     * from the minimum value to the minimum value, not what you would expect!.</p>\n+     * <p><em>If the maximum is less than the minimum, the range will be constructed\n+     * from the minimum value to the minimum value, not what you would expect!.</em></p>\n      *\n      * @param min the minimum number in this range\n      * @param max the maximum number in this range\n     }\n \n     /**\n-     * <p>Indicates whether some other <code>Object</code> is \"equal\" to\n-     * this one.</p>\n+     * <p>Indicates whether some other <code>Object</code> is\n+     * &quot;equal&quot; to this one.</p>\n      *\n      * @param obj the reference object with which to compare\n      * @return <code>true</code> if this object is the same as the obj\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ObjectUtils.java,v 1.8 2003/02/22 20:19:16 scolebourne Exp $\n+ * @version $Id: ObjectUtils.java,v 1.9 2003/07/14 22:25:03 bayard Exp $\n  */\n public class ObjectUtils {\n     \n     }\n \n     /**\n-     * <p>Class used as a null placeholder where null has another meaning.</p>\n+     * <p>Class used as a null placeholder where <code>null</code>\n+     * has another meaning.</p>\n      *\n      * <p>For example, in a <code>HashMap</code> the\n      * {@link java.util.HashMap#get(java.lang.Object)} method returns\n         private static final long serialVersionUID = 7092611880189329093L;\n         \n         /**\n-         * Restricted constructor - singleton\n+         * Restricted constructor - singleton.\n          */\n         Null() {\n         }\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n  * {@link HashCodeBuilder}.</p>\n  *\n  * <p>Two object that compare equal using equals should normally compare \n- * equals using compareTo</p>.\n+ * equals using <code>compareTo</code></p>.\n  *\n  * <p>All relevant fields should be included in the calculation of the\n  * comparison. Derived fields may be ignored. The same fields, in the same\n  * <code>equals</code>.</p>\n  *\n  * <p>Typical use for the code is as follows:</p>\n+ *\n  * <pre>\n  *  public int compareTo(Object o) {\n  *    MyClass rhs = (MyClass) o;\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: CompareToBuilder.java,v 1.15 2003/06/24 21:14:50 scolebourne Exp $\n+ * @version $Id: CompareToBuilder.java,v 1.16 2003/07/14 22:25:03 bayard Exp $\n  */\n public class CompareToBuilder {\n     \n     }\n \n     /**\n-     * Appends the fields and values defined by the given object of the\n-     * given Class.\n+     * <p>Appends the fields and values defined by the given object of the\n+     * given Class.</p>\n      * \n      * @param lhs  the left hand object\n      * @param rhs  the right hand object\n     \n     /**\n      * <p>Comparison of two Object references.</p>\n-     * <ol>\n-     * <li>Check if Objects are same using <code>==</code>\n-     * <li>Check if either is null, a null object is less than a non-null\n-     * <li>Check the object contents\n+     *\n+     * <ol>\n+     *  <li>Check if Objects are same using <code>==</code></li>\n+     *  <li>Check if either is null, a null object is less than a non-null</li>\n+     *  <li>Check the object contents</li>\n      * </ol>\n      * \n      * <p>The first parameter to be compared must either be an array or implement\n-     * Comparable.</p>\n+     * <code>Comparable</code>.</p>\n      *\n      * @param lhs  the Object from <code>this</code> object\n      * @param rhs  the Object from the other object\n     /**\n      * <p>Comparison of two Object references.</p>\n      * <ol>\n-     * <li>Check if Objects are same using <code>==</code>\n-     * <li>Check if either is null, a null object is less than a non-null\n-     * <li>Check the object contents\n+     *  <li>Check if Objects are same using <code>==</code></li>\n+     *  <li>Check if either is null, a null object is less than a non-null</li>\n+     *  <li>Check the object contents</li>\n      * </ol>\n      * \n      * <p>If the first parameter to be compared is an array, the array methods will\n      * be used. Otherwise the comparator will be used. If the comparator is null, \n-     * the <code>lhs</code> will be cast to Comparable.</p>\n+     * the <code>lhs</code> will be cast to <code>Comparable</code>.</p>\n      *\n      * @param lhs  the Object from <code>this</code> object\n      * @param rhs  the Object from the other object\n     }\n \n     /**\n-     * <p>Test if two <code>long</code>s are <, > or ==.</p>\n+     * <p>Test if two <code>long</code>s are &lt;, &gt; or ==.</p>\n      *\n      * @param lhs  the <code>long</code> from <code>this</code> object\n      * @param rhs  the <code>long</code> from the other object\n     }\n \n     /**\n-     * <p>Test if two <code>int</code>s are <, > or ==.</p>\n+     * <p>Test if two <code>int</code>s are &lt;, &gt; or ==.</p>\n      *\n      * @param lhs  the <code>int</code> from <code>this</code> object\n      * @param rhs  the <code>int</code> from the other object\n     }\n \n     /**\n-     * <p>Test if two <code>short</code>s are <, > or ==.</p>\n+     * <p>Test if two <code>short</code>s are &lt;, &gt; or ==.</p>\n      * \n      * @param lhs  the <code>short</code> from <code>this</code> object\n      * @param rhs  the <code>short</code> from the other object\n     }\n \n     /**\n-     * <p>Test if two <code>char</code>s are <, > or ==.</p>\n+     * <p>Test if two <code>char</code>s are &lt;, &gt; or ==.</p>\n      *\n      * @param lhs  the <code>char</code> from <code>this</code> object\n      * @param rhs  the <code>char</code> from the other object\n     }\n \n     /**\n-     * <p>Test if two <code>byte</code>s are <, > or ==.</p>\n+     * <p>Test if two <code>byte</code>s are &lt, &gt; or ==.</p>\n      * \n      * @param lhs  the <code>byte</code> from <code>this</code> object\n      * @param rhs  the <code>byte</code> from the other object\n     }\n \n     /**\n-     * <p>Test if two <code>double</code>s are <, > or ==.</p>\n+     * <p>Test if two <code>double</code>s are &lt;, &gt; or ==.</p>\n      *\n      * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n      *\n     }\n \n     /**\n-     * <p>Test if two <code>float</code>s are <, > or ==.</p>\n+     * <p>Test if two <code>float</code>s are &lt;, &gt; or ==.</p>\n      *\n      * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n      *\n     }\n \n     /**\n-     * <p>Test if two <code>booleans</code>s are <, > or ==.</p>\n+     * <p>Test if two <code>booleans</code>s are &lt;, &gt; or ==.</p>\n      *\n      * @param lhs  the <code>boolean</code> from <code>this</code> object\n      * @param rhs  the <code>boolean</code> from the other object\n \n     /**\n      * <p>Deep comparison of an <code>Object</code> array.</p>\n-     * <ol>\n-     * <li>Check if arrays are same using <code>==</code>\n-     * <li>Check if either is null, a null array is less than a non-null\n-     * <li>Check array length, a short length array is less than a long length array\n-     * <li>Check array contents element by element using {@link #append(long, long)}\n+     *\n+     * <ol>\n+     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check array length, a short length array is less than a long length array</li>\n+     *  <li>Check array contents element by element using {@link #append(long, long)}</li>\n      * </ol>\n      *\n      * <p>This method will also will be called for the top level of multi-dimensional,\n     \n     /**\n      * <p>Deep comparison of an <code>Object</code> array.</p>\n-     * <ol>\n-     * <li>Check if arrays are same using <code>==</code>\n-     * <li>Check if either is null, a null array is less than a non-null\n-     * <li>Check array length, a shorter length array is less than a longer length array\n-     * <li>Check array contents element by element using {@link #append(Object, Object, Comparator)}\n+     *\n+     * <ol>\n+     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n+     *  <li>Check array contents element by element using {@link #append(Object, Object, Comparator)}</li>\n      * </ol>\n      *\n      * <p>This method will also will be called for the top level of multi-dimensional,\n \n     /**\n      * <p>Deep comparison of a <code>long</code> array.</p>\n-     * <ol>\n-     * <li>Check if arrays are same using <code>==</code>\n-     * <li>Check if either is null, a null array is less than a non-null\n-     * <li>Check array length, a shorter length array is less than a longer length array\n-     * <li>Check array contents element by element using {@link #append(long, long)}\n+     *\n+     * <ol>\n+     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n+     *  <li>Check array contents element by element using {@link #append(long, long)}</li>\n      * </ol>\n      *\n      * @param lhs  array from <code>this</code> object\n \n     /**\n      * <p>Deep comparison of an <code>int</code> array.</p>\n-     * <ol>\n-     * <li>Check if arrays are same using <code>==</code>\n-     * <li>Check if either is null, a null array is less than a non-null\n-     * <li>Check array length, a shorter length array is less than a longer length array\n-     * <li>Check array contents element by element using {@link #append(int, int)}\n+     *\n+     * <ol>\n+     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n+     *  <li>Check array contents element by element using {@link #append(int, int)}</li>\n      * </ol>\n      *\n      * @param lhs  array from <code>this</code> object\n \n     /**\n      * <p>Deep comparison of a <code>short</code> array.</p>\n-     * <ol>\n-     * <li>Check if arrays are same using <code>==</code>\n-     * <li>Check if either is null, a null array is less than a non-null\n-     * <li>Check array length, a shorter length array is less than a longer length array\n-     * <li>Check array contents element by element using {@link #append(short, short)}\n+     *\n+     * <ol>\n+     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n+     *  <li>Check array contents element by element using {@link #append(short, short)}</li>\n      * </ol>\n      *\n      * @param lhs  array from <code>this</code> object\n \n     /**\n      * <p>Deep comparison of a <code>char</code> array.</p>\n-     * <ol>\n-     * <li>Check if arrays are same using <code>==</code>\n-     * <li>Check if either is null, a null array is less than a non-null\n-     * <li>Check array length, a shorter length array is less than a longer length array\n-     * <li>Check array contents element by element using {@link #append(char, char)}\n+     *\n+     * <ol>\n+     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n+     *  <li>Check array contents element by element using {@link #append(char, char)}</li>\n      * </ol>\n      *\n      * @param lhs  array from <code>this</code> object\n \n     /**\n      * <p>Deep comparison of a <code>byte</code> array.</p>\n-     * <ol>\n-     * <li>Check if arrays are same using <code>==</code>\n-     * <li>Check if either is null, a null array is less than a non-null\n-     * <li>Check array length, a shorter length array is less than a longer length array\n-     * <li>Check array contents element by element using {@link #append(byte, byte)}\n+     *\n+     * <ol>\n+     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n+     *  <li>Check array contents element by element using {@link #append(byte, byte)}</li>\n      * </ol>\n      *\n      * @param lhs  array from <code>this</code> object\n \n     /**\n      * <p>Deep comparison of a <code>double</code> array.</p>\n-     * <ol>\n-     * <li>Check if arrays are same using <code>==</code>\n-     * <li>Check if either is null, a null array is less than a non-null\n-     * <li>Check array length, a shorter length array is less than a longer length array\n-     * <li>Check array contents element by element using {@link #append(double, double)}\n+     *\n+     * <ol>\n+     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n+     *  <li>Check array contents element by element using {@link #append(double, double)}</li>\n      * </ol>\n      *\n      * @param lhs  array from <code>this</code> object\n \n     /**\n      * <p>Deep comparison of a <code>float</code> array.</p>\n-     * <ol>\n-     * <li>Check if arrays are same using <code>==</code>\n-     * <li>Check if either is null, a null array is less than a non-null\n-     * <li>Check array length, a shorter length array is less than a longer length array\n-     * <li>Check array contents element by element using {@link #append(float, float)}\n+     *\n+     * <ol>\n+     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n+     *  <li>Check array contents element by element using {@link #append(float, float)}\n      * </ol>\n      *\n      * @param lhs  array from <code>this</code> object\n \n     /**\n      * <p>Deep comparison of a <code>boolean/code> array.</p>\n-     * <ol>\n-     * <li>Check if arrays are same using <code>==</code>\n-     * <li>Check if either is null, a null array is less than a non-null\n-     * <li>Check array length, a shorter length array is less than a longer length array\n-     * <li>Check array contents element by element using {@link #append(boolean, boolean)}\n+     *\n+     * <ol>\n+     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n+     *  <li>Check array contents element by element using {@link #append(boolean, boolean)}</li>\n      * </ol>\n      *\n      * @param lhs  array from <code>this</code> object\n     }\n \n     /**\n-     * <p>Return a negative integer if the Object is less than, a positive\n-     * integer if the Object is greater than, or <code>0</code> if the\n-     * Object is equal.\n+     * <p>Return a negative integer if the <code>Object</code> is less\n+     * than, a positive integer if the <code>Object</code> is greater than,\n+     * or <code>0</code> if the <code>Object</code> is equal.</p>\n      * \n      * @return int - a negative integer, zero, or a positive integer as this \n      *  Object is less than, equal to, or greater than the specified Object.\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: EqualsBuilder.java,v 1.13 2003/04/18 09:12:16 ggregory Exp $\n+ * @version $Id: EqualsBuilder.java,v 1.14 2003/07/14 22:25:03 bayard Exp $\n  */\n public class EqualsBuilder {\n     /**\n     //-------------------------------------------------------------------------\n \n     /**\n-     * <p>This method uses reflection to determine if the two Object are equal.</p>\n+     * <p>This method uses reflection to determine if the two <code>Object</code>s\n+     * are equal.</p>\n      *\n      * <p>It uses <code>Field.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n     }\n \n     /**\n-     * <p>This method uses reflection to determine if the two Object are equal.</p>\n+     * <p>This method uses reflection to determine if the two <code>Object</code>s\n+     * are equal.</p>\n      *\n      * <p>It uses <code>Field.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n      *\n      * <p>If the TestTransients parameter is set to <code>true</code>, transient\n      * members will be tested, otherwise they are ignored, as they are likely\n-     * derived fields, and not part of the value of the Object.</p>\n+     * derived fields, and not part of the value of the <code>Object</code>.</p>\n      *\n      * <p>Static fields will not be tested. Superclass fields will be included.</p>\n      *\n     }\n \n     /**\n-     * <p>This method uses reflection to determine if the two Object are equal.</p>\n+     * <p>This method uses reflection to determine if the two <code>Object</code>s\n+     * are equal.</p>\n      *\n      * <p>It uses <code>Field.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n      *\n      * <p>If the testTransients parameter is set to <code>true</code>, transient\n      * members will be tested, otherwise they are ignored, as they are likely\n-     * derived fields, and not part of the value of the Object.</p>\n+     * derived fields, and not part of the value of the <code>Object</code>.</p>\n      *\n      * <p>Static fields will not be included. Superclass fields will be appended\n      * up to and including the specified superclass. A null superclass is treated\n      * @param lhs  <code>this</code> object\n      * @param rhs  the other object\n      * @param testTransients  whether to include transient fields\n-     * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null\n+     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n+     *  may be <code>null</code>\n      * @return <code>true</code> if the two Objects have tested equals.\n      */\n     public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass) {\n     }\n \n     /**\n-     * Appends the fields and values defined by the given object of the\n-     * given Class.\n+     * <p>Appends the fields and values defined by the given object of the\n+     * given Class.</p>\n      * \n      * @param lhs  the left hand object\n      * @param rhs  the right hand object\n     //-------------------------------------------------------------------------\n \n     /**\n-     * <p>Adds the result of super.equals() to this builder.</p>\n+     * <p>Adds the result of <code>super.equals()</code> to this builder.</p>\n      *\n      * @param superEquals  the result of calling <code>super.equals()</code>\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * <p>Performs a deep comparison of two Object arrays.</p>\n+     * <p>Performs a deep comparison of two <code>Object</code> arrays.</p>\n      *\n      * <p>This also will be called for the top level of\n      * multi-dimensional, ragged, and multi-typed arrays.</p>\n     }\n \n     /**\n-     * <p>Deep comparison of array of <code>long</code> Length and all values\n-     * are compared.</p>\n+     * <p>Deep comparison of array of <code>long</code>. Length and all\n+     * values are compared.</p>\n      *\n      * <p>The method {@link #append(long, long)} is used.</p>\n      *\n     }\n \n     /**\n-     * <p>Deep comparison of array of <code>int</code> Length and all values\n-     * are compared.</p>\n+     * <p>Deep comparison of array of <code>int</code>. Length and all\n+     * values are compared.</p>\n      *\n      * <p>The method {@link #append(int, int)} is used.</p>\n      *\n     }\n \n     /**\n-     * <p>Deep comparison of array of <code>short</code> Length and all values\n-     * are compared.</p>\n+     * <p>Deep comparison of array of <code>short</code>. Length and all\n+     * values are compared.</p>\n      *\n      * <p>The method {@link #append(short, short)} is used.</p>\n      *\n     }\n \n     /**\n-     * <p>Deep comparison of array of <code>char</code> Length and all values\n-     * are compared.</p>\n+     * <p>Deep comparison of array of <code>char</code>. Length and all\n+     * values are compared.</p>\n      *\n      * <p>The method {@link #append(char, char)} is used.</p>\n      *\n     }\n \n     /**\n-     * <p>Deep comparison of array of <code>byte</code> Length and all values\n-     * are compared.</p>\n+     * <p>Deep comparison of array of <code>byte</code>. Length and all\n+     * values are compared.</p>\n      *\n      * <p>The method {@link #append(byte, byte)} is used.</p>\n      *\n     }\n \n     /**\n-     * <p>Deep comparison of array of <code>double</code> Length and all values\n-     * are compared.</p>\n+     * <p>Deep comparison of array of <code>double</code>. Length and all\n+     * values are compared.</p>\n      *\n      * <p>The method {@link #append(double, double)} is used.</p>\n      *\n     }\n \n     /**\n-     * <p>Deep comparison of array of <code>float</code> Length and all values\n-     * are compared.</p>\n+     * <p>Deep comparison of array of <code>float</code>. Length and all\n+     * values are compared.</p>\n      *\n      * <p>The method {@link #append(float, float)} is used.</p>\n      *\n     }\n \n     /**\n-     * <p>Deep comparison of array of <code>boolean</code> Length and all values\n-     * are compared.</p>\n+     * <p>Deep comparison of array of <code>boolean</code>. Length and all\n+     * values are compared.</p>\n      *\n      * <p>The method {@link #append(boolean, boolean)} is used.</p>\n      *\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n  * , by Joshua Bloch. Writing a good <code>hashCode</code> is actually quite\n  * difficult. This class aims to simplify the process.</p>\n  *\n- * <p> All relevant fields from the object should be included in the\n+ * <p>All relevant fields from the object should be included in the\n  * <code>hashCode</code>. Derived fields may be excluded. In general, any\n  * field used in the equals method must be used in the <code>hashCode</code>\n  * method.</p>\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: HashCodeBuilder.java,v 1.12 2003/04/18 09:12:16 ggregory Exp $\n+ * @version $Id: HashCodeBuilder.java,v 1.13 2003/07/14 22:25:03 bayard Exp $\n  */\n public class HashCodeBuilder {\n \n     /**\n-     * Constant to use in building the hashCode\n+     * Constant to use in building the hashCode.\n      */\n     private final int iConstant;\n     /**\n-     * Running total of the hashCode\n+     * Running total of the hashCode.\n      */\n     private int iTotal = 0;\n \n      * also not as efficient as testing explicitly.</p>\n      *\n      * <p>Transient members will be not be used, as they are likely derived\n-     * fields, and not part of the value of the Object.</p>\n+     * fields, and not part of the value of the <code>Object</code>.</p>\n      *\n      * <p>Static fields will not be tested. Superclass fields will be included.</p>\n      *\n      *\n      * <P>If the TestTransients parameter is set to <code>true</code>, transient\n      * members will be tested, otherwise they are ignored, as they are likely\n-     * derived fields, and not part of the value of the Object.</p>\n+     * derived fields, and not part of the value of the <code>Object</code>.</p>\n      *\n      * <p>Static fields will not be tested. Superclass fields will be included.</p>\n      *\n      * also not as efficient as testing explicitly.</p>\n      *\n      * <p>Transient members will be not be used, as they are likely derived\n-     * fields, and not part of the value of the Object.</p>\n+     * fields, and not part of the value of the <code>Object</code>.</p>\n      *\n      * <p>Static fields will not be tested. Superclass fields will be included.</p>\n      *\n      *\n      * <p>If the TestTransients parameter is set to <code>true</code>, transient\n      * members will be tested, otherwise they are ignored, as they are likely\n-     * derived fields, and not part of the value of the Object.</p>\n+     * derived fields, and not part of the value of the <code>Object</code>.</p>\n      *\n      * <p>Static fields will not be tested. Superclass fields will be included.</p>\n      *\n      *\n      * <p>If the TestTransients parameter is set to <code>true</code>, transient\n      * members will be tested, otherwise they are ignored, as they are likely\n-     * derived fields, and not part of the value of the Object.</p>\n+     * derived fields, and not part of the value of the <code>Object</code>.</p>\n      *\n      * <p>Static fields will not be included. Superclass fields will be included\n      * up to and including the specified superclass. A null superclass is treated\n      * @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier\n      * @param object  the Object to create a <code>hashCode</code> for\n      * @param testTransients  whether to include transient fields\n-     * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null\n+     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n+     *  may be <code>null</code>\n      * @return int hash code\n      * @throws IllegalArgumentException if the Object is <code>null</code>\n      * @throws IllegalArgumentException if the number is zero or even\n     }\n \n     /**\n-     * Appends the fields and values defined by the given object of the\n-     * given Class.\n+     * <p>Appends the fields and values defined by the given object of the\n+     * given <code>Class</code>.</p>\n      * \n      * @param object  the object to append details of\n      * @param clazz  the class to append details of\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n  * \n  * <p>A subclass can control field output by overriding the methods:\n  * <ul> \n- * <li>{@link #accept(java.lang.reflect.Field)}</li>\n- * <li>{@link #getValue(java.lang.reflect.Field)}</li>\n+ *  <li>{@link #accept(java.lang.reflect.Field)}</li>\n+ *  <li>{@link #getValue(java.lang.reflect.Field)}</li>\n  * </ul>\n  * </p>\n  * \n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: ReflectionToStringBuilder.java,v 1.1 2003/06/03 03:51:56 ggregory Exp $\n+ * @version $Id: ReflectionToStringBuilder.java,v 1.2 2003/07/14 22:25:03 bayard Exp $\n  */\n public class ReflectionToStringBuilder extends ToStringBuilder {\n \n     /**\n-     * A registry of objects used by <code>reflectionToString</code> methods to detect cyclical object references \n-     * and avoid infinite loops.\n+     * A registry of objects used by <code>reflectionToString</code> methods to detect\n+     * cyclical object references and avoid infinite loops.\n      */\n     private static ThreadLocal registry = new ThreadLocal() {\n         protected synchronized Object initialValue() {\n     };\n \n     /**\n-     * Returns the registry of objects being traversed by the \n-     * <code>reflectionToString</code> methods in the current thread.\n+     * <p>Returns the registry of objects being traversed by the\n+     * <code>reflectionToString</code> methods in the current thread.</p>\n+     *\n      * @return Set the registry of objects being traversed \n      */\n     static Set getRegistry() {\n     }\n \n     /**\n-     * Returns <code>true</code> if the registry contains the given object.\n-     * Used by the reflection methods to avoid infinite loops.\n+     * <p>Returns <code>true</code> if the registry contains the given object.\n+     * Used by the reflection methods to avoid infinite loops.</p>\n      * \n      * @param value The object to lookup in the registry.\n      * @return boolean <code>true</code> if the registry contains the given object.\n      *\n      * <p>Static fields will not be included. Superclass fields will be appended.</p>\n      *\n-     * <p>\n-     * If the style is <code>null</code>, the default\n+     * <p>If the style is <code>null</code>, the default\n      * <code>ToStringStyle</code> is used.</p>\n      * \n      * @param object  the Object to be output\n     }\n \n     /**\n-     * Unregisters the given object.\n-     * Used by the reflection methods to avoid infinite loops.\n+     * <p>Unregisters the given object.</p>\n+     *\n+     * <p>Used by the reflection methods to avoid infinite loops.</p>\n      * \n      * @param value The object to unregister.\n      */\n     /**\n      * Returns whether or not to append the given <code>Field</code>.\n      * <ul>\n-     * <li>Static fields are not appended.</li>\n-     * <li>Transient fields are appended only if {@link #isAppendTransients()} returns <code>true</code>.\n-     * <li>Inner class fields are not appened.</li>\n+     *  <li>Static fields are not appended.</li>\n+     *  <li>Transient fields are appended only if {@link #isAppendTransients()} returns <code>true</code>.\n+     *  <li>Inner class fields are not appened.</li>\n      * </ul>\n      * @param field The Field to test.\n      * @return Whether or not to append the given <code>Field</code>.\n     }\n \n     /**\n-     * Appends the fields and values defined by the given object of the\n-     * given Class. If a cycle is detected as an objects is \"toString()'ed\",\n+     * <p>Appends the fields and values defined by the given object of the\n+     * given Class.</p>\n+     *\n+     * <p>If a cycle is detected as an objects is &quot;toString()'ed&quot;,\n      * such an object is rendered as if <code>Object.toString()</code> \n-     * had been called and not implemented by the object.\n+     * had been called and not implemented by the object.</p>\n      * \n      * @param clazz The class of object parameter\n      */\n     }\n     \n     /**\n-     * Gets the last super class to stop appending fields for.\n+     * <p>Gets the last super class to stop appending fields for.</p>\n      * \n      * @return The last super class to stop appending fields for.\n      */\n     }\n \n     /**\n-     * Calls <code>java.lang.reflect.Field.get(Object)</code>\n+     * <p>Calls <code>java.lang.reflect.Field.get(Object)</code></p>\n+     *\n      * @see java.lang.reflect.Field#get(Object)\n      * @throws IllegalArgumentException\n      * @throws IllegalAccessException\n     }\n \n     /**\n-     * Returns whether or not to append transient fields.\n+     * <p>Returns whether or not to append transient fields.</p>\n      * \n      * @return Whether or not to append transient fields.\n      */\n     }\n \n     /**\n-     * Registers this builder's source object to avoid infinite loops processing circular object references.\n+     * <p>Registers this builder's source object to avoid infinite\n+     * loops processing circular object references.</p>\n      */\n     void registerObject() {\n         register(this.getObject());\n     }\n \n     /**\n-     * Sets whether or not to append transient fields.\n+     * <p>Sets whether or not to append transient fields.</p>\n      * \n      * @param appendTransients Whether or not to append transient fields.\n      */\n     }\n \n     /**\n-     * Sets the last super class to stop appending fields for.\n+     * <p>Sets the last super class to stop appending fields for.</p>\n      * \n      * @param clazz The last super class to stop appending fields for.\n      */\n     }\n \n     /**\n-     * Unegisters this builder's source object to avoid infinite loops processing circular object references.\n+     * <p>Unegisters this builder's source object to avoid infinite\n+     * loops processing circular object references.</p>\n      */\n     void unregisterObject() {\n         unregister(this.getObject());\n--- a/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n  *\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: StandardToStringStyle.java,v 1.8 2003/03/23 17:54:16 scolebourne Exp $\n+ * @version $Id: StandardToStringStyle.java,v 1.9 2003/07/14 22:25:03 bayard Exp $\n  */\n public class StandardToStringStyle extends ToStringStyle {\n     \n      * <p><code>Null</code> is accepted, but will be converted\n      * to a empty String.</p>\n      *\n-     * @param nullText  the new text to output when null found\n+     * @param nullText  the new text to output when <code>null</code> found\n      */\n     public void setNullText(String nullText) {\n         super.setNullText(nullText);\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n  * <p>This class enables a good and consistent <code>toString()</code> to be built for any\n  * class or object. This class aims to simplify the process by:</p>\n  * <ul>\n- * <li>allowing field names\n- * <li>handling all types consistently\n- * <li>handling nulls consistently\n- * <li>outputting arrays and multi-dimensional arrays\n- * <li>enabling the detail level to be controlled for Objects and Collections\n- * <li>handling class hierarchies\n+ *  <li>allowing field names</li>\n+ *  <li>handling all types consistently</li>\n+ *  <li>handling nulls consistently</li>\n+ *  <li>outputting arrays and multi-dimensional arrays</li>\n+ *  <li>enabling the detail level to be controlled for Objects and Collections</li>\n+ *  <li>handling class hierarchies</li>\n  * </ul>\n  *\n- * <p>To use this class write code as follows:\n+ * <p>To use this class write code as follows:</p>\n+ *\n  * <pre>\n  * public class Person {\n  *   String name;\n  *   }\n  * }\n  * </pre>\n+ *\n  * <p>This will produce a toString of the format:\n  * <code>Person@7f54[name=Stephen,age=29,smoker=false]</code></p>\n  * \n  * slower than testing explicitly.</p>\n  *\n  * <p>A typical invocation for this method would look like:</p>\n+ *\n  * <pre>\n  * public String toString() {\n  *   return ToStringBuilder.reflectionToString(this);\n  * </pre>\n  *\n  * <p>You can also use the builder to debug 3rd party objects:</p>\n+ *\n  * <pre>\n  * System.out.println(\"An object: \" + ToStringBuilder.reflectionToString(anObject));\n  * </pre>\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: ToStringBuilder.java,v 1.23 2003/06/23 17:04:39 ggregory Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.24 2003/07/14 22:25:03 bayard Exp $\n  */\n public class ToStringBuilder {\n \n     /**\n-     * The default style of output to use\n+     * The default style of output to use.\n      */\n     private static ToStringStyle defaultStyle = ToStringStyle.DEFAULT_STYLE;\n \n     }\n \n     /**\n-     * Forwards to ReflectionToStringBuilder.\n+     * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>\n      * \n      * @see ReflectionToStringBuilder#toString(Object)\n      */\n     }\n \n     /**\n-     * Forwards to ReflectionToStringBuilder.\n+     * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>\n      * \n      * @see ReflectionToStringBuilder#toString(Object,ToStringStyle)\n      */\n     }\n \n     /**\n-     * Forwards to ReflectionToStringBuilder.\n+     * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>\n      * \n      * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean)\n      */\n     }\n \n     /**\n-     * Forwards to ReflectionToStringBuilder.\n+     * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>\n      * \n      * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean,Class)\n      */\n      * <p>Append the <code>toString</code> from another object.</p>\n      * \n      * <p>This method is useful where a class delegates most of the implementation of\n-     * it's properties to another class. You can then call toString() on the other \n-     * class and pass the result into this method.</p>\n+     * it's properties to another class. You can then call <code>toString()</code> on\n+     * the other class and pass the result into this method.</p>\n      * \n      * <pre>\n      *   private AnotherObject delegate;\n      * <p>This method asumes that the other object uses the same <code>ToStringStyle</code>\n      * as this one.</p>\n      * \n-     * <p>If the <code>toString</code> is null, no change is made.</p>\n+     * <p>If the <code>toString</code> is <code>null</code>, no change is made.</p>\n      *\n      * @param toString  the result of <code>toString()</code> on another object\n      * @return this\n     }\n \n     /**\n-     * Returns the object being output.\n+     * <p>Returns the <code>Object</code> being output.</p>\n      * \n      * @return The object being output.\n      */\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: ToStringStyle.java,v 1.14 2003/06/03 03:51:56 ggregory Exp $\n+ * @version $Id: ToStringStyle.java,v 1.15 2003/07/14 22:25:04 bayard Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n     \n      */\n     private String sizeStartText = \"<size=\";\n     /**\n-     * The summary size text start <code>'>'</code>.\n+     * The summary size text start <code>'&gt;'</code>.\n      */\n     private String sizeEndText = \">\";\n     /**\n-     * The summary object text start <code>'<'</code>.\n+     * The summary object text start <code>'&lt;'</code>.\n      */\n     private String summaryObjectStartText = \"<\";\n     /**\n-     * The summary object text start <code>'>'</code>.\n+     * The summary object text start <code>'&gt;'</code>.\n      */\n     private String summaryObjectEndText = \">\";\n     \n     /**\n      * <p>Append the superclass toString.</p>\n      * \n-     * <p>A null <code>super.toString()</code> is ignored.</p>\n+     * <p>A <code>null</code> <code>super.toString()</code> is ignored.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param superToString  the <code>super.toString()</code>\n     /**\n      * <p>Append a toString.</p>\n      * \n-     * <p>A null <code>toString()</code> is ignored.</p>\n+     * <p>A <code>null</code> <code>toString()</code> is ignored.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param toString  the <code>super.toString()</code>\n      *\n      * <p>Either detail or summary views can be specified.</p>\n      *\n-     * <p>If a cycle is detected, an object will be appended with the Object.toString() format.</p>\n+     * <p>If a cycle is detected, an object will be appended with the\n+     * <code>Object.toString()</code> format.</p>\n      *\n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name, typically not used as already appended\n     \n     /**\n      * <p>Append to the <code>toString</code> an <code>Object</code>\n-     * value, printing a summary of the Object.</P>\n+     * value, printing a summary of the <code>Object</code>.</P>\n      *\n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name, typically not used as already appended\n--- a/src/java/org/apache/commons/lang/enum/EnumUtils.java\n+++ b/src/java/org/apache/commons/lang/enum/EnumUtils.java\n import java.util.Map;\n \n /**\n- * Utility class for accessing and manipulating Enums.\n+ * <p>Utility class for accessing and manipulating {@link Enum}s.</p>\n  *\n  * @see Enum\n  * @see ValuedEnum\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: EnumUtils.java,v 1.6 2003/03/06 22:50:21 scolebourne Exp $\n+ * @version $Id: EnumUtils.java,v 1.7 2003/07/14 22:25:04 bayard Exp $\n  */\n public class EnumUtils {\n \n     /**\n-     * Restricted constructor\n+     * Restricted constructor.\n      */\n     private EnumUtils() {\n     }\n \n     /**\n-     * Gets an Enum object by class and name.\n+     * <p>Gets an <code>Enum</code> object by class and name.</p>\n      * \n-     * @param enumClass  the class of the Enum to get\n-     * @param name  the name of the Enum to get, may be null\n+     * @param enumClass  the class of the <code>Enum</code> to get\n+     * @param name  the name of the Enum to get, may be <code>null</code>\n      * @return the enum object\n-     * @throws IllegalArgumentException if the enum class is null\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n      */\n     public static Enum getEnum(Class enumClass, String name) {\n         return Enum.getEnum(enumClass, name);\n     }\n \n     /**\n-     * Gets a ValuedEnum object by class and value.\n+     * <p>Gets a <code>ValuedEnum</code> object by class and value.</p>\n      * \n-     * @param enumClass  the class of the Enum to get\n-     * @param value  the value of the Enum to get\n+     * @param enumClass  the class of the <code>Enum</code> to get\n+     * @param value  the value of the <code>Enum</code> to get\n      * @return the enum object, or null if the enum does not exist\n-     * @throws IllegalArgumentException if the enum class is null\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n      */\n     public static ValuedEnum getEnum(Class enumClass, int value) {\n         return (ValuedEnum) ValuedEnum.getEnum(enumClass, value);\n     }\n \n     /**\n-     * Gets the Map of Enum objects by name using the Enum class.\n-     * If the requested class has no enum objects an empty Map is returned.\n-     * The Map is unmodifiable.\n+     * <p>Gets the <code>Map</code> of <code>Enum</code> objects by\n+     * name using the <code>Enum</code> class.</p>\n+     *\n+     * <p>If the requested class has no enum objects an empty\n+     * <code>Map</code> is returned. The <code>Map</code> is unmodifiable.</p>\n      * \n-     * @param enumClass  the class of the Enum to get\n+     * @param enumClass  the class of the <code>Enum</code> to get\n      * @return the enum object Map\n-     * @throws IllegalArgumentException if the enum class is null\n-     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     * @throws IllegalArgumentException if the enum class is not a subclass\n+     *  of <code>Enum</code>\n      */\n     public static Map getEnumMap(Class enumClass) {\n         return Enum.getEnumMap(enumClass);\n     }\n \n     /**\n-     * Gets the List of Enum objects using the Enum class.\n-     * The list is in the order that the objects were created (source code order).\n-     * If the requested class has no enum objects an empty List is returned.\n-     * The List is unmodifiable.\n+     * <p>Gets the <code>List</code> of <code>Enum</code> objects using\n+     * the <code>Enum</code> class.</p>\n+     *\n+     * <p>The list is in the order that the objects were created\n+     * (source code order).</p>\n+     *\n+     * <p>If the requested class has no enum objects an empty\n+     * <code>List</code> is returned. The <code>List</code> is unmodifiable.</p>\n      * \n      * @param enumClass  the class of the Enum to get\n      * @return the enum object Map\n-     * @throws IllegalArgumentException if the enum class is null\n-     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     * @throws IllegalArgumentException if the enum class is not a subclass\n+     *  of <code>Enum</code>\n      */\n     public static List getEnumList(Class enumClass) {\n         return Enum.getEnumList(enumClass);\n     }\n \n     /**\n-     * Gets an iterator over the Enum objects in an Enum class.\n-     * The iterator is in the order that the objects were created (source code order).\n-     * If the requested class has no enum objects an empty Iterator is returned.\n-     * The Iterator is unmodifiable.\n+     * <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects\n+     * in an <code>Enum</code> class.</p>\n+     *\n+     * <p>The iterator is in the order that the objects were created\n+     * (source code order).</p>\n+     *\n+     * <p>If the requested class has no enum objects an empty\n+     * <code>Iterator</code> is returned. The <code>Iterator</code>\n+     * is unmodifiable.</p>\n      * \n-     * @param enumClass  the class of the Enum to get\n-     * @return an iterator of the Enum objects\n-     * @throws IllegalArgumentException if the enum class is null\n-     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     * @param enumClass  the class of the <code>Enum</code> to get\n+     * @return an <code>Iterator</code> of the <code>Enum</code> objects\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     * @throws IllegalArgumentException if the enum class is not a subclass of <code>Enum</code>\n      */\n     public static Iterator iterator(Class enumClass) {\n         return Enum.getEnumList(enumClass).iterator();\n--- a/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n import java.util.Iterator;\n import java.util.List;\n /**\n- * Abstract superclass for type-safe enums with integer values suitable\n- * for use in <code>switch</code> statements.\n- * <p>\n- * <em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing Enum objects\n- * should always be done using the equals() method, not ==. The equals() method will\n- * try == first so in most cases the effect is the same.\n- * <p>\n- * To use this class, it must be subclassed. For example:\n+ * <p>Abstract superclass for type-safe enums with integer values suitable\n+ * for use in <code>switch</code> statements.</p>\n+ *\n+ * <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing\n+ * <code>Enum</code> objects should always be done using the equals() method,\n+ * not <code>==</code>. The equals() method will try <code>==</code> first so\n+ * in most cases the effect is the same.</p>\n+ *\n+ * <p>To use this class, it must be subclassed. For example:</p>\n  *\n  * <pre>\n  * public final class JavaVersionEnum extends ValuedEnum {\n  * }\n  * </pre>\n  *\n- * The above class could then be used as follows:\n+ * <p>The above class could then be used as follows:</p>\n+ *\n  * <pre>\n  * public void doSomething(JavaVersion ver) {\n  *   switch (ver.getValue()) {\n  *   }\n  * }\n  * </pre>\n- * <p>\n- * As shown, each enum has a name and a value. These can be accessed using \n- * <code>getName</code> and <code>getValue</code>.\n- * <p>\n- * The <code>getEnum</code> and <code>iterator</code> methods are recommended.\n+ *\n+ * <p>As shown, each enum has a name and a value. These can be accessed using\n+ * <code>getName</code> and <code>getValue</code>.</p>\n+ *\n+ * <p>The <code>getEnum</code> and <code>iterator</code> methods are recommended.\n  * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n- * An alternative choice is to use the {@link EnumUtils} class.\n- * <p>\n- * <em>NOTE:</em> This class originated in the Jakarta Avalon project.\n- * </p>\n+ * An alternative choice is to use the {@link EnumUtils} class.</p>\n+ *\n+ * <p><em>NOTE:</em> This class originated in the Jakarta Avalon project.</p>\n  *\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ValuedEnum.java,v 1.5 2003/02/04 18:30:07 scolebourne Exp $\n+ * @version $Id: ValuedEnum.java,v 1.6 2003/07/14 22:25:04 bayard Exp $\n  */\n public abstract class ValuedEnum extends Enum {\n     /**\n     }\n \n     /**\n-     * Gets an Enum object by class and value.\n-     * This method loops through the list of Enums, thus if there\n-     * are many Enums this will be slow.\n+     * <p>Gets an <code>Enum</code> object by class and value.</p>\n+     *\n+     * <p>This method loops through the list of <code>Enum</code>,\n+     * thus if there are many <code>Enum</code>s this will be\n+     * slow.</p>\n      * \n-     * @param enumClass  the class of the Enum to get\n-     * @param value  the value of the Enum to get\n+     * @param enumClass  the class of the <code>Enum</code> to get\n+     * @param value  the value of the <code>Enum</code> to get\n      * @return the enum object, or null if the enum does not exist\n-     * @throws IllegalArgumentException if the enum class is null\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n      */\n     protected static Enum getEnum(Class enumClass, int value) {\n         if (enumClass == null) {\n     }\n \n     /**\n-     * Get value of enum item.\n+     * <p>Get value of enum item.</p>\n      *\n      * @return the enum item's value.\n      */\n     }\n \n     /**\n-     * Tests for order. The default ordering is numeric by value, but this\n-     * can be overridden by subclasses.\n+     * <p>Tests for order.</p>\n+     *\n+     * <p>The default ordering is numeric by value, but this\n+     * can be overridden by subclasses.</p>\n      * \n      * @see java.lang.Comparable#compareTo(Object)\n      * @param other  the other object to compare to\n-     * @return -ve if this is less than the other object, +ve if greater than, 0 of equal\n-     * @throws ClassCastException if other is not an Enum\n-     * @throws NullPointerException if other is null\n+     * @return -ve if this is less than the other object, +ve if greater than,\n+     *  <code>0</code> of equal\n+     * @throws ClassCastException if other is not an <code>Enum</code>\n+     * @throws NullPointerException if other is <code>null</code>\n      */\n     public int compareTo(Object other) {\n         return iValue - ((ValuedEnum) other).iValue;\n     }\n \n     /**\n-     * Human readable description of this Enum item. For use when debugging.\n+     * <p>Human readable description of this <code>Enum</code> item.</p>\n+     *\n+     * <p>For use when debugging.</p>\n      * \n      * @return String in the form <code>type[name=value]</code>, for example:\n-     * <code>JavaVersion[Java 1.0=100]</code>. Note that the package name is\n-     * stripped from the type name.\n+     *  <code>JavaVersion[Java 1.0=100]</code>. Note that the package name is\n+     *  stripped from the type name.\n      */\n     public String toString() {\n         String shortName = Enum.getEnumClass(getClass()).getName();\n--- a/src/java/org/apache/commons/lang/math/DoubleRange.java\n+++ b/src/java/org/apache/commons/lang/math/DoubleRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: DoubleRange.java,v 1.2 2003/03/23 17:51:15 scolebourne Exp $\n+ * @version $Id: DoubleRange.java,v 1.3 2003/07/14 22:25:04 bayard Exp $\n  */\n public final class DoubleRange extends Range implements Serializable {\n     \n     private static final long serialVersionUID = 71849363892740L;\n \n-    /* The minimum number in this range (inclusive). */\n+    /**\n+     * The minimum number in this range (inclusive).\n+     */\n     private final double min;\n-    /* The maximum number in this range (inclusive). */\n+    /**\n+     * The maximum number in this range (inclusive).\n+     */\n     private final double max;\n     \n-    /** Cached output minObject (class is immutable) */\n+    /**\n+     * Cached output minObject (class is immutable).\n+     */\n     private transient Double minObject = null;\n-    /** Cached output maxObject (class is immutable) */\n+    /**\n+     * Cached output maxObject (class is immutable).\n+     */\n     private transient Double maxObject = null;\n-    /** Cached output hashCode (class is immutable) */\n+    /**\n+     * Cached output hashCode (class is immutable).\n+     */\n     private transient int hashCode = 0;\n-    /** Cached output toString (class is immutable) */\n+    /**\n+     * Cached output toString (class is immutable).\n+     */\n     private transient String toString = null;\n     \n     /**\n      * <p>Constructs a new <code>DoubleRange</code> using the specified\n      * number as both the minimum and maximum in this range.</p>\n      *\n-     * @param number  the number to use for this range, must not be null\n+     * @param number  the number to use for this range, must not\n+     *  be <code>null</code>\n      * @throws IllegalArgumentException if the number is <code>null</code>\n      * @throws IllegalArgumentException if the number is <code>NaN</code>\n      */\n--- a/src/java/org/apache/commons/lang/math/FloatRange.java\n+++ b/src/java/org/apache/commons/lang/math/FloatRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: FloatRange.java,v 1.2 2003/03/23 17:51:15 scolebourne Exp $\n+ * @version $Id: FloatRange.java,v 1.3 2003/07/14 22:25:04 bayard Exp $\n  */\n public final class FloatRange extends Range implements Serializable {\n     \n     private static final long serialVersionUID = 71849363892750L;\n \n-    /* The minimum number in this range (inclusive). */\n+    /**\n+     * The minimum number in this range (inclusive).\n+     */\n     private final float min;\n-    /* The maximum number in this range (inclusive). */\n+    /**\n+     * The maximum number in this range (inclusive).\n+     */\n     private final float max;\n     \n-    /** Cached output minObject (class is immutable) */\n+    /**\n+     * Cached output minObject (class is immutable).\n+     */\n     private transient Float minObject = null;\n-    /** Cached output maxObject (class is immutable) */\n+    /**\n+     * Cached output maxObject (class is immutable).\n+     */\n     private transient Float maxObject = null;\n-    /** Cached output hashCode (class is immutable) */\n+    /**\n+     * Cached output hashCode (class is immutable).\n+     */\n     private transient int hashCode = 0;\n-    /** Cached output toString (class is immutable) */\n+    /**\n+     * Cached output toString (class is immutable).\n+     */\n     private transient String toString = null;\n     \n     /**\n      * <p>Constructs a new <code>FloatRange</code> using the specified\n      * number as both the minimum and maximum in this range.</p>\n      *\n-     * @param number  the number to use for this range, must not be null\n+     * @param number  the number to use for this range, must not\n+     *  be <code>null</code>\n      * @throws IllegalArgumentException if the number is <code>null</code>\n      * @throws IllegalArgumentException if the number is <code>NaN</code>\n      */\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n /**\n  * <p><code>Fraction</code> is a <code>Number</code> implementation that\n  * stores fractions accurately.</p>\n- * \n+ *\n  * <p>This class is immutable, and interoperable with most methods that accept\n  * a <code>Number</code>.</p>\n  *\n  * @author Travis Reeder\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: Fraction.java,v 1.3 2003/04/09 01:08:30 ggregory Exp $\n+ * @version $Id: Fraction.java,v 1.4 2003/07/14 22:25:05 bayard Exp $\n  */\n public final class Fraction extends Number implements Serializable, Comparable {\n-    \n+\n     private static final long serialVersionUID = 65382027393090L;\n-    \n+\n     public static final Fraction ZERO = new Fraction(0, 1);\n     public static final Fraction ONE = new Fraction(1, 1);\n-    \n+\n     public static final Fraction ONE_HALF = new Fraction(1, 2);\n-    \n+\n     public static final Fraction ONE_THIRD = new Fraction(1, 3);\n     public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n-    \n+\n     public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n     public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n     public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n-    \n+\n     public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n     public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n     public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n     public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n-    \n-\n-    /** The numerator number part of the fraction (the three in three sevenths) */\n+\n+\n+    /**\n+     * The numerator number part of the fraction (the three in three sevenths).\n+     */\n     private final int numerator;\n-    /** The denominator number part of the fraction (the seven in three sevenths) */\n+    /**\n+     * The denominator number part of the fraction (the seven in three sevenths).\n+     */\n     private final int denominator;\n \n-    /** Cached output hashCode (class is immutable) */\n+    /**\n+     * Cached output hashCode (class is immutable).\n+     */\n     private transient int hashCode = 0;\n-    /** Cached output toString (class is immutable) */\n+    /**\n+     * Cached output toString (class is immutable).\n+     */\n     private transient String toString = null;\n-    /** Cached output toProperString (class is immutable) */\n+    /**\n+     * Cached output toProperString (class is immutable).\n+     */\n     private transient String toProperString = null;\n-    \n-    /**\n-     * <p>Constructs a <code>Fraction</code> instance with the 2 parts \n+\n+    /**\n+     * <p>Constructs a <code>Fraction</code> instance with the 2 parts\n      * of a fraction Y/Z.</p>\n-     * \n+     *\n      * @param numerator  the numerator, for example the three in 'three sevenths'\n      * @param denominator  the denominator, for example the seven in 'three sevenths'\n      */\n         this.numerator = numerator;\n         this.denominator = denominator;\n     }\n-    \n-    /**\n-     * <p>Creates a <code>Fraction</code> instance with the 2 parts \n+\n+    /**\n+     * <p>Creates a <code>Fraction</code> instance with the 2 parts\n      * of a fraction Y/Z.</p>\n-     * \n+     *\n      * <p>Any negative signs are resolved to be on the numerator.</p>\n-     * \n+     *\n      * @param numerator  the numerator, for example the three in 'three sevenths'\n      * @param denominator  the denominator, for example the seven in 'three sevenths'\n      * @return a new fraction instance\n-     * @throws ArithmeticException if the denomiator is zero\n+     * @throws ArithmeticException if the denomiator is <code>zero</code>\n      */\n     public static Fraction getFraction(int numerator, int denominator) {\n         if (denominator == 0) {\n     }\n \n     /**\n-     * <p>Creates a <code>Fraction</code> instance with the 3 parts \n+     * <p>Creates a <code>Fraction</code> instance with the 3 parts\n      * of a fraction X Y/Z.</p>\n-     * \n+     *\n      * <p>The negative sign must be passed in on the whole number part.</p>\n-     * \n+     *\n      * @param whole  the whole number, for example the one in 'one and three sevenths'\n      * @param numerator  the numerator, for example the three in 'one and three sevenths'\n      * @param denominator  the denominator, for example the seven in 'one and three sevenths'\n      * @return a new fraction instance\n-     * @throws ArithmeticException if the denomiator is zero\n+     * @throws ArithmeticException if the denomiator is <code>zero</code>\n      * @throws ArithmeticException if the denomiator is negative\n      * @throws ArithmeticException if the numerator is negative\n      */\n         }\n         if (denominator < 0) {\n             throw new ArithmeticException(\"The denominator must not be negative\");\n-        }        \n+        }\n         if (numerator < 0) {\n             throw new ArithmeticException(\"The numerator must not be negative\");\n         }\n     }\n \n     /**\n-     * <p>Creates a <code>Fraction</code> instance with the 2 parts \n+     * <p>Creates a <code>Fraction</code> instance with the 2 parts\n      * of a fraction Y/Z.</p>\n-     * \n+     *\n      * <p>Any negative signs are resolved to be on the numerator.</p>\n-     * \n+     *\n      * @param numerator  the numerator, for example the three in 'three sevenths'\n      * @param denominator  the denominator, for example the seven in 'three sevenths'\n      * @return a new fraction instance, with the numerator and denominator reduced\n-     * @throws ArithmeticException if the denomiator is zero\n+     * @throws ArithmeticException if the denomiator is <code>zero</code>\n      */\n     public static Fraction getReducedFraction(int numerator, int denominator) {\n         if (denominator == 0) {\n         }\n         return new Fraction(numerator / gcd, denominator / gcd);\n     }\n-    \n+\n     /**\n      * <p>Creates a <code>Fraction</code> instance from a <code>double</code> value.</p>\n-     * \n+     *\n      * <p>This method uses the continued fraction algorithm.</p>\n      *\n      * @param value  the double value to convert\n      * @return a new fraction instance that is close to the value\n-     * @throws ArithmeticException if the value is infinite or NaN\n-     * @throws ArithmeticException if the calculated denomiator is zero\n+     * @throws ArithmeticException if the value is infinite or <code>NaN</code>\n+     * @throws ArithmeticException if the calculated denomiator is <code>zero</code>\n      */\n     public static Fraction getFraction(double value) {\n         if (Double.isInfinite(value) || Double.isNaN(value)) {\n         value = Math.abs(value);\n         int wholeNumber = (int) value;\n         value -= wholeNumber;\n-        \n+\n         // http://archives.math.utk.edu/articles/atuyl/confrac/\n         int numer0 = 0;  // the pre-previous\n         int denom0 = 1;  // the pre-previous\n \n     /**\n      * <p>Creates a Fraction from a <code>String</code>.</p>\n-     * \n+     *\n      * <p>The formats accepted are:</p>\n+     *\n+     * <p>\n      * <ol>\n-     * <li><code>double</code> String containing a dot\n-     * <li>'X Y/Z'\n-     * <li>'Y/Z'\n-     * </ol> and a .</p>\n-     * \n+     *  <li><code>double</code> String containing a dot</li>\n+     *  <li>'X Y/Z'</li>\n+     *  <li>'Y/Z'</li>\n+     * </ol>\n+     * and a .</p>\n+     *\n      * @param str  the string to parse, must not be <code>null</code>\n      * @return the new <code>Fraction</code> instance\n-     * @throws IllegalArgumentException if the string is null\n+     * @throws IllegalArgumentException if the string is <code>null</code>\n      * @throws NumberFormatException if the number format is invalid\n      */\n     public static Fraction getFraction(String str) {\n         if (pos >= 0) {\n             return getFraction(Double.parseDouble(str));\n         }\n-        \n+\n         // parse X Y/Z format\n         pos = str.indexOf(' ');\n         if (pos > 0) {\n                 );\n             }\n         }\n-        \n+\n         // parse Y/Z format\n         pos = str.indexOf('/');\n         if (pos < 0) {\n \n     /**\n      * <p>Gets the numerator part of the fraction.</p>\n-     * \n+     *\n      * <p>This method may return a value greater than the denominator, an\n      * improper fraction, such as the seven in 7/8.</p>\n-     * \n+     *\n      * @return the numerator fraction part\n      */\n     public int getNumerator() {\n \n     /**\n      * <p>Gets the denominator part of the fraction.</p>\n-     * \n+     *\n      * @return the denominator fraction part\n      */\n     public int getDenominator() {\n         return denominator;\n     }\n-    \n+\n     /**\n      * <p>Gets the proper numerator, always positive.</p>\n-     * \n+     *\n      * <p>An improper fraction 7/8 can be resolved into a proper one, 1 3/4.\n      * This method returns the 3 from the proper fraction.</p>\n-     * \n+     *\n      * <p>If the fraction is negative such as -7/8, it can be resolved into\n      * -1 3/4, so this method returns the positive proper numerator, 3.</p>\n-     * \n+     *\n      * @return the numerator fraction part of a proper fraction, always positive\n      */\n     public int getProperNumerator() {\n \n     /**\n      * <p>Gets the proper whole part of the fraction.</p>\n-     * \n+     *\n      * <p>An improper fraction 7/8 can be resolved into a proper one, 1 3/4.\n      * This method returns the 1 from the proper fraction.</p>\n-     * \n+     *\n      * <p>If the fraction is negative such as -7/8, it can be resolved into\n      * -1 3/4, so this method returns the positive whole part -1.</p>\n-     * \n+     *\n      * @return the whole fraction part of a proper fraction, that includes the sign\n      */\n     public int getProperWhole() {\n     /**\n      * <p>Gets the fraction as an <code>int</code>. This returns the whole number\n      * part of the fraction.</p>\n-     * \n+     *\n      * @return the whole number fraction part\n      */\n     public int intValue() {\n     /**\n      * <p>Gets the fraction as a <code>long</code>. This returns the whole number\n      * part of the fraction.</p>\n-     * \n+     *\n      * @return the whole number fraction part\n      */\n     public long longValue() {\n     /**\n      * <p>Gets the fraction as a <code>float</code>. This calculates the fraction\n      * as the numerator divided by denominator.</p>\n-     * \n+     *\n      * @return the fraction as a <code>float</code>\n      */\n     public float floatValue() {\n     /**\n      * <p>Gets the fraction as a <code>double</code>. This calculates the fraction\n      * as the numerator divided by denominator.</p>\n-     * \n+     *\n      * @return the fraction as a <code>double</code>\n      */\n     public double doubleValue() {\n     //-------------------------------------------------------------------\n \n     /**\n-     * <p>Reduce the fraction to the smallest values for the numerator and \n+     * <p>Reduce the fraction to the smallest values for the numerator and\n      * denominator, returning the result..</p>\n-     * \n+     *\n      * @return a new reduce fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n         }\n         return Fraction.getFraction(numerator / gcd, denominator / gcd);\n     }\n-    \n+\n     /**\n      * <p>Gets a fraction that is the invert (1/fraction) of this one.</p>\n-     * \n+     *\n      * <p>The returned fraction is not reduced.</p>\n-     * \n+     *\n      * @return a new fraction instance with the numerator and denominator inverted\n-     * @throws ArithmeticException if the numerator is zero\n+     * @throws ArithmeticException if the numerator is <code>zero</code>\n      */\n     public Fraction invert() {\n         if (numerator == 0) {\n         }\n         return getFraction(denominator, numerator);\n     }\n-    \n+\n     /**\n      * <p>Gets a fraction that is the negative (-fraction) of this one.</p>\n-     * \n+     *\n      * <p>The returned fraction is not reduced.</p>\n-     * \n+     *\n      * @return a new fraction instance with the opposite signed numerator\n      */\n     public Fraction negate() {\n         return getFraction(-numerator, denominator);\n     }\n-    \n+\n     /**\n      * <p>Gets a fraction that is the positive equivalent of this one.</p>\n      * <p>More precisely: <pre>(fraction >= 0 ? this : -fraction)</pre></p>\n-     * \n+     *\n      * <p>The returned fraction is not reduced.</p>\n-     * \n+     *\n      * @return <code>this</code> if it is positive, or a new positive fraction\n      *  instance with the opposite signed numerator\n      */\n \n     /**\n      * <p>Gets a fraction that is raised to the passed in power.</p>\n-     * \n+     *\n      * <p>The returned fraction is not reduced.</p>\n-     * \n+     *\n      * @param power  the power to raise the fraction to\n-     * @return <code>this</code> if the power is one, <code>ONE</code> if the power \n+     * @return <code>this</code> if the power is one, <code>ONE</code> if the power\n      * is zero or a new fraction instance raised to the appropriate power\n      */\n     public Fraction pow(int power) {\n \n     /**\n      * <p>Gets the greatest common denominator of two numbers.</p>\n-     * \n+     *\n      * @param number1  a positive number\n      * @param number2  a positive number\n      * @return the greatest common denominator\n \n     /**\n      * <p>Adds the value of this fraction to another, returning the result.</p>\n-     * \n-     * <p>The implementation spots common cases of zero numerators and equal \n+     *\n+     * <p>The implementation spots common cases of zero numerators and equal\n      * denominators. Otherwise, it uses <code>(a/b) + (c/d) = (a*d + b*c) / (b*d)</code>\n      * and then reduces the result.</p>\n-     * \n-     * @param the fraction to add, must not be <code>null</code>\n+     *\n+     * @param fraction  the fraction to add, must not be <code>null</code>\n      * @return a <code>Fraction</code> instance with the resulting values\n-     * @throws IllegalArgumentException if the fraction is null\n+     * @throws IllegalArgumentException if the fraction is <code>null</code>\n      */\n     public Fraction add(Fraction fraction) {\n         if (fraction == null) {\n     }\n \n     /**\n-     * <p>Subtracts the value of another fraction from the value of this one, \n+     * <p>Subtracts the value of another fraction from the value of this one,\n      * returning the result.</p>\n-     * \n-     * <p>The implementation spots common cases of zero numerators and equal \n+     *\n+     * <p>The implementation spots common cases of zero numerators and equal\n      * denominators. Otherwise, it uses <code>(a/b) - (c/d) = (a*d - b*c) / (b*d)</code>\n      * and then reduces the result.</p>\n-     * \n-     * @param the fraction to subtract, must not be <code>null</code>\n+     *\n+     * @param fraction  the fraction to subtract, must not be <code>null</code>\n      * @return a <code>Fraction</code> instance with the resulting values\n-     * @throws IllegalArgumentException if the fraction is null\n+     * @throws IllegalArgumentException if the fraction is <code>null</code>\n      */\n     public Fraction subtract(Fraction fraction) {\n         if (fraction == null) {\n             denominator * fraction.denominator\n         );\n     }\n-    \n+\n     /**\n      * <p>Multiplies the value of this fraction by another, returning the result.</p>\n-     * \n+     *\n      * <p>The implementation uses <code>(a/b)*(c/d) = (a*c)/(b*d)</code>\n      * and then reduces the result.</p>\n-     * \n-     * @param the fraction to multipy by, must not be <code>null</code>\n+     *\n+     * @param fraction  the fraction to multipy by, must not be <code>null</code>\n      * @return a <code>Fraction</code> instance with the resulting values\n-     * @throws IllegalArgumentException if the fraction is null\n+     * @throws IllegalArgumentException if the fraction is <code>null</code>\n      */\n     public Fraction multiplyBy(Fraction fraction) {\n         if (fraction == null) {\n             denominator * fraction.denominator\n         );\n     }\n-    \n+\n     /**\n      * <p>Divide the value of this fraction by another, returning the result.</p>\n-     * \n+     *\n      * <p>The implementation uses <code>(a/b)/(c/d) = a/b * d/c = (a*d)/(b*c)</code>\n      * and then reduces the result.</p>\n-     * \n-     * @param the fraction to divide by, must not be <code>null</code>\n+     *\n+     * @param fraction  the fraction to divide by, must not be <code>null</code>\n      * @return a <code>Fraction</code> instance with the resulting values\n-     * @throws IllegalArgumentException if the fraction is null\n+     * @throws IllegalArgumentException if the fraction is <code>null</code>\n      * @throws ArithmeticException if the fraction to divide by is zero\n      */\n     public Fraction divideBy(Fraction fraction) {\n \n     /**\n      * <p>Compares this fraction to another object to test if they are equal.</p>.\n-     * \n+     *\n      * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>\n      *\n      * @param obj the reference object with which to compare\n \n     /**\n      * <p>Compares this object to another based on size.</p>\n-     * \n+     *\n      * @param object  the object to compare to\n      * @return -ve if this is less, 0 if equal, +ve if greater\n      * @throws ClassCastException if the object is not a <code>Fraction</code>\n \n     /**\n      * <p>Gets the fraction as a <code>String</code>.</p>\n-     * \n+     *\n      * <p>The format used is '<i>numerator</i>/<i>denominator</i>' always.\n-     * \n+     *\n      * @return a <code>String</code> form of the fraction\n      */\n     public String toString() {\n \n     /**\n      * <p>Gets the fraction as a proper <code>String</code> in the format X Y/Z.</p>\n-     * \n+     *\n      * <p>The format used in '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>'.\n      * If the whole number is zero it will be ommitted. If the numerator is zero,\n      * only the whole number is returned.</p>\n-     * \n+     *\n      * @return a <code>String</code> form of the fraction\n      */\n     public String toProperString() {\n         }\n         return toProperString;\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/lang/math/IntRange.java\n+++ b/src/java/org/apache/commons/lang/math/IntRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: IntRange.java,v 1.2 2003/03/23 17:51:15 scolebourne Exp $\n+ * @version $Id: IntRange.java,v 1.3 2003/07/14 22:25:05 bayard Exp $\n  */\n public final class IntRange extends Range implements Serializable {\n     \n     private static final long serialVersionUID = 71849363892730L;\n \n-    /* The minimum number in this range (inclusive). */\n+    /**\n+     * The minimum number in this range (inclusive).\n+     */\n     private final int min;\n-    /* The maximum number in this range (inclusive). */\n+    /**\n+     * The maximum number in this range (inclusive).\n+     */\n     private final int max;\n     \n-    /** Cached output minObject (class is immutable) */\n+    /**\n+     * Cached output minObject (class is immutable)\n+     */\n     private transient Integer minObject = null;\n-    /** Cached output maxObject (class is immutable) */\n+    /**\n+     * Cached output maxObject (class is immutable).\n+     */\n     private transient Integer maxObject = null;\n-    /** Cached output hashCode (class is immutable) */\n+    /**\n+     * Cached output hashCode (class is immutable).\n+     */\n     private transient int hashCode = 0;\n-    /** Cached output toString (class is immutable) */\n+    /**\n+     * Cached output toString (class is immutable).\n+     */\n     private transient String toString = null;\n     \n     /**\n      * <p>Constructs a new <code>IntRange</code> using the specified\n      * number as both the minimum and maximum in this range.</p>\n      *\n-     * @param number  the number to use for this range, must not be null\n+     * @param number  the number to use for this range, must not be <code>null</code>\n      * @throws IllegalArgumentException if the number is <code>null</code>\n      */\n     public IntRange(Number number) {\n--- a/src/java/org/apache/commons/lang/math/JVMRandom.java\n+++ b/src/java/org/apache/commons/lang/math/JVMRandom.java\n \n /**\n  * <p><code>JVMRandom</code> is a wrapper that supports all possible \n- * Random methods via the java.lang.Math.random() method and its system-wide \n- * Random object.\n+ * Random methods via the {@link java.lang.Math#random()} method\n+ * and its system-wide {@link Random} object.</p>\n  * \n  * @author Henri Yandell\n  * @since 2.0\n- * @version $Id: JVMRandom.java,v 1.6 2003/06/16 02:26:41 bayard Exp $\n+ * @version $Id: JVMRandom.java,v 1.7 2003/07/14 22:25:05 bayard Exp $\n  */\n public final class JVMRandom extends Random {\n \n-    /** ensures that only the constructor can call reseed */\n+    /**\n+     * Ensures that only the constructor can call reseed.\n+     */\n     private boolean constructed = false;\n \n     public JVMRandom() {\n         this.constructed = true;\n     }\n     \n-    /** Unsupported in 2.0 */\n+    /**\n+     * Unsupported in 2.0.\n+     */\n     public synchronized void setSeed(long seed) {\n         if (this.constructed) {\n             throw new UnsupportedOperationException();\n         }\n     }\n \n-    /** Unsupported in 2.0 */\n+    /**\n+     * Unsupported in 2.0.\n+     */\n     public synchronized double nextGaussian() {\n         throw new UnsupportedOperationException();\n     }\n \n-    /** Unsupported in 2.0 */\n+    /**\n+     * Unsupported in 2.0.\n+     */\n     public void nextBytes(byte[] byteArray) {\n         throw new UnsupportedOperationException();\n     }\n \n     /**\n-     * Returns the next pseudorandom, uniformly distributed int value \n-     * from the Math.random() sequence. \n+     * <p>Returns the next pseudorandom, uniformly distributed int value\n+     * from the Math.random() sequence.</p>\n      *\n      * @return the random int\n      */\n         return nextInt(Integer.MAX_VALUE);\n     }\n     /**\n-     * Returns a pseudorandom, uniformly distributed int value between 0 \n-     * (inclusive) and the specified value (exclusive), from the \n-     * Math.random() sequence. \n+     * <p>Returns a pseudorandom, uniformly distributed int value between\n+     * <code>0</code> (inclusive) and the specified value (exclusive), from\n+     * the Math.random() sequence.</p>\n      *\n      * @param n  the specified exclusive max-value\n-     * @throws IllegalArgumentException when n <= 0\n-     *\n      * @return the random int\n+     * @throws IllegalArgumentException when <code>n &lt;= 0</code>\n      */\n     public int nextInt(int n) {\n         if (n <= 0) {\n         return (int)(Math.random() * n);\n     }\n     /**\n-     * Returns the next pseudorandom, uniformly distributed long value \n-     * from the Math.random() sequence.\n-     *\n+     * <p>Returns the next pseudorandom, uniformly distributed long value\n+     * from the Math.random() sequence.</p>\n      * @return the random long\n      */\n     public long nextLong() {\n \n \n     /**\n-     * Returns a pseudorandom, uniformly distributed long value between 0 \n-     * (inclusive) and the specified value (exclusive), from the \n-     * Math.random() sequence.\n+     * <p>Returns a pseudorandom, uniformly distributed long value between\n+     * <code>0</code> (inclusive) and the specified value (exclusive), from\n+     * the Math.random() sequence.</p>\n      *\n      * @param n  the specified exclusive max-value\n-     * @throws IllegalArgumentException when n <= 0\n-     *\n      * @return the random long\n+     * @throws IllegalArgumentException when <code>n &lt;= 0</code>\n      */\n     public static long nextLong(long n) {\n         if (n <= 0) {\n      }\n \n     /**\n-     * Returns the next pseudorandom, uniformly distributed boolean value \n-     * from the Math.random() sequence.\n+     * <p>Returns the next pseudorandom, uniformly distributed boolean value\n+     * from the Math.random() sequence.</p>\n      *\n      * @return the random boolean\n      */\n         return (Math.random() > 0.5);\n     }\n     /**\n-     * Returns the next pseudorandom, uniformly distributed float value \n-     * between 0.0 and 1.0 from the Math.random() sequence.\n+     * <p>Returns the next pseudorandom, uniformly distributed float value\n+     * between <code>0.0</code> and <code>1.0</code> from the Math.random()\n+     * sequence.</p>\n      *\n      * @return the random float\n      */\n         return (float)Math.random();\n     }\n     /**\n-     * Synonymous to the Math.random() call.\n+     * <p>Synonymous to the Math.random() call.</p>\n      *\n      * @return the random double\n      */\n--- a/src/java/org/apache/commons/lang/math/LongRange.java\n+++ b/src/java/org/apache/commons/lang/math/LongRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: LongRange.java,v 1.2 2003/03/23 17:51:15 scolebourne Exp $\n+ * @version $Id: LongRange.java,v 1.3 2003/07/14 22:25:05 bayard Exp $\n  */\n public final class LongRange extends Range implements Serializable {\n     \n     private static final long serialVersionUID = 71849363892720L;\n \n-    /* The minimum number in this range (inclusive). */\n+    /**\n+     * The minimum number in this range (inclusive).\n+     */\n     private final long min;\n-    /* The maximum number in this range (inclusive). */\n+    /**\n+     * The maximum number in this range (inclusive).\n+     */\n     private final long max;\n     \n-    /** Cached output minObject (class is immutable) */\n+    /**\n+     * Cached output minObject (class is immutable).\n+     */\n     private transient Long minObject = null;\n-    /** Cached output maxObject (class is immutable) */\n+    /**\n+     * Cached output maxObject (class is immutable).\n+     */\n     private transient Long maxObject = null;\n-    /** Cached output hashCode (class is immutable) */\n+    /**\n+     * Cached output hashCode (class is immutable).\n+     */\n     private transient int hashCode = 0;\n-    /** Cached output toString (class is immutable) */\n+    /**\n+     * Cached output toString (class is immutable).\n+     */\n     private transient String toString = null;\n     \n     /**\n      * <p>Constructs a new <code>LongRange</code> using the specified\n      * number as both the minimum and maximum in this range.</p>\n      *\n-     * @param number  the number to use for this range, must not be null\n+     * @param number  the number to use for this range, must not\n+     *  be <code>null</code>\n      * @throws IllegalArgumentException if the number is <code>null</code>\n      */\n     public LongRange(Number number) {\n--- a/src/java/org/apache/commons/lang/math/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/math/NumberRange.java\n \n /**\n  * <p><code>NumberRange</code> represents an inclusive range of \n- * {@link java.lang.Number Number} objects of the same type.</p>\n+ * {@link java.lang.Number} objects of the same type.</p>\n  *\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author Stephen Colebourne\n  * @since 2.0 (previously in org.apache.commons.lang)\n- * @version $Id: NumberRange.java,v 1.3 2003/04/09 01:04:47 ggregory Exp $\n+ * @version $Id: NumberRange.java,v 1.4 2003/07/14 22:25:05 bayard Exp $\n  */\n public final class NumberRange extends Range implements Serializable {\n     \n     private static final long serialVersionUID = 71849363892710L;\n \n-    /* The minimum number in this range. */\n+    /**\n+     * The minimum number in this range.\n+     */\n     private final Number min;\n-    /* The maximum number in this range. */\n+    /**\n+     * The maximum number in this range.\n+     */\n     private final Number max;\n     \n-    /** Cached output hashCode (class is immutable) */\n+    /**\n+     * Cached output hashCode (class is immutable).\n+     */\n     private transient int hashCode = 0;\n-    /** Cached output toString (class is immutable) */\n+    /**\n+     * Cached output toString (class is immutable).\n+     */\n     private transient String toString = null;\n \n     /**\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n  * @author Phil Steitz\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: NumberUtils.java,v 1.2 2003/06/28 18:42:03 scolebourne Exp $\n+ * @version $Id: NumberUtils.java,v 1.3 2003/07/14 22:25:05 bayard Exp $\n  */\n public final class NumberUtils {\n     \n     // Min in array\n     //--------------------------------------------------------------------\n     /**\n-     * Returns the minimum value in an array.\n+     * <p>Returns the minimum value in an array.</p>\n      * \n      * @param array  an array\n      * @return the minimum value in the array\n     }\n \n     /**\n-     * Returns the minimum value in an array.\n+     * <p>Returns the minimum value in an array.</p>\n      * \n      * @param array  an array\n      * @return the minimum value in the array\n     }\n \n     /**\n-     * Returns the minimum value in an array.\n+     * <p>Returns the minimum value in an array.</p>\n      * \n      * @param array  an array\n      * @return the minimum value in the array\n     }\n \n      /**\n-     * Returns the minimum value in an array.\n+     * <p>Returns the minimum value in an array.</p>\n      * \n      * @param array  an array\n      * @return the minimum value in the array\n     }\n \n     /**\n-     * Returns the minimum value in an array.\n+     * <p>Returns the minimum value in an array.</p>\n      * \n      * @param array  an array\n      * @return the minimum value in the array\n     // Max in array\n     //--------------------------------------------------------------------\n     /**\n-     * Returns the maximum value in an array.\n+     * <p>Returns the maximum value in an array.</p>\n      * \n      * @param array  an array\n      * @return the minimum value in the array\n     }\n \n     /**\n-     * Returns the maximum value in an array.\n+     * <p>Returns the maximum value in an array.</p>\n      * \n      * @param array  an array\n      * @return the minimum value in the array\n     }\n \n     /**\n-     * Returns the maximum value in an array.\n+     * <p>Returns the maximum value in an array.</p>\n      * \n      * @param array  an array\n      * @return the minimum value in the array\n     }\n \n     /**\n-     * Returns the maximum value in an array.\n+     * <p>Returns the maximum value in an array.</p>\n      * \n      * @param array  an array\n      * @return the minimum value in the array\n     }\n \n     /**\n-     * Returns the maximum value in an array.\n+     * <p>Returns the maximum value in an array.</p>\n      * \n      * @param array  an array\n      * @return the minimum value in the array\n     /**\n      * <p>Gets the minimum of three <code>double</code> values.</p>\n      * \n-     * <p>If any value is NaN, NaN is returned. Infinity is handled.</p>\n+     * <p>If any value is <code>NaN</code>, <code>NaN</code> is\n+     * returned. Infinity is handled.</p>\n      * \n      * @param a  value 1\n      * @param b  value 2\n     /**\n      * <p>Gets the minimum of three <code>float</code> values.</p>\n      * \n-     * <p>If any value is NaN, NaN is returned. Infinity is handled.</p>\n-     * \n+     * <p>If any value is <code>NaN</code>, <code>NaN</code> is\n+     * returned. Infinity is handled.</p>\n+     *\n      * @param a  value 1\n      * @param b  value 2\n      * @param c  value 3\n     /**\n      * <p>Gets the maximum of three <code>double</code> values.</p>\n      * \n-     * <p>If any value is NaN, NaN is returned. Infinity is handled.</p>\n-     * \n+     * <p>If any value is <code>NaN</code>, <code>NaN</code> is\n+     * returned. Infinity is handled.</p>\n+     *\n      * @param a  value 1\n      * @param b  value 2\n      * @param c  value 3\n     /**\n      * <p>Gets the maximum of three <code>float</code> values.</p>\n      * \n-     * <p>If any value is NaN, NaN is returned. Infinity is handled.</p>\n-     * \n+     * <p>If any value is <code>NaN</code>, <code>NaN</code> is\n+     * returned. Infinity is handled.</p>\n+     *\n      * @param a  value 1\n      * @param b  value 2\n      * @param c  value 3\n      * <p>This method is more comprehensive than the standard Java greater\n      * than, less than and equals operators.</p>\n      * <ul>\n-     *  <li>It returns <code>-1</code> if the first value is less than the second.\n-     *  <li>It returns <code>+1</code> if the first value is greater than the second.\n-     *  <li>It returns <code>0</code> if the values are equal.\n+     *  <li>It returns <code>-1</code> if the first value is less than the second.</li>\n+     *  <li>It returns <code>+1</code> if the first value is greater than the second.</li>\n+     *  <li>It returns <code>0</code> if the values are equal.</li>\n      * </ul>\n      *\n      * <p>\n      *  <li>+0.0\n      *  <li>-0.0\n      *  <li>Normal negative numbers\n-     *  <li>Minimum double (-Double.MAX_VALUE)\n+     *  <li>Minimum double (<code>-Double.MAX_VALUE</code>)\n      *  <li>Negative infinity\n      * </ul>\n      * </p>\n      * <li>+0.0\n      * <li>-0.0\n      * <li>Normal negative numbers\n-     * <li>Minimum float (-Float.MAX_VALUE)\n+     * <li>Minimum float (<code>-Float.MAX_VALUE</code>)\n      * <li>Negative infinity\n      * </ul>\n      *\n--- a/src/java/org/apache/commons/lang/math/RandomUtils.java\n+++ b/src/java/org/apache/commons/lang/math/RandomUtils.java\n \n /**\n  * <p><code>RandomUtils</code> is a wrapper that supports all possible \n- * Random methods via the java.lang.Math.random() method and its system-wide \n- * Random object.\n+ * {@link java.util.Random} methods via the {@link java.lang.Math#random()}\n+ * method and its system-wide <code>Random</code> object.\n  * \n  * @author Henri Yandell\n  * @since 2.0\n- * @version $Id: RandomUtils.java,v 1.2 2003/05/07 15:09:19 bayard Exp $\n+ * @version $Id: RandomUtils.java,v 1.3 2003/07/14 22:25:05 bayard Exp $\n  */\n public final class RandomUtils {\n \n //    }\n \n     /**\n-     * Returns the next pseudorandom, uniformly distributed int value \n-     * from the Math.random() sequence. \n+     * <p>Returns the next pseudorandom, uniformly distributed int value\n+     * from the Math.random() sequence.</p>\n      *\n      * @return the random int\n      */\n         return rnd.nextInt();\n     }\n     /**\n-     * Returns a pseudorandom, uniformly distributed int value between 0 \n-     * (inclusive) and the specified value (exclusive), from the \n-     * Math.random() sequence. \n+     * <p>Returns a pseudorandom, uniformly distributed int value\n+     * between <code>0</code> (inclusive) and the specified value\n+     * (exclusive), from the Math.random() sequence.</p>\n      *\n      * @param n  the specified exclusive max-value\n      *\n         return rnd.nextInt(n);\n     }\n     /**\n-     * Returns the next pseudorandom, uniformly distributed long value \n-     * from the Math.random() sequence.\n+     * <p>Returns the next pseudorandom, uniformly distributed long value\n+     * from the Math.random() sequence.</p>\n      *\n      * @return the random long\n      */\n         return rnd.nextLong();\n     }\n     /**\n-     * Returns the next pseudorandom, uniformly distributed boolean value \n-     * from the Math.random() sequence.\n+     * <p>Returns the next pseudorandom, uniformly distributed boolean value\n+     * from the Math.random() sequence.</p>\n      *\n      * @return the random boolean\n      */\n         return rnd.nextBoolean();\n     }\n     /**\n-     * Returns the next pseudorandom, uniformly distributed float value \n-     * between 0.0 and 1.0 from the Math.random() sequence.\n+     * <p>Returns the next pseudorandom, uniformly distributed float value\n+     * between <code>0.0</code> and <code>1.0</code> from the Math.random()\n+     * sequence.</p>\n      *\n      * @return the random float\n      */\n         return rnd.nextFloat();\n     }\n     /**\n-     * Synonymous to the Math.random() call.\n+     * <p>Synonymous to the Math.random() call.</p>\n      *\n      * @return the random double\n      */\n--- a/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n import java.util.TimeZone;\n \n /**\n- * Date and time formatting utilites and constants.\n- * <p>\n- * Formatting is performed using the\n- * {@link org.apache.commons.lang.time.FastDateFormat} class.\n+ * <p>Date and time formatting utilites and constants.</p>\n+ *\n+ * <p>Formatting is performed using the\n+ * {@link org.apache.commons.lang.time.FastDateFormat} class.</p>\n  *\n  * @author Apache Ant - DateUtils\n  * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n  * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: DateFormatUtils.java,v 1.2 2003/06/09 21:22:31 scolebourne Exp $\n+ * @version $Id: DateFormatUtils.java,v 1.3 2003/07/14 22:25:05 bayard Exp $\n  */\n public class DateFormatUtils {\n \n \n     //-----------------------------------------------------------------------\n     /**\n-     * DateFormatUtils instances should NOT be constructed in standard programming.\n-     * <p>\n-     * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * <p>DateFormatUtils instances should NOT be constructed in standard programming.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n      */\n     public DateFormatUtils() {\n     }\n \n     /**\n-     * Format a date/time into a specific pattern using the UTC timezone.\n+     * <p>Format a date/time into a specific pattern using the UTC timezone.</p>\n      * \n      * @param millis  the date to format expressed in milliseconds\n      * @param pattern  the pattern to use to format the date\n     }\n \n     /**\n-     * Format a date/time into a specific pattern using the UTC timezone.\n+     * <p>Format a date/time into a specific pattern using the UTC timezone.</p>\n      * \n      * @param date  the date to format\n      * @param pattern  the pattern to use to format the date\n     }\n     \n     /**\n-     * Format a date/time into a specific pattern using the UTC timezone.\n-     * \n-     * @param millis  the date to format expressed in milliseconds\n-     * @param pattern  the pattern to use to format the date\n-     * @param locale  the locale to use, may be null\n+     * <p>Format a date/time into a specific pattern using the UTC timezone.</p>\n+     * \n+     * @param millis  the date to format expressed in milliseconds\n+     * @param pattern  the pattern to use to format the date\n+     * @param locale  the locale to use, may be <code>null</code>\n      * @return the formatted date\n      */\n     public static String formatUTC(long millis, String pattern, Locale locale) {\n     }\n \n     /**\n-     * Format a date/time into a specific pattern using the UTC timezone.\n-     * \n-     * @param date  the date to format\n-     * @param pattern  the pattern to use to format the date\n-     * @param locale  the locale to use, may be null\n+     * <p>Format a date/time into a specific pattern using the UTC timezone.</p>\n+     * \n+     * @param date  the date to format\n+     * @param pattern  the pattern to use to format the date\n+     * @param locale  the locale to use, may be <code>null</code>\n      * @return the formatted date\n      */\n     public static String formatUTC(Date date, String pattern, Locale locale) {\n     }\n     \n     /**\n-     * Format a date/time into a specific pattern.\n+     * <p>Format a date/time into a specific pattern.</p>\n      * \n      * @param millis  the date to format expressed in milliseconds\n      * @param pattern  the pattern to use to format the date\n     }\n \n     /**\n-     * Format a date/time into a specific pattern.\n+     * <p>Format a date/time into a specific pattern.</p>\n      * \n      * @param date  the date to format\n      * @param pattern  the pattern to use to format the date\n     }\n     \n     /**\n-     * Format a date/time into a specific pattern in a timezone.\n+     * <p>Format a date/time into a specific pattern in a timezone.</p>\n      * \n      * @param millis  the time expressed in milliseconds\n      * @param pattern  the pattern to use to format the date\n-     * @param timeZone  the timezone to use, may be null\n+     * @param timeZone  the timezone to use, may be <code>null</code>\n      * @return the formatted date\n      */\n     public static String format(long millis, String pattern, TimeZone timeZone) {\n     }\n \n     /**\n-     * Format a date/time into a specific pattern in a timezone.\n-     * \n-     * @param date  the date to format\n-     * @param pattern  the pattern to use to format the date\n-     * @param timeZone  the timezone to use, may be null\n+     * <p>Format a date/time into a specific pattern in a timezone.</p>\n+     * \n+     * @param date  the date to format\n+     * @param pattern  the pattern to use to format the date\n+     * @param timeZone  the timezone to use, may be <code>null</code>\n      * @return the formatted date\n      */\n     public static String format(Date date, String pattern, TimeZone timeZone) {\n     }\n \n     /**\n-     * Format a date/time into a specific pattern in a locale.\n-     * \n-     * @param millis  the date to format expressed in milliseconds\n-     * @param pattern  the pattern to use to format the date\n-     * @param locale  the locale to use, may be null\n+     * <p>Format a date/time into a specific pattern in a locale.</p>\n+     * \n+     * @param millis  the date to format expressed in milliseconds\n+     * @param pattern  the pattern to use to format the date\n+     * @param locale  the locale to use, may be <code>null</code>\n      * @return the formatted date\n      */\n     public static String format(long millis, String pattern, Locale locale) {\n     }\n \n     /**\n-     * Format a date/time into a specific pattern in a locale.\n-     * \n-     * @param date  the date to format\n-     * @param pattern  the pattern to use to format the date\n-     * @param locale  the locale to use, may be null\n+     * <p>Format a date/time into a specific pattern in a locale.</p>\n+     * \n+     * @param date  the date to format\n+     * @param pattern  the pattern to use to format the date\n+     * @param locale  the locale to use, may be <code>null</code>\n      * @return the formatted date\n      */\n     public static String format(Date date, String pattern, Locale locale) {\n     }\n \n     /**\n-     * Format a date/time into a specific pattern in a timezone and locale.\n-     * \n-     * @param millis  the date to format expressed in milliseconds\n-     * @param pattern  the pattern to use to format the date\n-     * @param timeZone  the timezone to use, may be null\n-     * @param locale  the locale to use, may be null\n+     * <p>Format a date/time into a specific pattern in a timezone and locale.</p>\n+     * \n+     * @param millis  the date to format expressed in milliseconds\n+     * @param pattern  the pattern to use to format the date\n+     * @param timeZone  the timezone to use, may be <code>null</code>\n+     * @param locale  the locale to use, may be <code>null</code>\n      * @return the formatted date\n      */\n     public static String format(long millis, String pattern, TimeZone timeZone, Locale locale) {\n     }\n \n     /**\n-     * Format a date/time into a specific pattern in a timezone and locale.\n-     * \n-     * @param date  the date to format\n-     * @param pattern  the pattern to use to format the date\n-     * @param timeZone  the timezone to use, may be null\n-     * @param locale  the locale to use, may be null\n+     * <p>Format a date/time into a specific pattern in a timezone and locale.</p>\n+     * \n+     * @param date  the date to format\n+     * @param pattern  the pattern to use to format the date\n+     * @param timeZone  the timezone to use, may be <code>null</code>\n+     * @param locale  the locale to use, may be <code>null</code>\n      * @return the formatted date\n      */\n     public static String format(Date date, String pattern, TimeZone timeZone, Locale locale) {\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n import java.util.TimeZone;\n \n /**\n- * A suite of utilities surrounding the use of the Calendar and Date object.\n+ * <p>A suite of utilities surrounding the use of the\n+ * {@link java.util.Calendar} and {@link java.util.Date} object.</p>\n  *\n  * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n  * @author Stephen Colebourne\n  * @author Janek Bogucki\n  * @since 2.0\n- * @version $Id: DateUtils.java,v 1.5 2003/06/28 17:49:53 scolebourne Exp $\n+ * @version $Id: DateUtils.java,v 1.6 2003/07/14 22:25:05 bayard Exp $\n  */\n public class DateUtils {\n     \n \n     //-----------------------------------------------------------------------\n     /**\n-     * Round this date, leaving the field specified as the most significant\n-     * field.  For example, if you had the datetime of 28 Mar 2002\n-     * 13:45:01.231, if this was passed with HOUR, it would return 28 Mar\n-     * 2002 14:00:00.000.  If this was passed with MONTH, it would return\n-     * 1 April 2002 0:00:00.000.\n+     * <p>Round this date, leaving the field specified as the most\n+     * significant field.</p>\n+     *\n+     * <p>For example, if you had the datetime of 28 Mar 2002\n+     * 13:45:01.231, if this was passed with HOUR, it would return\n+     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n+     * would return 1 April 2002 0:00:00.000.</p>\n      * \n      * @param date  the date to work with\n-     * @param field  the field from <code>Calendar</code> or SEMI_MONTH\n+     * @param field  the field from <code>Calendar</code>\n+     *  or <code>SEMI_MONTH</code>\n      * @return the rounded date\n-     * @throws IllegalArgumentException if the date is null\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n      */\n     public static Date round(Date date, int field) {\n         if (date == null) {\n     }\n \n     /**\n-     * Round this date, leaving the field specified as the most significant\n-     * field.  For example, if you had the datetime of 28 Mar 2002\n-     * 13:45:01.231, if this was passed with HOUR, it would return 28 Mar\n-     * 2002 14:00:00.000.  If this was passed with MONTH, it would return\n-     * 1 April 2002 0:00:00.000.\n+     * <p>Round this date, leaving the field specified as the most\n+     * significant field.</p>\n+     *\n+     * <p>For example, if you had the datetime of 28 Mar 2002\n+     * 13:45:01.231, if this was passed with HOUR, it would return\n+     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n+     * would return 1 April 2002 0:00:00.000.</p>\n      * \n      * @param date  the date to work with\n-     * @param field  the field from <code>Calendar</code> or SEMI_MONTH\n+     * @param field  the field from <code>Calendar</code>\n+     *  or <code>SEMI_MONTH</code>\n      * @return the rounded date (a different object)\n-     * @throws IllegalArgumentException if the date is null\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n      */\n     public static Calendar round(Calendar date, int field) {\n         if (date == null) {\n     }\n \n     /**\n-     * Round this date, leaving the field specified as the most significant\n-     * field.  For example, if you had the datetime of 28 Mar 2002\n-     * 13:45:01.231, if this was passed with HOUR, it would return 28 Mar\n-     * 2002 14:00:00.000.  If this was passed with MONTH, it would return\n-     * 1 April 2002 0:00:00.000.\n+     * <p>Round this date, leaving the field specified as the most\n+     * significant field.</p>\n+     *\n+     * <p>For example, if you had the datetime of 28 Mar 2002\n+     * 13:45:01.231, if this was passed with HOUR, it would return\n+     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n+     * would return 1 April 2002 0:00:00.000.</p>\n      * \n      * @param date  the date to work with, either Date or Calendar\n-     * @param field  the field from <code>Calendar</code> or SEMI_MONTH\n+     * @param field  the field from <code>Calendar</code>\n+     *  or <code>SEMI_MONTH</code>\n      * @return the rounded date\n-     * @throws IllegalArgumentException if the date is null\n-     * @throws ClassCastException if the object type is not a Date or Calendar\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n+     * @throws ClassCastException if the object type is not a <code>Date</code>\n+     *  or <code>Calendar</code>\n      */\n     public static Date round(Object date, int field) {\n         if (date == null) {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Truncate this date, leaving the field specified as the most significant\n-     * field.  For example, if you had the datetime of 28 Mar 2002\n+     * <p>Truncate this date, leaving the field specified as the most\n+     * significant field.</p>\n+     *\n+     * <p>For example, if you had the datetime of 28 Mar 2002\n      * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n-     * 2002 13:00:00.000.  If this was passed with MONTH, it would return\n-     * 1 Mar 2002 0:00:00.000.\n+     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n+     * return 1 Mar 2002 0:00:00.000.</p>\n      * \n      * @param date  the date to work with\n-     * @param field  the field from <code>Calendar</code> or SEMI_MONTH\n+     * @param field  the field from <code>Calendar</code>\n+     *  or <code>SEMI_MONTH</code>\n      * @return the rounded date\n-     * @throws IllegalArgumentException if the date is null\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n      */\n     public static Date truncate(Date date, int field) {\n         if (date == null) {\n     }\n \n     /**\n-     * Truncate this date, leaving the field specified as the most significant\n-     * field.  For example, if you had the datetime of 28 Mar 2002\n+     * <p>Truncate this date, leaving the field specified as the most\n+     * significant field.</p>\n+     *\n+     * <p>For example, if you had the datetime of 28 Mar 2002\n      * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n-     * 2002 13:00:00.000.  If this was passed with MONTH, it would return\n-     * 1 Mar 2002 0:00:00.000.\n+     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n+     * return 1 Mar 2002 0:00:00.000.</p>\n      * \n      * @param date  the date to work with\n-     * @param field  the field from <code>Calendar</code> or SEMI_MONTH\n+     * @param field  the field from <code>Calendar</code>\n+     *  or <code>SEMI_MONTH</code>\n      * @return the rounded date (a different object)\n-     * @throws IllegalArgumentException if the date is null\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n      */\n     public static Calendar truncate(Calendar date, int field) {\n         if (date == null) {\n     }\n \n     /**\n-     * Truncate this date, leaving the field specified as the most significant\n-     * field.  For example, if you had the datetime of 28 Mar 2002\n+     * <p>Truncate this date, leaving the field specified as the most\n+     * significant field.</p>\n+     *\n+     * <p>For example, if you had the datetime of 28 Mar 2002\n      * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n-     * 2002 13:00:00.000.  If this was passed with MONTH, it would return\n-     * 1 Mar 2002 0:00:00.000.\n-     * \n-     * @param date  the date to work with, either Date or Calendar\n-     * @param field  the field from <code>Calendar</code> or SEMI_MONTH\n+     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n+     * return 1 Mar 2002 0:00:00.000.</p>\n+     * \n+     * @param date  the date to work with, either <code>Date</code>\n+     *  or <code>Calendar</code>\n+     * @param field  the field from <code>Calendar</code>\n+     *  or <code>SEMI_MONTH</code>\n      * @return the rounded date\n-     * @throws IllegalArgumentException if the date is null\n-     * @throws ClassCastException if the object type is not a Date or Calendar\n+     * @throws IllegalArgumentException if the date\n+     *  is <code>null</code>\n+     * @throws ClassCastException if the object type is not a\n+     *  <code>Date</code> or <code>Calendar</code>\n      */\n     public static Date truncate(Object date, int field) {\n         if (date == null) {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Internal calculation method\n+     * <p>Internal calculation method.</p>\n      * \n      * @param val  the calendar\n      * @param field  the field constant\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Parses a date string formatted in CVS format.\n+     * <p>Parses a date string formatted in CVS format.</p>\n      * \n      * @param dateStr  the date to parse\n      * @return the parsed date\n     }\n \n     /**\n-     * Parses a date string formatted in CVS format.\n+     * <p>Parses a date string formatted in CVS format.</p>\n      * \n      * @param dateStr  the date to parse\n      * @param locale  the locale to parse in\n \n     //-----------------------------------------------------------------------\n     /**\n-     * This constructs an Iterator that will start and stop over a date\n-     * range based on the focused date and the range style.  For instance,\n-     * passing Thursday, July 4, 2002 and a RANGE_MONTH_SUNDAY will return\n-     * an Iterator that starts with Sunday, June 30, 2002 and ends with\n-     * Saturday, August 3, 2002.\n+     * <p>This constructs an <code>Iterator</code> that will\n+     * start and stop over a date range based on the focused\n+     * date and the range style.</p>\n+     *\n+     * <p>For instance, passing Thursday, July 4, 2002 and a\n+     * <code>RANGE_MONTH_SUNDAY</code> will return an\n+     * <code>Iterator</code> that starts with Sunday, June 30,\n+     * 2002 and ends with Saturday, August 3, 2002.\n      * \n      * @param focus  the date to work with\n      * @param rangeStyle  the style constant to use\n      * @return the date iterator\n-     * @throws IllegalArgumentException if the date is null\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n      */\n     public static Iterator iterator(Date focus, int rangeStyle) {\n         if (focus == null) {\n     }\n \n     /**\n-     * This constructs an Iterator that will start and stop over a date\n-     * range based on the focused date and the range style.  For instance,\n-     * passing Thursday, July 4, 2002 and a RANGE_MONTH_SUNDAY will return\n-     * an Iterator that starts with Sunday, June 30, 2002 and ends with\n-     * Saturday, August 3, 2002.\n+     * <p>This constructs an <code>Iterator</code> that will\n+     * start and stop over a date range based on the focused\n+     * date and the range style.</p>\n+     *\n+     * <p>For instance, passing Thursday, July 4, 2002 and a\n+     * <code>RANGE_MONTH_SUNDAY</code> will return an\n+     * <code>Iterator</code> that starts with Sunday, June 30,\n+     * 2002 and ends with Saturday, August 3, 2002.\n      * \n      * @param focus  the date to work with\n      * @param rangeStyle  the style constant to use\n      * @return the date iterator\n-     * @throws IllegalArgumentException if the date is null\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n      */\n     public static Iterator iterator(Calendar focus, int rangeStyle) {\n         if (focus == null) {\n     }\n \n     /**\n-     * This constructs an Iterator that will start and stop over a date\n-     * range based on the focused date and the range style.  For instance,\n-     * passing Thursday, July 4, 2002 and a RANGE_MONTH_SUNDAY will return\n-     * an Iterator that starts with Sunday, June 30, 2002 and ends with\n-     * Saturday, August 3, 2002.\n-     * \n-     * @param focus  the date to work with, either Date or Calendar\n+     * <p>This constructs an <code>Iterator</code> that will\n+     * start and stop over a date range based on the focused\n+     * date and the range style.</p>\n+     *\n+     * <p>For instance, passing Thursday, July 4, 2002 and a\n+     * <code>RANGE_MONTH_SUNDAY</code> will return an\n+     * <code>Iterator</code> that starts with Sunday, June 30,\n+     * 2002 and ends with Saturday, August 3, 2002.</p>\n+     * \n+     * @param focus  the date to work with, either\n+     *  <code>Date</code> or <code>Calendar</code>\n      * @param rangeStyle  the style constant to use\n      * @return the date iterator\n-     * @throws IllegalArgumentException if the date is null\n-     * @throws ClassCastException if the object type is not a Date or Calendar\n+     * @throws IllegalArgumentException if the date\n+     *  is <code>null</code>\n+     * @throws ClassCastException if the object type is\n+     *  not a <code>Date</code> or <code>Calendar</code>\n      */\n     public static Iterator iterator(Object focus, int rangeStyle) {\n         if (focus == null) {\n     }\n \n     /**\n-     * Date iterator.\n+     * <p>Date iterator.</p>\n      */\n     static class DateIterator implements Iterator {\n         private final Calendar endFinal;\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n package org.apache.commons.lang.time;\n \n /**\n- * Duration formatting utilites and constants.\n+ * <p>Duration formatting utilites and constants.</p>\n  *\n  * @author Apache Ant - DateUtils\n  * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n  * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: DurationFormatUtils.java,v 1.2 2003/06/09 21:23:14 scolebourne Exp $\n+ * @version $Id: DurationFormatUtils.java,v 1.3 2003/07/14 22:25:05 bayard Exp $\n  */\n class DurationFormatUtils {\n     // TODO: Make class public once methods can fully select which fields to output\n \n     /**\n-     * DurationFormatUtils instances should NOT be constructed in standard programming.\n-     * <p>\n-     * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * <p>DurationFormatUtils instances should NOT be constructed in standard programming.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n      */\n     public DurationFormatUtils() {\n     }\n \n     /**\n-     * Format an elapsed time into a plurialization correct string.\n+     * <p>Format an elapsed time into a plurialization correct string.\n      * It is limited only to report elapsed time in minutes and\n-     * seconds and has the following behavior.\n+     * seconds and has the following behavior.</p>\n+     *\n      * <ul>\n-     * <li>minutes are not displayed when 0. (ie: \"45 seconds\")</li>\n-     * <li>seconds are always displayed in plural form (ie \"0 seconds\" or\n-     * \"10 seconds\") except for 1 (ie \"1 second\")</li>\n-     * </ul>\n+     *  <li>minutes are not displayed when <code>0</code>. (ie:\n+     *   &quot;45 seconds&quot;)</li>\n+     *  <li>seconds are always displayed in plural form (ie\n+     *   &quot;0 seconds&quot; or &quot;10 seconds&quot;) except\n+     *   for <code>1</code> (ie &quot;1 second&quot;)</li>\n+     *  </ul>\n      * \n      * @param millis  the elapsed time to report in milliseconds\n      * @return the formatted text in minutes/seconds\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n import java.util.TimeZone;\n \n /**\n- * FastDateFormat is a fast and thread-safe version of {@link java.text.SimpleDateFormat}.\n- * <p>\n- * Only formatting is supported, but all patterns are compatible with\n- * SimpleDateFormat (except timezones - see below).\n- * <p>\n- * Java 1.4 introduced a new pattern letter, 'Z', to represent time zones in\n- * RFC822 format (eg. +0800 or -1100). This pattern letter can be used here (on\n- * all JDK versions).\n- * <p>\n- * In addition, the pattern 'ZZ' has been made to represent ISO8601 full format\n- * time zones (eg. +08:00 or -11:00). This introduces a minor incompatability with\n- * Java 1.4, but at a gain of useful functionality.\n- * <p>\n- * NOTE: Code originally taken from the open source TeaTrove project.\n+ * <p>FastDateFormat is a fast and thread-safe version of\n+ * {@link java.text.SimpleDateFormat}.</p>\n+ *\n+ * <p>Only formatting is supported, but all patterns are compatible with\n+ * SimpleDateFormat (except timezones - see below).</p>\n+ *\n+ * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n+ * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n+ * This pattern letter can be used here (on all JDK versions).</p>\n+ *\n+ * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n+ * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n+ * This introduces a minor incompatability with Java 1.4, but at a gain of\n+ * useful functionality.</p>\n+ *\n+ * <p>NOTE: Code originally taken from the open source TreeTrove project.</p>\n  *\n  * @author Brian S O'Neill\n  * @author Sean Schofield\n  * @author Gary Gregory\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: FastDateFormat.java,v 1.7 2003/07/12 08:26:22 scolebourne Exp $\n+ * @version $Id: FastDateFormat.java,v 1.8 2003/07/14 22:25:05 bayard Exp $\n  */\n public class FastDateFormat extends Format {\n     // A lot of the speed in this class comes from caching, but some comes\n     // taking the value and adding (mathematically) the ASCII value for '0'.\n     // So, don't change this code! It works and is very fast.\n     \n-    /** FULL locale dependent date or time style */\n+    /**\n+     * FULL locale dependent date or time style.\n+     */\n     public static final int FULL = SimpleDateFormat.FULL;\n-    /** LONG locale dependent date or time style */\n+    /**\n+     * LONG locale dependent date or time style\n+     */\n     public static final int LONG = SimpleDateFormat.LONG;\n-    /** MEDIUM locale dependent date or time style */\n+    /**\n+     * MEDIUM locale dependent date or time style\n+     */\n     public static final int MEDIUM = SimpleDateFormat.MEDIUM;\n-    /** SHORT locale dependent date or time style */\n+    /**\n+     * SHORT locale dependent date or time style\n+     */\n     public static final int SHORT = SimpleDateFormat.SHORT;\n     \n     // package scoped as used by inner class\n     private static Map cDateTimeInstanceCache = new HashMap(7);\n     private static Map cTimeZoneDisplayCache = new HashMap(7);\n \n-    /** The pattern */\n+    /**\n+     * The pattern.\n+     */\n     private final String mPattern;\n-    /** The time zone */\n+    /**\n+     * The time zone.\n+     */\n     private final TimeZone mTimeZone;\n-    /** Whether the time zone overrides any on Calendars */\n+    /**\n+     * Whether the time zone overrides any on Calendars.\n+     */\n     private final boolean mTimeZoneForced;\n-    /** The locale */\n+    /**\n+     * The locale.\n+     */\n     private final Locale mLocale;\n-    /** Whether the locale overrides the default */\n+    /**\n+     * Whether the locale overrides the default.\n+     */\n     private final boolean mLocaleForced;\n-    /** The parsed rules */\n+    /**\n+     * The parsed rules.\n+     */\n     private Rule[] mRules;\n-    /** The estimated maximum length */\n+    /**\n+     * The estimated maximum length.\n+     */\n     private int mMaxLengthEstimate;\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a formatter instance using the default pattern in the default locale.\n+     * <p>Gets a formatter instance using the default pattern in the\n+     * default locale.</p>\n      * \n      * @return a date/time formatter\n      */\n     }\n \n     /**\n-     * Gets a formatter instance using the specified pattern in the default locale.\n-     * \n-     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n+     * <p>Gets a formatter instance using the specified pattern in the\n+     * default locale.</p>\n+     * \n+     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n+     *  pattern\n      * @return a pattern based date/time formatter\n      * @throws IllegalArgumentException if pattern is invalid\n      */\n     }\n \n     /**\n-     * Gets a formatter instance using the specified pattern and time zone.\n-     * \n-     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n-     * @param timeZone  optional time zone, overrides time zone of formatted date\n+     * <p>Gets a formatter instance using the specified pattern and\n+     * time zone.</p>\n+     * \n+     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n+     *  pattern\n+     * @param timeZone  optional time zone, overrides time zone of\n+     *  formatted date\n      * @return a pattern based date/time formatter\n      * @throws IllegalArgumentException if pattern is invalid\n      */\n     }\n \n     /**\n-     * Gets a formatter instance using the specified pattern and locale.\n-     * \n-     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n+     * <p>Gets a formatter instance using the specified pattern and\n+     * locale.</p>\n+     * \n+     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n+     *  pattern\n      * @param locale  optional locale, overrides system locale\n      * @return a pattern based date/time formatter\n      * @throws IllegalArgumentException if pattern is invalid\n     }\n \n     /**\n-     * Gets a formatter instance using the specified pattern, time zone and locale.\n-     * \n-     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n-     * @param timeZone  optional time zone, overrides time zone of formatted date\n+     * <p>Gets a formatter instance using the specified pattern, time zone\n+     * and locale.</p>\n+     * \n+     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n+     *  pattern\n+     * @param timeZone  optional time zone, overrides time zone of\n+     *  formatted date\n      * @param locale  optional locale, overrides system locale\n      * @return a pattern based date/time formatter\n-     * @throws IllegalArgumentException if pattern is invalid or null\n+     * @throws IllegalArgumentException if pattern is invalid\n+     *  or <code>null</code>\n      */\n     public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {\n         FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);\n     }\n \n     /**\n-     * Gets a date formatter instance using the specified style, time zone and locale.\n+     * <p>Gets a date formatter instance using the specified style, time\n+     * zone and locale.</p>\n      * \n      * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n-     * @param timeZone  optional time zone, overrides time zone of formatted date\n+     * @param timeZone  optional time zone, overrides time zone of\n+     *  formatted date\n      * @param locale  optional locale, overrides system locale\n      * @return a localized standard date formatter\n-     * @throws IllegalArgumentException if the Locale has no date pattern defined\n+     * @throws IllegalArgumentException if the Locale has no date\n+     *  pattern defined\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n         Object key = new Integer(style);\n     }\n \n     /**\n-     * Gets a time formatter instance using the specified style, time zone and locale.\n+     * <p>Gets a time formatter instance using the specified style, time\n+     * zone and locale.</p>\n      * \n      * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n-     * @param timeZone  optional time zone, overrides time zone of formatted time\n+     * @param timeZone  optional time zone, overrides time zone of\n+     *  formatted time\n      * @param locale  optional locale, overrides system locale\n      * @return a localized standard time formatter\n-     * @throws IllegalArgumentException if the Locale has no time pattern defined\n+     * @throws IllegalArgumentException if the Locale has no time\n+     *  pattern defined\n      */\n     public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale) {\n         Object key = new Integer(style);\n     }\n \n     /**\n-     * Gets a date/time formatter instance using the specified style, time zone and locale.\n+     * <p>Gets a date/time formatter instance using the specified style,\n+     * time zone and locale.</p>\n      * \n      * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n      * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n-     * @param timeZone  optional time zone, overrides time zone of formatted date\n+     * @param timeZone  optional time zone, overrides time zone of\n+     *  formatted date\n      * @param locale  optional locale, overrides system locale\n      * @return a localized standard date/time formatter\n-     * @throws IllegalArgumentException if the Locale has no date/time pattern defined\n+     * @throws IllegalArgumentException if the Locale has no date/time\n+     *  pattern defined\n      */\n     public static synchronized FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the time zone display name, using a cache for performance.\n+     * <p>Gets the time zone display name, using a cache for performance.</p>\n      * \n      * @param tz  the zone to query\n      * @param daylight  true if daylight savings\n-     * @param style  the style to use TimeZone.LONG or TimeZone.SHORT\n+     * @param style  the style to use <code>TimeZone.LONG</code>\n+     *  or <code>TimeZone.SHORT</code>\n      * @param locale  the locale to use\n      * @return the textual name of the time zone\n      */\n     }\n \n     /**\n-     * Gets the default pattern.\n+     * <p>Gets the default pattern.</p>\n      * \n      * @return the default pattern\n      */\n     // Constructor\n     //-----------------------------------------------------------------------\n     /**\n-     * Constructs a new FastDateFormat.\n-     * \n-     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n-     * @param timeZone  time zone to use, null means use default for Date and\n-     *                  value within for Calendar\n-     * @param locale  locale, null means use system default\n-     * @throws IllegalArgumentException if pattern is invalid or null\n+     * <p>Constructs a new FastDateFormat.</p>\n+     * \n+     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n+     *  pattern\n+     * @param timeZone  time zone to use, <code>null</code> means use\n+     *  default for <code>Date</code> and value within for\n+     *  <code>Calendar</code>\n+     * @param locale  locale, <code>null</code> means use system\n+     *  default\n+     * @throws IllegalArgumentException if pattern is invalid or\n+     *  <code>null</code>\n      */\n     protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\n         super();\n     }\n \n     /**\n-     * Initialise the instance for first use.\n+     * <p>Initialise the instance for first use.</p>\n      */\n     protected void init() {\n         List rulesList = parsePattern();\n     // Parse the pattern\n     //-----------------------------------------------------------------------\n     /**\n-     * Returns a list of Rules given a pattern.\n-     * \n-     * @return a List of Rule objects\n+     * <p>Returns a list of Rules given a pattern.</p>\n+     * \n+     * @return a <code>List</code> of Rule objects\n      * @throws IllegalArgumentException if pattern is invalid\n      */\n     protected List parsePattern() {\n     }\n \n     /**\n-     * Performs the parsing of tokens.\n+     * <p>Performs the parsing of tokens.</p>\n      * \n      * @param pattern  the pattern\n      * @param indexRef  index references\n     }\n \n     /**\n-     * Gets an appropriate rule for the padding required.\n+     * <p>Gets an appropriate rule for the padding required.</p>\n      * \n      * @param field  the field to get a rule for\n      * @param padding  the padding required\n     // Format methods\n     //-----------------------------------------------------------------------\n     /**\n-     * Format either a Date or a Calendar object.\n+     * <p>Format either a <code>Date</code> or a\n+     * <code>Calendar</code> object.</p>\n      * \n      * @param obj  the object to format\n      * @param toAppendTo  the buffer to append to\n     }\n \n     /**\n-     * Formats a Date object.\n+     * <p>Formats a <code>Date</code> object.</p>\n      * \n      * @param date  the date to format\n      * @return the formatted string\n     }\n \n     /**\n-     * Formats a Calendar object.\n+     * <p>Formats a <code>Calendar</code> object.</p>\n      * \n      * @param calendar  the calendar to format\n      * @return the formatted string\n     }\n \n     /**\n-     * Formats a Date object into the supplied StringBuffer.\n+     * <p>Formats a <code>Date</code> object into the\n+     * supplied <code>StringBuffer</code>.</p>\n      * \n      * @param date  the date to format\n      * @param buf  the buffer to format into\n     }\n \n     /**\n-     * Formats a Calendar object into the supplied StringBuffer.\n+     * <p>Formats a <code>Calendar</code> object into the\n+     * supplied <code>StringBuffer</code>.</p>\n      * \n      * @param calendar  the calendar to format\n      * @param buf  the buffer to format into\n     }\n \n     /**\n-     * Performs the formatting by applying the rules to the specified calendar.\n+     * <p>Performs the formatting by applying the rules to the\n+     * specified calendar.</p>\n      * \n      * @param calendar  the calendar to format\n      * @param buf  the buffer to format into\n     // Parsing\n     //-----------------------------------------------------------------------\n     /**\n-     * Parsing not supported.\n+     * <p>Parsing not supported.</p>\n      * \n      * @param source  the string to parse\n      * @param pos  the parsing position\n-     * @return null as not supported\n+     * @return <code>null</code> as not supported\n      */\n     public Object parseObject(String source, ParsePosition pos) {\n         pos.setIndex(0);\n     // Accessors\n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the pattern used by this formatter.\n+     * <p>Gets the pattern used by this formatter.</p>\n      * \n      * @return the pattern, {@link java.text.SimpleDateFormat} compatible\n      */\n     }\n \n     /**\n-     * Gets the time zone used by this formatter.\n-     * <p>\n-     * This zone is always used for Date formatting.\n-     * If a Calendar is passed in to be formatted, the time zone on that may\n-     * be used depending on {@link #getTimeZoneOverridesCalendar()}.\n+     * <p>Gets the time zone used by this formatter.</p>\n+     *\n+     * <p>This zone is always used for <code>Date</code> formatting.\n+     * If a <code>Calendar</code> is passed in to be formatted, the\n+     * time zone on that may be used depending on\n+     * {@link #getTimeZoneOverridesCalendar()}.</p>\n      * \n      * @return the time zone\n      */\n     }\n \n     /**\n-     * Returns true if the time zone of the calendar overrides the time zone\n-     * of the formatter\n-     * \n-     * @return true if time zone of formatter overridden for calendars\n+     * <p>Returns <code>true</code> if the time zone of the\n+     * calendar overrides the time zone of the formatter.</p>\n+     * \n+     * @return <code>true</code> if time zone of formatter\n+     *  overridden for calendars\n      */\n     public boolean getTimeZoneOverridesCalendar() {\n         return mTimeZoneForced;\n     }\n \n     /**\n-     * Gets the locale used by this formatter.\n+     * <p>Gets the locale used by this formatter.</p>\n      * \n      * @return the locale\n      */\n     }\n \n     /**\n-     * Gets  an estimate for the maximum string length that the formatter will produce.\n-     * The actual formatted length will almost always be less than or equal to this amount.\n+     * <p>Gets  an estimate for the maximum string length that the\n+     * formatter will produce.</p>\n+     *\n+     * <p>The actual formatted length will almost always be less than or\n+     * equal to this amount.</p>\n      * \n      * @return the maximum formatted length\n      */\n     // Basics\n     //-----------------------------------------------------------------------\n     /**\n-     * Compare two objects for equality.\n+     * <p>Compare two objects for equality.</p>\n      * \n      * @param obj  the object to compare to\n-     * @return true if equal\n+     * @return <code>true</code> if equal\n      */\n     public boolean equals(Object obj) {\n         if (obj instanceof FastDateFormat == false) {\n     }\n \n     /**\n-     * A suitable hashcode.\n+     * <p>A suitable hashcode.</p>\n      * \n      * @return a hashcode compatable with equals\n      */\n     }\n \n     /**\n-     * Gets a debugging string version of this formatter.\n+     * <p>Gets a debugging string version of this formatter.</p>\n      * \n      * @return a debugging string\n      */\n     // Rules\n     //-----------------------------------------------------------------------\n     /**\n-     * Inner class defining a rule.\n+     * <p>Inner class defining a rule.</p>\n      */\n     private interface Rule {\n         int estimateLength();\n     }\n \n     /**\n-     * Inner class defining a numeric rule.\n+     * <p>Inner class defining a numeric rule.</p>\n      */\n     private interface NumberRule extends Rule {\n         void appendTo(StringBuffer buffer, int value);\n     }\n \n     /**\n-     * Inner class to output a constant single character.\n+     * <p>Inner class to output a constant single character.</p>\n      */\n     private static class CharacterLiteral implements Rule {\n         private final char mValue;\n     }\n \n     /**\n-     * Inner class to output a constant string.\n+     * <p>Inner class to output a constant string.</p>\n      */\n     private static class StringLiteral implements Rule {\n         private final String mValue;\n     }\n \n     /**\n-     * Inner class to output one of a set of values.\n+     * <p>Inner class to output one of a set of values.</p>\n      */\n     private static class TextField implements Rule {\n         private final int mField;\n     }\n \n     /**\n-     * Inner class to output an unpadded number.\n+     * <p>Inner class to output an unpadded number.</p>\n      */\n     private static class UnpaddedNumberField implements NumberRule {\n         static final UnpaddedNumberField INSTANCE_YEAR = new UnpaddedNumberField(Calendar.YEAR);\n     }\n \n     /**\n-     * Inner class to output an unpadded month.\n+     * <p>Inner class to output an unpadded month.</p>\n      */\n     private static class UnpaddedMonthField implements NumberRule {\n         static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();\n     }\n \n     /**\n-     * Inner class to output a padded number.\n+     * <p>Inner class to output a padded number.</p>\n      */\n     private static class PaddedNumberField implements NumberRule {\n         private final int mField;\n     }\n \n     /**\n-     * Inner class to output a two digit number.\n+     * <p>Inner class to output a two digit number.</p>\n      */\n     private static class TwoDigitNumberField implements NumberRule {\n         private final int mField;\n     }\n \n     /**\n-     * Inner class to output a two digit year.\n+     * <p>Inner class to output a two digit year.</p>\n      */\n     private static class TwoDigitYearField implements NumberRule {\n         static final TwoDigitYearField INSTANCE = new TwoDigitYearField();\n     }\n \n     /**\n-     * Inner class to output a two digit month.\n+     * <p>Inner class to output a two digit month.</p>\n      */\n     private static class TwoDigitMonthField implements NumberRule {\n         static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();\n     }\n \n     /**\n-     * Inner class to output the twelve hour field.\n+     * <p>Inner class to output the twelve hour field.</p>\n      */\n     private static class TwelveHourField implements NumberRule {\n         private final NumberRule mRule;\n     }\n \n     /**\n-     * Inner class to output the twenty four hour field.\n+     * <p>Inner class to output the twenty four hour field.</p>\n      */\n     private static class TwentyFourHourField implements NumberRule {\n         private final NumberRule mRule;\n     }\n \n     /**\n-     * Inner class to output a time zone name.\n+     * <p>Inner class to output a time zone name.</p>\n      */\n     private static class TimeZoneNameRule implements Rule {\n         private final TimeZone mTimeZone;\n     }\n \n     /**\n-     * Inner class to output a time zone as a number +/-HHMM or +/-HH:MM.\n+     * <p>Inner class to output a time zone as a number <code>+/-HHMM</code>\n+     * or <code>+/-HH:MM</code>.</p>\n      */\n     private static class TimeZoneNumberRule implements Rule {\n         static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);\n \n     // ----------------------------------------------------------------------\n     /**\n-     * Inner class that acts as a compound key for time zone names.\n+     * <p>Inner class that acts as a compound key for time zone names.</p>\n      */\n     private static class TimeZoneDisplayKey {\n         private final TimeZone mTimeZone;\n \n     // ----------------------------------------------------------------------\n     /**\n-     * Helper class for creating compound objects.  One use for this class is to create a\n-     * hashtable key out of multiple objects.\n+     * <p>Helper class for creating compound objects.</p>\n+     *\n+     * <p>One use for this class is to create a hashtable key\n+     * out of multiple objects.</p>\n      */\n     private static class Pair {\n         private final Object mObj1;\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n  * \n  * <p>To start the watch, call {@link #start()}. At this point you can:</p>\n  * <ul>\n- * <li>{@link #split()} the watch to get the time whilst the watch continues in the\n- *  background. {@link #unsplit()} will remove the effect of the split. At this point,\n- *  these three options are available again.\n- * <li>{@link #suspend()} the watch to pause it. {@link #resume()} allows the watch\n- *  to continue. Any time between the suspend and resume will not be counted in\n- *  the total. At this point, these three options are available again.\n- * <li>{@link #stop()} the watch to complete the timing session.\n+ *  <li>{@link #split()} the watch to get the time whilst the watch continues in the\n+ *   background. {@link #unsplit()} will remove the effect of the split. At this point,\n+ *   these three options are available again.</li>\n+ *  <li>{@link #suspend()} the watch to pause it. {@link #resume()} allows the watch\n+ *   to continue. Any time between the suspend and resume will not be counted in\n+ *   the total. At this point, these three options are available again.</li>\n+ *  <li>{@link #stop()} the watch to complete the timing session.</li>\n  * </ul>\n+ *\n  * <p>It is intended that the output methods {@link #toString()} and {@link #getTime()}\n  * should only be called after stop, split or suspend, however a suitable result will\n  * be returned at other points.</p>\n  * @author Henri Yandell\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: StopWatch.java,v 1.4 2003/06/08 23:14:23 scolebourne Exp $\n+ * @version $Id: StopWatch.java,v 1.5 2003/07/14 22:25:05 bayard Exp $\n  */\n public class StopWatch {\n     \n-    /** The start time */\n+    /**\n+     * The start time.\n+     */\n     private long startTime = -1;\n-    /** The stop time */\n+    /**\n+     * The stop time.\n+     */\n     private long stopTime = -1;\n \n     /**\n--- a/src/java/org/apache/commons/lang/util/BitField.java\n+++ b/src/java/org/apache/commons/lang/util/BitField.java\n package org.apache.commons.lang.util;\n \n /**\n- * Manage operations dealing with bit-mapped fields.\n- * <p>\n- * Code originated from the POI project.\n+ * <p>Manage operations dealing with bit-mapped fields.</p>\n+ *\n+ * <p>Code originated from the POI project.</p>\n  *\n  * @author Scott Sanders (sanders at apache dot org)\n  * @author Marc Johnson (mjohnson at apache dot org)\n  * @author Andrew C. Oliver (acoliver at apache dot org)\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: BitField.java,v 1.5 2003/04/09 00:07:49 ggregory Exp $\n+ * @version $Id: BitField.java,v 1.6 2003/07/14 22:25:06 bayard Exp $\n  */\n public class BitField {\n     \n     private final int _shift_count;\n \n     /**\n-     * Create a BitField instance\n+     * <p>Create a BitField instance.</p>\n      *\n      * @param mask the mask specifying which bits apply to this\n-     *             BitField. Bits that are set in this mask are the\n-     *             bits that this BitField operates on\n+     *  BitField. Bits that are set in this mask are the bits\n+     *  that this BitField operates on\n      */\n     public BitField(final int mask) {\n         _mask = mask;\n     }\n \n     /**\n-     * Obtain the value for the specified BitField, appropriately\n-     * shifted right. Many users of a BitField will want to treat the\n-     * specified bits as an int value, and will not want to be aware\n-     * that the value is stored as a BitField (and so shifted left so\n-     * many bits)\n+     * <p>Obtain the value for the specified BitField, appropriately\n+     * shifted right.</p>\n+     *\n+     * <p>Many users of a BitField will want to treat the specified\n+     * bits as an int value, and will not want to be aware that the\n+     * value is stored as a BitField (and so shifted left so many\n+     * bits).</p>\n      *\n      * @param holder the int data containing the bits we're interested\n-     *               in\n-     *\n+     *  in\n      * @return the selected bits, shifted right appropriately\n      */\n     public int getValue(final int holder) {\n     }\n \n     /**\n-     * Obtain the value for the specified BitField, appropriately\n-     * shifted right, as a short. Many users of a BitField will want\n-     * to treat the specified bits as an int value, and will not want\n-     * to be aware that the value is stored as a BitField (and so\n-     * shifted left so many bits)\n-     *\n-     * @param holder the short data containing the bits we're\n-     *               interested in\n-     *\n+     * <p>Obtain the value for the specified BitField, appropriately\n+     * shifted right, as a short.</p>\n+     *\n+     * <p>Many users of a BitField will want to treat the specified\n+     * bits as an int value, and will not want to be aware that the\n+     * value is stored as a BitField (and so shifted left so many\n+     * bits).</p>\n+     *\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n      * @return the selected bits, shifted right appropriately\n      */\n     public short getShortValue(final short holder) {\n     }\n \n     /**\n-     * Obtain the value for the specified BitField, unshifted\n-     *\n-     * @param holder the int data containing the bits we're interested\n-     *               in\n-     *\n+     * <p>Obtain the value for the specified BitField, unshifted.</p>\n+     *\n+     * @param holder the int data containing the bits we're\n+     *  interested in\n      * @return the selected bits\n      */\n     public int getRawValue(final int holder) {\n     }\n \n     /**\n-     * Obtain the value for the specified BitField, unshifted\n-     *\n-     * @param holder the short data containing the bits we're\n-     *               interested in\n-     *\n+     * <p>Obtain the value for the specified BitField, unshifted.</p>\n+     *\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n      * @return the selected bits\n      */\n     public short getShortRawValue(final short holder) {\n     }\n \n     /**\n-     * Returns whether the field is set or not. This is most commonly used for a\n-     * single-bit field, which is often used to represent a boolean\n-     * value; the results of using it for a multi-bit field is to\n-     * determine whether *any* of its bits are set\n+     * <p>Returns whether the field is set or not.</p>\n+     *\n+     * <p>This is most commonly used for a single-bit field, which is\n+     * often used to represent a boolean value; the results of using\n+     * it for a multi-bit field is to determine whether *any* of its\n+     * bits are set.</p>\n      *\n      * @param holder the int data containing the bits we're interested\n-     *               in\n-     *\n-     * @return true if any of the bits are set, else false\n+     *  in\n+     * @return <code>true</code> if any of the bits are set,\n+     *  else <code>false</code>\n      */\n     public boolean isSet(final int holder) {\n         return (holder & _mask) != 0;\n     }\n \n     /**\n-     * Returns whether all of the bits are set or not. This is a stricter test than\n-     * isSet, in that all of the bits in a multi-bit set must be set\n-     * for this method to return true\n-     *\n-     * @param holder the int data containing the bits we're interested\n-     *               in\n-     *\n-     * @return true if all of the bits are set, else false\n+     * <p>Returns whether all of the bits are set or not.</p>\n+     *\n+     * <p>This is a stricter test than {@link #isSet(int)},\n+     * in that all of the bits in a multi-bit set must be set\n+     * for this method to return <code>true</code>.</p>\n+     *\n+     * @param holder the int data containing the bits we're\n+     *  interested in\n+     * @return <code>true</code> if all of the bits are set,\n+     *  else <code>false</code>\n      */\n     public boolean isAllSet(final int holder) {\n         return (holder & _mask) == _mask;\n     }\n \n     /**\n-     * Replace the bits with new values.\n-     *\n-     * @param holder the int data containint the bits we're interested\n-     *               in\n+     * <p>Replace the bits with new values.</p>\n+     *\n+     * @param holder the int data containint the bits we're\n+     *  interested in\n      * @param value the new value for the specified bits\n-     *\n      * @return the value of holder with the bits from the value\n-     *         parameter replacing the old bits\n+     *  parameter replacing the old bits\n      */\n     public int setValue(final int holder, final int value) {\n         return (holder & ~_mask) | ((value << _shift_count) & _mask);\n     }\n \n     /**\n-     * Replace the bits with new values.\n-     *\n-     * @param holder the short data containing the bits we're\n-     *               interested in\n+     * <p>Replace the bits with new values.</p>\n+     *\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n      * @param value the new value for the specified bits\n-     *\n      * @return the value of holder with the bits from the value\n-     *         parameter replacing the old bits\n+     *  parameter replacing the old bits\n      */\n     public short setShortValue(final short holder, final short value) {\n         return (short) setValue(holder, value);\n     }\n \n     /**\n-     * Clear the bits.\n-     *\n-     * @param holder the int data containing the bits we're interested\n-     *               in\n-     *\n+     * <p>Clear the bits.</p>\n+     *\n+     * @param holder the int data containing the bits we're\n+     *  interested in\n      * @return the value of holder with the specified bits cleared\n-     *         (set to 0)\n+     *  (set to <code>0</code>)\n      */\n     public int clear(final int holder) {\n         return holder & ~_mask;\n     }\n \n     /**\n-     * Clear the bits.\n-     *\n-     * @param holder the short data containing the bits we're\n-     *               interested in\n-     *\n+     * <p>Clear the bits.</p>\n+     *\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n      * @return the value of holder with the specified bits cleared\n-     *         (set to 0)\n+     *  (set to <code>0</code>)\n      */\n     public short clearShort(final short holder) {\n         return (short) clear(holder);\n     }\n \n     /**\n-     * Clear the bits.\n+     * <p>Clear the bits.</p>\n      *\n      * @param holder the byte data containing the bits we're\n-     *               interested in\n+     *  interested in\n      *\n      * @return the value of holder with the specified bits cleared\n-     *         (set to 0)\n+     *  (set to <code>0</code>)\n      */\n     public byte clearByte(final byte holder) {\n         return (byte) clear(holder);\n     }\n \n     /**\n-     * Set the bits.\n-     *\n-     * @param holder the int data containing the bits we're interested\n-     *               in\n-     *\n-     * @return the value of holder with the specified bits set to 1\n+     * <p>Set the bits.</p>\n+     *\n+     * @param holder the int data containing the bits we're\n+     *  interested in\n+     * @return the value of holder with the specified bits set\n+     *  to <code>1</code>\n      */\n     public int set(final int holder) {\n         return holder | _mask;\n     }\n \n     /**\n-     * Set the bits.\n-     *\n-     * @param holder the short data containing the bits we're\n-     *               interested in\n-     *\n-     * @return the value of holder with the specified bits set to 1\n+     * <p>Set the bits.</p>\n+     *\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n+     * @return the value of holder with the specified bits set\n+     *  to <code>1</code>\n      */\n     public short setShort(final short holder) {\n         return (short) set(holder);\n     }\n \n     /**\n-     * Set the bits.\n+     * <p>Set the bits.</p>\n      *\n      * @param holder the byte data containing the bits we're\n-     *               interested in\n-     *\n-     * @return the value of holder with the specified bits set to 1\n+     *  interested in\n+     *\n+     * @return the value of holder with the specified bits set\n+     *  to <code>1</code>\n      */\n     public byte setByte(final byte holder) {\n         return (byte) set(holder);\n     }\n \n     /**\n-     * Set a boolean BitField\n-     *\n-     * @param holder the int data containing the bits we're interested\n-     *               in\n+     * <p>Set a boolean BitField.</p>\n+     *\n+     * @param holder the int data containing the bits we're\n+     *  interested in\n      * @param flag indicating whether to set or clear the bits\n-     *\n      * @return the value of holder with the specified bits set or\n      *         cleared\n      */\n     }\n \n     /**\n-     * Set a boolean BitField\n-     *\n-     * @param holder the short data containing the bits we're\n-     *               interested in\n+     * <p>Set a boolean BitField.</p>\n+     *\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n      * @param flag indicating whether to set or clear the bits\n-     *\n      * @return the value of holder with the specified bits set or\n-     *         cleared\n+     *  cleared\n      */\n     public short setShortBoolean(final short holder, final boolean flag) {\n         return flag ? setShort(holder) : clearShort(holder);\n     }\n \n     /**\n-     * Set a boolean BitField\n+     * <p>Set a boolean BitField.</p>\n      *\n      * @param holder the byte data containing the bits we're\n-     *               interested in\n+     *  interested in\n      * @param flag indicating whether to set or clear the bits\n-     *\n      * @return the value of holder with the specified bits set or\n-     *         cleared\n+     *  cleared\n      */\n     public byte setByteBoolean(final byte holder, final boolean flag) {\n         return flag ? setByte(holder) : clearByte(holder);\n--- a/src/java/org/apache/commons/lang/util/IdentifierUtils.java\n+++ b/src/java/org/apache/commons/lang/util/IdentifierUtils.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: IdentifierUtils.java,v 1.5 2003/05/16 22:06:43 scolebourne Exp $\n+ * @version $Id: IdentifierUtils.java,v 1.6 2003/07/14 22:25:06 bayard Exp $\n  */\n public class IdentifierUtils {\n \n      * \n      * <p>The objects returned are:</p>\n      * <ul>\n-     * <li>new Long(0L)\n-     * <li>new Long(1L)\n-     * <li>new Long(2L)\n-     * <li>...\n+     * <li>new Long(0L)</li>\n+     * <li>new Long(1L)</li>\n+     * <li>new Long(2L)</li>\n+     * <li>...</li>\n      * </ul>\n \t */\n     public static final LongIdentifierFactory LONG_IDENTIFIER_FACTORY = new LongNumericIdentifierFactory(true, 0L);\n      * \n      * <p>The objects returned are:</p>\n      * <ul>\n-     * <li>\"0\"\n-     * <li>\"1\"\n-     * <li>\"2\"\n-     * <li>...\n+     * <li>&quot;0&quot;</li>\n+     * <li>&quot;1&quot;</li>\n+     * <li>&quot;2&quot;</li>\n+     * <li>...</li>\n      * </ul>\n      */\n     public static final StringIdentifierFactory STRING_NUMERIC_IDENTIFIER_FACTORY = new StringNumericIdentifierFactory(true, 0L);\n      * \n      * <p>The objects returned are:</p>\n      * <ul>\n-     * <li>\"000000000000001\"\n-     * <li>\"000000000000002\"\n-     * <li>\"000000000000003\"\n+     * <li>&quot;000000000000001&quot;</li>\n+     * <li>&quot;000000000000002&quot;</li>\n+     * <li>&quot;000000000000003&quot;</li>\n      * <li>...\n-     * <li>\"00000000000000y\"\n-     * <li>\"00000000000000z\"\n-     * <li>\"000000000000010\"\n-     * <li>\"000000000000011\"\n+     * <li>&quot;00000000000000y&quot;</li>\n+     * <li>&quot;00000000000000z&quot;</li>\n+     * <li>&quot;000000000000010&quot;</li>\n+     * <li>&quot;000000000000011&quot;</li>\n      * <li>...\n-     * <li>\"00000000000001z\"\n-     * <li>\"000000000000020\"\n-     * <li>...\n+     * <li>&quot;00000000000001z&quot;</li>\n+     * <li>&quot;000000000000020&quot;</li>\n+     * <li>...</li>\n      * </ul>\n      */\n     public static final StringIdentifierFactory STRING_ALPHANUMERIC_IDENTIFIER_FACTORY = new StringAlphanumericIdentifierFactory(true, 15);\n     \n     /**\n      * <p>Gets the next identifier using the singleton instance of the\n-     * Long factory.\n-     * </p>\n+     * Long factory.</p>\n      * \n      * <p>The singleton instance will wrap, so in a long-lived server, the id\n      * may be duplicated.</p>\n      * <p>Gets a new identifier factory that returns a series of Long objects\n      * increasing in size.</p>\n      * \n-     * @param wrap  should the factory wrap when it reaches the maximum \n+     * @param wrap should the factory wrap when it reaches the maximum\n      *  long value (or throw an IllegalStateException)\n      * @param initialValue  the initial long value to start at\n      * @return a new identifier factory\n     \n     /**\n      * <p>Gets the next identifier using the singleton instance of the\n-     * String Numeric factory.\n-     * </p>\n+     * String Numeric factory.</p>\n      * \n      * <p>The singleton instance will wrap, so in a long-lived server, the id\n      * may be duplicated.</p>\n      * <p>Gets a new identifier factory that returns a series of String objects\n      * representing numbers increasing in size.</p>\n      * \n-     * @param wrap  should the factory wrap when it reaches the maximum \n+     * @param wrap should the factory wrap when it reaches the maximum\n      *  long value (or throw an IllegalStateException)\n      * @param initialValue  the initial long value to start at\n      * @return a new identifier factory\n     \n     /**\n      * <p>Gets the next identifier using the singleton instance of the\n-     * String Alphanumeric factory.\n-     * </p>\n+     * String Alphanumeric factory.</p>\n      * \n      * <p>The singleton instance will wrap, so in a long-lived server, the id\n      * may be duplicated.</p>\n      * <p>Gets a new identifier factory that returns a series of String objects\n      * representing numbers increasing in size in base-36.</p>\n      * \n-     * @param wrap  should the factory wrap when it reaches the maximum \n+     * @param wrap should the factory wrap when it reaches the maximum\n      *  size (or throw an IllegalStateException)\n      * @param size  the number of characters the id should fill\n      * @return a new identifier factory\n     \n     /**\n      * <p>Gets the next identifier using the singleton instance of the\n-     * String Session factory.\n-     * </p>\n+     * String Session factory.</p>\n      * \n      * <p>The generation routine is based on a random number and a counter\n      * within a 2 second time interval.</p>\n \n     /**\n      * <p>Gets a new identifier factory that returns a series of String objects\n-     * that appear to be random and are suitable for use as session identifiers.\n-     * </p>\n+     * that appear to be random and are suitable for use as session identifiers.</p>\n      * \n      * <p>The generation routine is based on a random number and a counter\n      * within a 2 second time interval.</p>\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <code>LongIdentifierFactory</code> is an Identifier Factory\n-     * that generates an incrementing number as a Long object.\n+     * <p><code>LongIdentifierFactory</code> is an Identifier Factory\n+     * that generates an incrementing number as a Long object.</p>\n      *\n      * @author Stephen Colebourne\n      */\n         private long count = 0;\n     \n         /**\n-         * Constructor.\n-         * \n-         * @param wrap  should the factory wrap when it reaches the maximum \n+         * <p>Constructor.</p>\n+         * \n+         * @param wrap should the factory wrap when it reaches the maximum\n          *  long value (or throw an exception)\n          * @param initialValue  the initial long value to start at\n          */\n         }\n \n         /**\n-         * Gets the next new identifier.\n+         * <p>Gets the next new identifier.</p>\n          * \n          * @return a new identifier as a Long\n          */\n         }\n         \n         /**\n-         * Gets the next new identifier.\n+         * <p>Gets the next new identifier.</p>\n          * \n          * @return a new identifier as a Long\n          */\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <code>StringNumericIdentifierFactory</code> is an Identifier Factory\n-     * that generates an incrementing number as a String object.\n+     * <p><code>StringNumericIdentifierFactory</code> is an Identifier Factory\n+     * that generates an incrementing number as a String object.</p>\n      *\n      * @author Stephen Colebourne\n      */\n         private long count = 0;\n         \n         /**\n-         * Constructor.\n-         * \n-         * @param wrap  should the factory wrap when it reaches the maximum \n+         * <p>Constructor.</p>\n+         * \n+         * @param wrap should the factory wrap when it reaches the maximum\n          *  long value (or throw an exception)\n          * @param initialValue  the initial long value to start at\n          */\n         }\n \n         /**\n-         * Gets the next new identifier.\n+         * <p>Gets the next new identifier.</p>\n          * \n          * @return a new identifier as a String\n          */\n         }\n         \n         /**\n-         * Gets the next new identifier.\n+         * <p>Gets the next new identifier.</p>\n          * \n          * @return a new identifier as a String\n          */\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <code>StringAlphanumericIdentifierFactory</code> is an Identifier Factory\n+     * <p><code>StringAlphanumericIdentifierFactory</code> is an Identifier Factory\n      * that generates an incrementing incrementing number in base 36 as a String\n-     * object.\n+     * object.</p>\n      *\n      * @author Stephen Colebourne\n      */\n         private char[] count = null;\n         \n         /**\n-         * Constructor.\n-         * \n-         * @param wrap  should the factory wrap when it reaches the maximum \n+         * <p>Constructor.</p>\n+         * \n+         * @param wrap should the factory wrap when it reaches the maximum\n          *  long value (or throw an exception)\n          * @param size  the size of the identifier\n          */\n         }\n \n         /**\n-         * Gets the next new identifier.\n+         * <p>Gets the next new identifier.</p>\n          * \n          * @return a new identifier as a String\n          */\n         }\n         \n         /**\n-         * Gets the next new identifier.\n+         * <p>Gets the next new identifier.</p>\n          * \n          * @return a new identifier as a String\n          */\n         private Random randomizer = new Random();\n \n         /**\n-         * Constructor.\n+         * <p>Constructor.</p>\n          */\n         private StringSessionIdentifierFactory() {\n             super();\n         }\n         \n         /**\n-         * Gets the next identifier.\n+         * <p>Gets the next identifier.</p>\n          * \n          * @return the next 10 char String identifier\n          */\n         }\n \n         /**\n-         * Gets the next new identifier. Only guaranteed unique within\n-         * this JVM, but fairly safe for cross JVM usage as well.\n+         * <p>Gets the next new identifier.</p>\n+         *\n+         * <p>Only guaranteed unique within this JVM, but fairly safe\n+         * for cross JVM usage as well.</p>\n          * \n          * <p>Format of identifier is\n-         * [6 chars random][3 chars time][1+ chars count]</p>\n+         * <code>[6 chars random][3 chars time][1+ chars count]</code></p>\n          * \n          * @return the next 10 char String identifier\n          */\n--- a/src/java/org/apache/commons/lang/util/Validate.java\n+++ b/src/java/org/apache/commons/lang/util/Validate.java\n  * @author <a href=\"mailto:ola.berg@arkitema.se\">Ola Berg</a>\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: Validate.java,v 1.2 2003/03/23 17:52:25 scolebourne Exp $\n+ * @version $Id: Validate.java,v 1.3 2003/07/14 22:25:06 bayard Exp $\n  */\n public class Validate {\n     \n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the test\n-     * result is false.\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the test result is <code>false</code>.</p>\n      * \n      * <p>This is used when validating according to an arbitrary boolean expression,\n      * such as validating a primitive number or using your own custom validation \n-     * expression.\n+     * expression.</p>\n+     *\n      * <pre>\n      * Validate.isTrue( myObject.isOk(), \"The object is not OK: \", myObject);\n      * </pre>\n+     *\n      * <p>For performance reasons, the object is passed as a separate parameter and\n-     * appended to the message string only in the case of an error.\n+     * appended to the message string only in the case of an error.</p>\n      * \n      * @param expression  a boolean expression\n-     * @param message  the exception message you would like to see if the expression is false\n+     * @param message  the exception message you would like to see if the\n+     *  expression is <code>false</code>\n      * @param value  the value to append to the message in case of error\n-     * @throws IllegalArgumentException if expression is false\n+     * @throws IllegalArgumentException if expression is <code>false</code>\n      */\n     public static void isTrue(boolean expression, String message, Object value) {\n         if (expression == false) {\n     }\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the test\n-     * result is false.\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the test result is <code>false</code>.</p>\n      * \n      * <p>This is used when validating according to an arbitrary boolean expression,\n      * such as validating a primitive number or using your own custom validation \n-     * expression.\n+     * expression.</p>\n+     *\n      * <pre>\n      * Validate.isTrue( i > 0, \"The value must be greater than zero: \", i);\n      * </pre>\n+     *\n      * <p>For performance reasons, the object is passed as a separate parameter and\n-     * appended to the message string only in the case of an error.\n+     * appended to the message string only in the case of an error.</p>\n      * \n      * @param expression  a boolean expression\n-     * @param message  the exception message you would like to see if the expression is false\n+     * @param message  the exception message you would like to see if the expression is <code>false</code>\n      * @param value  the value to append to the message in case of error\n-     * @throws IllegalArgumentException if expression is false\n+     * @throws IllegalArgumentException if expression is <code>false</code>\n      */\n     public static void isTrue(boolean expression, String message, long value) {\n         if (expression == false) {\n     }\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the test\n-     * result is false.\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the test result is <code>false</code>.</p>\n      * \n      * <p>This is used when validating according to an arbitrary boolean expression,\n      * such as validating a primitive number or using your own custom validation \n-     * expression.\n+     * expression.</p>\n+     *\n      * <pre>\n      * Validate.isTrue( d > 0.0, \"The value must be greater than zero: \", d);\n      * </pre>\n+     *\n      * <p>For performance reasons, the object is passed as a separate parameter and\n-     * appended to the message string only in the case of an error.\n+     * appended to the message string only in the case of an error.</p>\n      * \n      * @param expression  a boolean expression\n-     * @param message  the exception message you would like to see if the expression is false\n+     * @param message  the exception message you would like to see if the expression\n+     *  is <code>false</code>\n      * @param value  the value to append to the message in case of error\n-     * @throws IllegalArgumentException if expression is false\n+     * @throws IllegalArgumentException if expression is <code>false</code>\n      */\n     public static void isTrue(boolean expression, String message, double value) {\n         if (expression == false) {\n     }\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the test\n-     * result is false.\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the test result is <code>false</code>.</p>\n      * \n      * <p>This is used when validating according to an arbitrary boolean expression,\n      * such as validating a primitive number or using your own custom validation \n-     * expression.\n+     * expression.</p>\n+     *\n      * <pre>\n      * Validate.isTrue( (i > 0), \"The value must be greater than zero\");\n      * Validate.isTrue( myObject.isOk(), \"The object is not OK\");\n      * </pre>\n+     *\n      * <p>For performance reasons, the message string should not involve a string append,\n-     * instead use the {@link #isTrue(boolean, String, Object)} method.\n+     * instead use the {@link #isTrue(boolean, String, Object)} method.</p>\n      * \n      * @param expression  a boolean expression\n-     * @param message  the exception message you would like to see if the expression is false\n-     * @throws IllegalArgumentException if expression is false\n+     * @param message  the exception message you would like to see if the expression\n+     *  is <code>false</code>\n+     * @throws IllegalArgumentException if expression is <code>false</code>\n      */\n     public static void isTrue(boolean expression, String message) {\n         if (expression == false) {\n     }\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the test\n-     * result is false.\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the test result is <code>false</code>.</p>\n      * \n      * <p>This is used when validating according to an arbitrary boolean expression,\n      * such as validating a primitive number or using your own custom validation \n-     * expression.\n+     * expression.</p>\n+     *\n      * <pre>\n      * Validate.isTrue( i > 0 );\n      * Validate.isTrue( myObject.isOk() );\n      * </pre>\n-     * <p>The message in the exception is 'The validated expression is false'.\n+     *\n+     * <p>The message in the exception is 'The validated expression is false'.</p>\n      * \n      * @param expression  a boolean expression\n-     * @throws IllegalArgumentException if expression is false\n+     * @throws IllegalArgumentException if expression is <code>false</code>\n      */\n     public static void isTrue(boolean expression) {\n         if (expression == false) {\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument is null.\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument is <code>null</code>.</p>\n+     *\n      * <pre>\n      * Validate.notNull(myObject, \"The object must not be null\");\n      * </pre>\n      * \n-     * @param object  the object to check is not null\n-     * @param message  the exception message you would like to see if the object is null\n-     * @throws IllegalArgumentException if the object is null\n+     * @param object  the object to check is not <code>null</code>\n+     * @param message  the exception message you would like to see\n+     *  if the object is <code>null</code>\n+     * @throws IllegalArgumentException if the object is <code>null</code>\n      */\n     public static void notNull(Object object, String message) {\n         if (object == null) {\n     }\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument is null.\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument is <code>null</code>.</p>\n+     *\n      * <pre>\n      * Validate.notNull(myObject);\n      * </pre>\n-     * <p>The message in the exception is 'The validated object is null'.\n-     * \n-     * @param object  the object to check is not null\n-     * @throws IllegalArgumentException if the object is null\n+     *\n+     * <p>The message in the exception is 'The validated object is null'.</p>\n+     * \n+     * @param object  the object to check is not <code>null</code>\n+     * @throws IllegalArgumentException if the object is <code>null</code>\n      */\n     public static void notNull(Object object) {\n         if (object == null) {\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument array is empty (null or no elements).\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument array is empty (<code>null</code> or no elements).</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myArray, \"The array must not be empty\");\n      * </pre>\n     }\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument array is empty (null or no elements).\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument array is empty (<code>null</code> or no elements).</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myArray);\n      * </pre>\n+     *\n      * <p>The message in the exception is 'The validated array is empty'.\n      * \n      * @param array  the array to check is not empty\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument Collection is empty (null or no elements).\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument Collection is empty (<code>null</code> or no elements).</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myCollection, \"The collection must not be empty\");\n      * </pre>\n     }\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument Collection is empty (null or no elements).\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument Collection is empty (<code>null</code> or no elements).</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myCollection);\n      * </pre>\n-     * <p>The message in the exception is 'The validated collection is empty'.\n+     *\n+     * <p>The message in the exception is 'The validated collection is empty'.</p>\n      * \n      * @param collection  the collection to check is not empty\n      * @throws IllegalArgumentException if the collection is empty\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument Map is empty (null or no elements).\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument Map is empty (<code>null</code> or no elements).</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myMap, \"The collection must not be empty\");\n      * </pre>\n     }\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument Map is empty (null or no elements).\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument Map is empty (<code>null</code> or no elements).</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myMap);\n      * </pre>\n-     * <p>The message in the exception is 'The validated map is empty'.\n+     *\n+     * <p>The message in the exception is 'The validated map is empty'.</p>\n      * \n      * @param map  the map to check is not empty\n      * @throws IllegalArgumentException if the map is empty\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument String is empty (null or zero length).\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument String is empty (<code>null</code> or zero length).</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myString, \"The string must not be empty\");\n      * </pre>\n     }\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument String is empty (null or zero length).\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument String is empty (<code>null</code> or zero length).</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myString);\n      * </pre>\n-     * <p>The message in the exception is 'The validated string is empty'.\n+     *\n+     * <p>The message in the exception is 'The validated string is empty'.</p>\n      * \n      * @param string  the string to check is not empty\n      * @throws IllegalArgumentException if the string is empty\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument array has null elements or is null.\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument array has <code>null</code> elements or is\n+     * <code>null</code>.</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myArray, \"The array must not contain null elements\");\n      * </pre>\n      * \n      * @param array  the array to check\n-     * @param message  the exception message if the array has null elements\n-     * @throws IllegalArgumentException if the array has null elements or is null\n+     * @param message  the exception message if the array has\n+     *  <code>null</code> elements\n+     * @throws IllegalArgumentException if the array has <code>null</code>\n+     *  elements or is <code>null</code>\n      */\n     public static void noNullElements(Object[] array, String message) {\n         Validate.notNull(array);\n     }\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument array has null elements or is null.\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument array has <code>null</code> elements or is\n+     * <code>null</code>.</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myArray);\n      * </pre>\n-     * <p>The message in the exception is 'The validated array contains null element at index: '.\n+     *\n+     * <p>The message in the exception is 'The validated array contains null element at index: '.</p>\n      * \n      * @param array  the array to check\n-     * @throws IllegalArgumentException if the array has null elements or is null\n+     * @throws IllegalArgumentException if the array has <code>null</code>\n+     *  elements or is <code>null</code>\n      */\n     public static void noNullElements(Object[] array) {\n         Validate.notNull(array);\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument collection has null elements or is null.\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument collection has <code>null</code> elements or is\n+     * <code>null</code>.</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myCollection, \"The collection must not contain null elements\");\n      * </pre>\n      * \n      * @param collection  the collection to check\n-     * @param message  the exception message if the array has null elements\n-     * @throws IllegalArgumentException if the collection has null elements or is null\n+     * @param message  the exception message if the array has\n+     *  <code>null</code> elements\n+     * @throws IllegalArgumentException if the collection has\n+     *  <code>null</code> elements or is <code>null</code>\n      */\n     public static void noNullElements(Collection collection, String message) {\n         Validate.notNull(collection);\n     }\n \n     /**\n-     * <p>Validate an argument, throwing IllegalArgumentException if the \n-     * argument collection has null elements or is null.\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument collection has <code>null</code> elements or is\n+     * <code>null</code>.</p>\n+     *\n      * <pre>\n      * Validate.notEmpty(myCollection);\n      * </pre>\n-     * <p>The message in the exception is 'The validated collection contains null element at index: '.\n+     *\n+     * <p>The message in the exception is 'The validated collection contains null element at index: '.</p>\n      * \n      * @param collection  the collection to check\n-     * @throws IllegalArgumentException if the collection has null elements or is null\n+     * @throws IllegalArgumentException if the collection has\n+     *  <code>null</code> elements or is <code>null</code>\n      */\n     public static void noNullElements(Collection collection) {\n         Validate.notNull(collection);", "timestamp": 1058221506, "metainfo": ""}