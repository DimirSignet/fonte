{"sha": "2e5785f67c9768116ee824e073837be5c3324ffd", "log": "Using CopyOnWriteArrayList for thread safety.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n+++ b/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n import java.lang.reflect.Proxy;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n \n /**\n  * An EventListenerSupport object can be used to manage a list of event listeners of a particular type.\n  */\n public class EventListenerSupport<L>\n {\n-    private final List<L> listeners = new LinkedList<L>();\n+    private final List<L> listeners = new CopyOnWriteArrayList<L>();\n     private final L proxy;\n \n     /**\n     public void addListener(L listener)\n     {\n         Validate.notNull(listener, \"Listener object cannot be null.\");\n-        listeners.add(0, listener);\n+        listeners.add(listener);\n     }\n \n     /**\n     {\n         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable\n         {\n-            for (int i = listeners.size() - 1; i >= 0; --i)\n+            for (L listener : listeners)\n             {\n-                method.invoke(listeners.get(i), args);\n+                method.invoke(listener, args);\n             }\n             return null;\n         }", "timestamp": 1279827108, "metainfo": ""}