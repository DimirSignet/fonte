{"sha": "d009c36957387d7f2244a1d7746451b357637a33", "log": "Revert changes from r1166233: [LANG-750] Add MethodUtil APIs to call methods without parameters.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java\n     }\n \n     /**\n-     * <p>Invokes a named method without parameters.</p>\n-     *\n-     * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>\n-     *\n-     * <p>This method supports calls to methods taking primitive parameters \n-     * via passing in wrapping classes. So, for example, a <code>Boolean</code> object\n-     * would match a <code>boolean</code> primitive.</p>\n-     *\n-     * <p>This is a convenient wrapper for\n-     * {@link #invokeMethod(Object object,String methodName, Object[] args, Class[] parameterTypes)}.\n-     * </p>\n-     *\n-     * @param object invoke method on this object\n-     * @param methodName get method with this name\n-     * @return The value returned by the invoked method\n-     *\n-     * @throws NoSuchMethodException if there is no such accessible method\n-     * @throws InvocationTargetException wraps an exception thrown by the method invoked\n-     * @throws IllegalAccessException if the requested method is not accessible via reflection\n-     * @since 3.0.2\n-     */\n-    public static Object invokeMethod(Object object, String methodName) throws NoSuchMethodException,\n-            IllegalAccessException, InvocationTargetException {\n-        return invokeMethod(object, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY);\n-    }\n-\n-    /**\n      * <p>Invokes a named method whose parameter type matches the object type.</p>\n      *\n      * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>\n     }\n \n     /**\n-     * <p>Invokes a method without parameters.</p>\n-     *\n-     * <p>This uses reflection to invoke the method obtained from a call to\n-     * <code>getAccessibleMethod()</code>.</p>\n-     *\n-     * @param object invoke method on this object\n-     * @param methodName get method with this name\n-     * @return The value returned by the invoked method\n-     *\n-     * @throws NoSuchMethodException if there is no such accessible method\n-     * @throws InvocationTargetException wraps an exception thrown by the\n-     *  method invoked\n-     * @throws IllegalAccessException if the requested method is not accessible\n-     *  via reflection\n-     * @since 3.0.2\n-     */\n-    public static Object invokeExactMethod(Object object, String methodName) throws NoSuchMethodException,\n-            IllegalAccessException, InvocationTargetException {\n-        return invokeExactMethod(object, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY);\n-    }\n-\n-    /**\n      * <p>Invokes a method whose parameter types match exactly the object\n      * types.</p>\n      *\n     }\n \n     /**\n-     * <p>Invokes a named static method without parameters.</p>\n-     *\n-     * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>\n-     *\n-     * <p>This method supports calls to methods taking primitive parameters \n-     * via passing in wrapping classes. So, for example, a <code>Boolean</code> class\n-     * would match a <code>boolean</code> primitive.</p>\n-     *\n-     * <p>This is a convenient wrapper for\n-     * {@link #invokeStaticMethod(Class objectClass,String methodName,Object [] args,Class[] parameterTypes)}.\n-     * </p>\n-     *\n-     * @param cls invoke static method on this class\n-     * @param methodName get method with this name\n-     * @return The value returned by the invoked method\n-     *\n-     * @throws NoSuchMethodException if there is no such accessible method\n-     * @throws InvocationTargetException wraps an exception thrown by the\n-     *  method invoked\n-     * @throws IllegalAccessException if the requested method is not accessible\n-     *  via reflection\n-     * @since 3.0.2\n-     */\n-    public static Object invokeStaticMethod(Class<?> cls, String methodName) throws NoSuchMethodException,\n-            IllegalAccessException, InvocationTargetException {\n-        return invokeStaticMethod(cls, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY);\n-    }\n-\n-    /**\n      * <p>Invokes a named static method whose parameter type matches the object type.</p>\n      *\n      * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>\n                     + methodName + \"() on class: \" + cls.getName());\n         }\n         return method.invoke(null, args);\n-    }\n-\n-    /**\n-     * <p>Invokes a static method without parameters.</p>\n-     *\n-     * <p>This uses reflection to invoke the method obtained from a call to\n-     * {@link #getAccessibleMethod(Class, String, Class[])}.</p>\n-     *\n-     * @param cls invoke static method on this class\n-     * @param methodName get method with this name\n-     * @return The value returned by the invoked method\n-     *\n-     * @throws NoSuchMethodException if there is no such accessible method\n-     * @throws InvocationTargetException wraps an exception thrown by the\n-     *  method invoked\n-     * @throws IllegalAccessException if the requested method is not accessible\n-     *  via reflection\n-     * @since 3.0.2\n-     */\n-    public static Object invokeExactStaticMethod(Class<?> cls, String methodName) throws NoSuchMethodException,\n-            IllegalAccessException, InvocationTargetException {\n-        return invokeExactStaticMethod(cls, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java\n     }\n \n     @Test\n-    public void testInvokeMethodNoParam() throws Exception {\n-        assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\"));\n-    }\n-\n-    @Test(expected = NoSuchMethodException.class)\n-    public void testInvokeMethodNoParamFailure() throws Exception {\n-        assertEquals(\"oneParameter()\", MethodUtils.invokeMethod(testBean, \"oneParameter\"));\n-    }\n-\n-    @Test\n     public void testInvokeExactMethod() throws Exception {\n         assertEquals(\"foo()\", MethodUtils.invokeExactMethod(testBean, \"foo\",\n                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\n             fail(\"should throw NoSuchMethodException\");\n         } catch (NoSuchMethodException e) {\n         }\n-    }\n-\n-    @Test\n-    public void testInvokeExactMethodNoParam() throws Exception {\n-        assertEquals(\"foo()\", MethodUtils.invokeExactMethod(testBean, \"foo\"));\n-    }\n-\n-    @Test(expected = NoSuchMethodException.class)\n-    public void testInvokeExactMethodNoParamFailure() throws Exception {\n-        MethodUtils.invokeExactMethod(testBean, \"oneParameter\");\n     }\n \n     @Test\n     }\n \n     @Test\n-    public void testInvokeStaticMethodNoParam() throws Exception {\n-        assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\"));\n-    }\n-\n-    @Test(expected = NoSuchMethodException.class)\n-    public void testInvokeStaticMethodNoParamFailure() throws Exception {\n-        assertEquals(\"oneParameter()\", MethodUtils.invokeStaticMethod(TestBean.class, \"oneParameter\"));\n-    }\n-\n-    @Test\n     public void testInvokeExactStaticMethod() throws Exception {\n         assertEquals(\"bar()\", MethodUtils.invokeExactStaticMethod(TestBean.class,\n                 \"bar\", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\n     }\n \n     @Test\n-    public void testInvokeExactStaticMethodNoParam() throws Exception {\n-        assertEquals(\"bar()\", MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\"));\n-    }\n-\n-    @Test(expected = NoSuchMethodException.class)\n-    public void testInvokeExactStaticMethodNoParamFailure() throws Exception {\n-        assertEquals(\"oneParameterStatic()\", MethodUtils.invokeExactStaticMethod(TestBean.class, \"oneParameterStatic\"));\n-    }\n-\n-    @Test\n     public void testGetAccessibleInterfaceMethod() throws Exception {\n         Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\n         for (Class<?>[] element : p) {", "timestamp": 1315412862, "metainfo": ""}