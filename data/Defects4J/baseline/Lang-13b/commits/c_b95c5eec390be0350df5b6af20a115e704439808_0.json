{"sha": "b95c5eec390be0350df5b6af20a115e704439808", "log": "Fixing package names so things compile. Removing Boolean and Transform usages in ComparatorUtils as those classes didn't come accross  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/compare/ComparableComparator.java\n+++ b/src/main/java/org/apache/commons/lang3/compare/ComparableComparator.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.commons.collections.comparators;\n+package org.apache.commons.lang3.compare;\n \n import java.io.Serializable;\n import java.util.Comparator;\n--- a/src/main/java/org/apache/commons/lang3/compare/ComparatorChain.java\n+++ b/src/main/java/org/apache/commons/lang3/compare/ComparatorChain.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.commons.collections.comparators;\n+package org.apache.commons.lang3.compare;\n \n import java.io.Serializable;\n import java.util.ArrayList;\n--- a/src/main/java/org/apache/commons/lang3/compare/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/compare/ComparatorUtils.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.commons.collections;\n+package org.apache.commons.lang3.compare;\n \n import java.util.Collection;\n import java.util.Comparator;\n-\n-import org.apache.commons.collections.comparators.BooleanComparator;\n-import org.apache.commons.collections.comparators.ComparableComparator;\n-import org.apache.commons.collections.comparators.ComparatorChain;\n-import org.apache.commons.collections.comparators.NullComparator;\n-import org.apache.commons.collections.comparators.ReverseComparator;\n-import org.apache.commons.collections.comparators.TransformingComparator;\n \n /**\n  * Provides convenient static utility methods for <Code>Comparator</Code>\n     }\n \n     /**\n-     * Gets a Comparator that can sort Boolean objects.\n-     * <p>\n-     * The parameter specifies whether true or false is sorted first.\n-     * <p>\n-     * The comparator throws NullPointerException if a null value is compared.\n-     * \n-     * @param trueFirst  when <code>true</code>, sort \n-     *        <code>true</code> {@link Boolean}s before\n-     *        <code>false</code> {@link Boolean}s.\n-     * @return  a comparator that sorts booleans\n-     */\n-    public static Comparator<Boolean> booleanComparator(boolean trueFirst) {\n-        return BooleanComparator.booleanComparator(trueFirst);\n-    }\n-    \n-    /**\n      * Gets a Comparator that controls the comparison of <code>null</code> values.\n      * <p>\n      * The returned comparator will consider a null value to be less than\n             comparator = NATURAL_COMPARATOR;\n         }\n         return new NullComparator<E>(comparator, true);\n-    }\n-\n-    /**\n-     * Gets a Comparator that passes transformed objects to the given comparator.\n-     * <p>\n-     * Objects passed to the returned comparator will first be transformed\n-     * by the given transformer before they are compared by the given\n-     * comparator.\n-     *\n-     * @param comparator  the sort order to use\n-     * @param transformer  the transformer to use\n-     * @return  a comparator that transforms its input objects before comparing them\n-     * @see  TransformingComparator\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <E> Comparator<E> transformedComparator(Comparator<E> comparator, Transformer<? super E, ? extends E> transformer) {\n-        if (comparator == null) {\n-            comparator = NATURAL_COMPARATOR;\n-        }\n-        return new TransformingComparator<E>(transformer, comparator);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/lang3/compare/FixedOrderComparator.java\n+++ b/src/main/java/org/apache/commons/lang3/compare/FixedOrderComparator.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.commons.collections.comparators;\n+package org.apache.commons.lang3.compare;\n \n import java.util.Comparator;\n import java.util.HashMap;\n--- a/src/main/java/org/apache/commons/lang3/compare/NullComparator.java\n+++ b/src/main/java/org/apache/commons/lang3/compare/NullComparator.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.commons.collections.comparators;\n+package org.apache.commons.lang3.compare;\n \n import java.io.Serializable;\n import java.util.Comparator;\n-\n-import org.apache.commons.collections.ComparatorUtils;\n \n /**\n  * A Comparator that will compare nulls to be either lower or higher than\n--- a/src/main/java/org/apache/commons/lang3/compare/ReverseComparator.java\n+++ b/src/main/java/org/apache/commons/lang3/compare/ReverseComparator.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.commons.collections.comparators;\n+package org.apache.commons.lang3.compare;\n \n import java.io.Serializable;\n import java.util.Comparator;\n-\n-import org.apache.commons.collections.ComparatorUtils;\n \n /**\n  * Reverses the order of another comparator by reversing the arguments", "timestamp": 1312780551, "metainfo": ""}