{"sha": "c4d766ae440d74ea190a29b7b0b6343464b10ee2", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *   String name;\n  *   int age;\n  *   boolean smoker;\n- * \n+ *\n  *   ...\n- * \n+ *\n  *   public String toString() {\n  *     return new ToStringBuilder(this).\n  *       append(\"name\", name).\n  *\n  * <p>This will produce a toString of the format:\n  * <code>Person@7f54[name=Stephen,age=29,smoker=false]</code></p>\n- * \n+ *\n  * <p>To add the superclass <code>toString</code>, use {@link #appendSuper}.\n  * To append the <code>toString</code> from an object that is delegated\n  * to (or any other object), use {@link #appendToString}.</p>\n  *\n  * <p>Alternatively, there is a method that uses reflection to determine\n- * the fields to test. Because these fields are usually private, the method, \n+ * the fields to test. Because these fields are usually private, the method,\n  * <code>reflectionToString</code>, uses <code>AccessibleObject.setAccessible</code> to\n  * change the visibility of the fields. This will fail under a security manager,\n  * unless the appropriate permissions are set up correctly. It is also\n  * <pre>\n  * System.out.println(\"An object: \" + ToStringBuilder.reflectionToString(anObject));\n  * </pre>\n- * \n+ *\n  * <p>The exact format of the <code>toString</code> is determined by\n  * the {@link ToStringStyle} passed into the constructor.</p>\n  *\n \n     /**\n      * <p>Gets the default <code>ToStringStyle</code> to use.</p>\n-     * \n+     *\n      * <p>This method gets a singleton default value, typically for the whole JVM.\n      * Changing this default should generally only be done during application startup.\n      * It is recommended to pass a <code>ToStringStyle</code> to the constructor instead\n      * of using this global default.</p>\n-     * \n+     *\n      * <p>This method can be used from multiple threads.\n      * Internally, a <code>volatile</code> variable is used to provide the guarantee\n      * that the latest value set using {@link #setDefaultStyle} is the value returned.\n      * It is strongly recommended that the default style is only changed during application startup.</p>\n-     * \n+     *\n      * <p>One reason for changing the default could be to have a verbose style during\n      * development and a compact style in production.</p>\n-     * \n+     *\n      * @return the default <code>ToStringStyle</code>, never null\n      */\n     public static ToStringStyle getDefaultStyle() {\n \n     /**\n      * <p>Sets the default <code>ToStringStyle</code> to use.</p>\n-     * \n+     *\n      * <p>This method sets a singleton default value, typically for the whole JVM.\n      * Changing this default should generally only be done during application startup.\n      * It is recommended to pass a <code>ToStringStyle</code> to the constructor instead\n      * of changing this global default.</p>\n-     * \n+     *\n      * <p>This method is not intended for use from multiple threads.\n      * Internally, a <code>volatile</code> variable is used to provide the guarantee\n      * that the latest value set is the value returned from {@link #getDefaultStyle}.</p>\n-     * \n+     *\n      * @param style  the default <code>ToStringStyle</code>\n      * @throws IllegalArgumentException if the style is <code>null</code>\n      */\n     /**\n      * <p>Uses <code>ReflectionToStringBuilder</code> to generate a\n      * <code>toString</code> for the specified object.</p>\n-     * \n+     *\n      * @param object  the Object to be output\n      * @return the String result\n      * @see ReflectionToStringBuilder#toString(Object)\n     /**\n      * <p>Uses <code>ReflectionToStringBuilder</code> to generate a\n      * <code>toString</code> for the specified object.</p>\n-     * \n+     *\n      * @param object  the Object to be output\n      * @param style  the style of the <code>toString</code> to create, may be <code>null</code>\n      * @return the String result\n     /**\n      * <p>Uses <code>ReflectionToStringBuilder</code> to generate a\n      * <code>toString</code> for the specified object.</p>\n-     * \n+     *\n      * @param object  the Object to be output\n      * @param style  the style of the <code>toString</code> to create, may be <code>null</code>\n      * @param outputTransients  whether to include transient fields\n     /**\n      * <p>Uses <code>ReflectionToStringBuilder</code> to generate a\n      * <code>toString</code> for the specified object.</p>\n-     * \n+     *\n+     * @param <T> the type of the object\n      * @param object  the Object to be output\n      * @param style  the style of the <code>toString</code> to create, may be <code>null</code>\n      * @param outputTransients  whether to include transient fields\n      * <p>Constructs a builder for the specified object using the default output style.</p>\n      *\n      * <p>This default style is obtained from {@link #getDefaultStyle()}.</p>\n-     * \n+     *\n      * @param object  the Object to build a <code>toString</code> for, not recommended to be null\n      */\n     public ToStringBuilder(Object object) {\n      * <p>Constructs a builder for the specified object using the a defined output style.</p>\n      *\n      * <p>If the style is <code>null</code>, the default style is used.</p>\n-     * \n+     *\n      * @param object  the Object to build a <code>toString</code> for, not recommended to be null\n      * @param style  the style of the <code>toString</code> to create, null uses the default style\n      */\n      * <p>If the style is <code>null</code>, the default style is used.</p>\n      *\n      * <p>If the buffer is <code>null</code>, a new one is created.</p>\n-     * \n+     *\n      * @param object  the Object to build a <code>toString</code> for, not recommended to be null\n      * @param style  the style of the <code>toString</code> to create, null uses the default style\n      * @param buffer  the <code>StringBuffer</code> to populate, may be null\n \n     /**\n      * <p>Appends with the same format as the default <code>Object toString()\n-     * </code> method. Appends the class name followed by \n+     * </code> method. Appends the class name followed by\n      * {@link System#identityHashCode(java.lang.Object)}.</p>\n-     * \n+     *\n      * @param object  the <code>Object</code> whose class name and id to output\n      * @return this\n      * @since 2.0\n \n     /**\n      * <p>Append the <code>toString</code> from the superclass.</p>\n-     * \n+     *\n      * <p>This method assumes that the superclass uses the same <code>ToStringStyle</code>\n      * as this one.</p>\n-     * \n+     *\n      * <p>If <code>superToString</code> is <code>null</code>, no change is made.</p>\n      *\n      * @param superToString  the result of <code>super.toString()</code>\n \n     /**\n      * <p>Append the <code>toString</code> from another object.</p>\n-     * \n+     *\n      * <p>This method is useful where a class delegates most of the implementation of\n      * its properties to another class. You can then call <code>toString()</code> on\n      * the other class and pass the result into this method.</p>\n-     * \n+     *\n      * <pre>\n      *   private AnotherObject delegate;\n      *   private String fieldInThisClass;\n-     * \n+     *\n      *   public String toString() {\n      *     return new ToStringBuilder(this).\n      *       appendToString(delegate.toString()).\n      *       append(fieldInThisClass).\n      *       toString();\n      *   }</pre>\n-     * \n+     *\n      * <p>This method assumes that the other object uses the same <code>ToStringStyle</code>\n      * as this one.</p>\n-     * \n+     *\n      * <p>If the <code>toString</code> is <code>null</code>, no change is made.</p>\n      *\n      * @param toString  the result of <code>toString()</code> on another object\n \n     /**\n      * <p>Returns the <code>Object</code> being output.</p>\n-     * \n+     *\n      * @return The object being output.\n      * @since 2.0\n      */\n \n     /**\n      * <p>Gets the <code>StringBuffer</code> being populated.</p>\n-     * \n+     *\n      * @return the <code>StringBuffer</code> being populated\n      */\n     public StringBuffer getStringBuffer() {\n \n     /**\n      * <p>Gets the <code>ToStringStyle</code> being used.</p>\n-     * \n+     *\n      * @return the <code>ToStringStyle</code> being used\n      * @since 2.0\n      */\n \n     /**\n      * <p>Returns the built <code>toString</code>.</p>\n-     * \n+     *\n      * <p>This method appends the end of data indicator, and can only be called once.\n      * Use {@link #getStringBuffer} to get the current string state.</p>\n-     * \n+     *\n      * <p>If the object is <code>null</code>, return the style's <code>nullText</code></p>\n-     * \n+     *\n      * @return the String <code>toString</code>\n      */\n     @Override\n     }\n \n     /**\n-     * Returns the String that was build as an object representation. The \n+     * Returns the String that was build as an object representation. The\n      * default implementation utilizes the {@link #toString()} implementation.\n-     * \n+     *\n      * @return the String <code>toString</code>\n-     * \n+     *\n      * @see #toString()\n-     * \n+     *\n      * @since 3.0\n      */\n     public String build() {", "timestamp": 1300553038, "metainfo": ""}