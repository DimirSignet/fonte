{"sha": "b4e7e11933882a31a0662eab6f8e8e98ca164d85", "log": "Add new method center(String, int, char) to complete API Rework padding internals Example javadoc difference()/differenceAt() Remove dependency on NumberUtils   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n import java.util.Iterator;\n import java.util.List;\n \n-import org.apache.commons.lang.math.NumberUtils;\n-\n /**\n  * <p>Common <code>String</code> manipulation routines that are \n  * <code>null</code> safe.</p>\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.70 2003/07/20 00:37:09 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.71 2003/07/20 10:29:22 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     private static int PAD_LIMIT = 8192;\n \n     /**\n-     * <p>A <code>String</code> containing all space characters (' ').</p>\n-     *\n-     * <p>Used for efficient space padding.  The length of the String expands as needed.</p>\n-     */\n-    private static String spaces = new String(\" \");\n-\n-    /**\n      * <p>An array of <code>String</code>s used for padding.</p>\n      *\n      * <p>Used for efficient space padding. The length of each String expands as needed.</p>\n      */\n     private final static String[] padding = new String[Character.MAX_VALUE];\n+    \n+    static {\n+        padding[32] = \"                                \";\n+    }\n \n     /**\n      * <p><code>StringUtils<code> instances should NOT be constructed in\n     }\n \n     /**\n-     * <p>Returns a String containing the requested number of \n-     * space characters (' ').</p>\n-     * \n-     * <pre>\n-     * StringUtils.padding(0)  = \"\"\n-     * StringUtils.padding(3)  = \"   \"\n-     * StringUtils.padding(-2) = IndexOutOfBoundsException\n-     * </pre>\n-     *\n-     * @param repeat  number of times to repeat space\n-     * @return a String with <code>repeat</code> spaces\n-     * @throws IndexOutOfBoundsException if <code>repeat &lt; 0</code>\n-     */\n-    private static String padding(int repeat) {\n-        while (spaces.length() < repeat)  {\n-            spaces = spaces.concat(spaces);\n-        }\n-        return spaces.substring(0, repeat);\n-    }\n-\n-    /**\n      * <p>Returns padding using the specified delimiter repeated\n      * to a given length.</p>\n      *\n      *  <code>null</code> if null String input\n      */\n     public static String rightPad(String str, int size) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int pads = size - str.length();\n-        if (pads <= 0) {\n-            return str; // returns original String when possible\n-        }\n-        if (pads > PAD_LIMIT) {\n-            return rightPad(str, size, ' ');\n-        }\n-        return str.concat(padding(pads));\n+        return rightPad(str, size, ' ');\n     }\n \n     /**\n      * StringUtils.rightPad(\"bat\", -1, \"yz\") = \"bat\"\n      * StringUtils.rightPad(\"bat\", 1, null)  = IllegalArgumentException\n      * StringUtils.rightPad(\"bat\", 1, \"\")    = IllegalArgumentException\n-     * StringUtils.rightPad(null, 1, \"\")     = IllegalArgumentException\n+     * StringUtils.rightPad(null, 1, \"\")     = null\n      * </pre>\n      *\n      * @param str  the String to pad out, may be null\n      * @throws IllegalArgumentException if padStr is the empty String or null\n      */\n     public static String rightPad(String str, int size, String padStr) {\n+        if (str == null) {\n+            return null;\n+        }\n         int padLen;\n         if (padStr == null || (padLen = padStr.length()) == 0) {\n             throw new IllegalArgumentException(\"Pad String must not be null or empty\");\n-        }\n-        if (str == null) {\n-            return null;\n         }\n         int strLen = str.length();\n         int pads = size - strLen;\n      *  <code>null</code> if null String input\n      */\n     public static String leftPad(String str, int size) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int pads = size - str.length();\n-        if (pads <= 0) { \n-            return str; // returns original String when possible\n-        }\n-        if (pads > PAD_LIMIT) {\n-            return leftPad(str, size, ' ');\n-        }\n-        return padding(pads).concat(str);\n+        return leftPad(str, size, ' ');        \n     }\n \n     /**\n      * StringUtils.leftPad(\"bat\", -1, \"yz\") = \"bat\"\n      * StringUtils.leftPad(\"bat\", 1, null)  = IllegalArgumentException\n      * StringUtils.leftPad(\"bat\", 1, \"\")    = IllegalArgumentException\n-     * StringUtils.leftPad(null, 1, \"\")     = IllegalArgumentException\n+     * StringUtils.leftPad(null, 1, \"\")     = null\n      * </pre>\n      *\n      * @param str  the String to pad out, may be null\n      * @throws IllegalArgumentException if padStr is the empty String or null\n      */\n     public static String leftPad(String str, int size, String padStr) {\n+        if (str == null) {\n+            return null;\n+        }\n         int padLen;\n         if (padStr == null || (padLen = padStr.length()) == 0) {\n             throw new IllegalArgumentException(\"Pad String must not be null or empty\");\n-        }\n-        if (str == null) {\n-            return null;\n         }\n         int strLen = str.length();\n         int pads = size - strLen;\n      * @return centered String, <code>null</code> if null String input\n      */\n     public static String center(String str, int size) {\n+        return center(str, size, ' ');\n+    }\n+\n+    /**\n+     * <p>Centers a String in a larger String of size <code>size</code>.\n+     * Uses a supplied character as the value to pad the String with.</p>\n+     *\n+     * <p>If the size is less than the String length, the String is returned.\n+     * A <code>null</code> String returns <code>null</code>.\n+     * A negative size is treated as zero.</p>\n+     *\n+     * <pre>\n+     * StringUtils.center(null, -1, ' ')  = null\n+     * StringUtils.center(\"ab\", -1, ' ')  = \"ab\"\n+     * StringUtils.center(null, 4, ' ')   = null\n+     * StringUtils.center(\"\", 4, ' ')     = \"    \"\n+     * StringUtils.center(\"ab\", 4, ' ')   = \" ab\"\n+     * StringUtils.center(\"abcd\", 2, ' ') = \"abcd\"\n+     * StringUtils.center(\"a\", 4, ' ')    = \" a  \"\n+     * StringUtils.center(\"a\", 4, 'y')    = \"yayy\"\n+     * </pre>\n+     * \n+     * @param str  the String to center, may be null\n+     * @param size  the int size of new String, negative treated as zero\n+     * @param padChar  the character to pad the new String with\n+     * @return centered String, <code>null</code> if null String input\n+     */\n+    public static String center(String str, int size, char padChar) {\n         if (str == null || size <= 0) {\n             return str;\n         }\n         if (pads <= 0) {\n             return str;\n         }\n-        str = leftPad(str, strLen + pads / 2, ' ');\n-        str = rightPad(str, size, ' ');\n+        str = leftPad(str, strLen + pads / 2, padChar);\n+        str = rightPad(str, size, padChar);\n         return str;\n     }\n \n     /**\n-     * <p>Centers a String in a larger String of size <code>size</code>.</p>\n-     *\n-     * <p>Uses a supplied String as the value to pad the String with.</p>\n+     * <p>Centers a String in a larger String of size <code>size</code>.\n+     * Uses a supplied String as the value to pad the String with.</p>\n      *\n      * <p>If the size is less than the String length, the String is returned.\n      * A <code>null</code> String returns <code>null</code>.\n      * StringUtils.center(null, 4, \" \")   = null\n      * StringUtils.center(\"\", 4, \" \")     = \"    \"\n      * StringUtils.center(\"ab\", 4, \" \")   = \" ab\"\n-     * StringUtils.center(\"abcd\", 2, \" \") = \" abcd\"\n+     * StringUtils.center(\"abcd\", 2, \" \") = \"abcd\"\n      * StringUtils.center(\"a\", 4, \" \")    = \" a  \"\n-     * StringUtils.center(\"a\", 4, \"yz\")    = \"yayz\"\n+     * StringUtils.center(\"a\", 4, \"yz\")   = \"yayz\"\n      * StringUtils.center(\"abc\", 4, null) = IllegalArgumentException\n      * StringUtils.center(\"abc\", 4, \"\")   = IllegalArgumentException\n-     * StringUtils.center(null, 4, \"\")    = IllegalArgumentException\n+     * StringUtils.center(null, 4, \"\")    = null\n      * </pre>\n      * \n      * @param str  the String to center, may be null\n      * @throws IllegalArgumentException if padStr is <code>null</code> or empty\n      */\n     public static String center(String str, int size, String padStr) {\n+        if (str == null || size <= 0) {\n+            return str;\n+        }\n         if (padStr == null || padStr.length() == 0) {\n             throw new IllegalArgumentException(\"Pad String must not be null or empty\");\n-        }\n-        if (str == null || size <= 0) {\n-            return str;\n         }\n         int strLen = str.length();\n         int pads = size - strLen;\n      * <p>For example,\n      * <code>difference(\"i am a machine\", \"i am a robot\") -> \"robot\"</code>.</p>\n      *\n+     * <pre>\n+     * StringUtils.difference(null, null) = null\n+     * StringUtils.difference(\"\", \"\") = \"\"\n+     * StringUtils.difference(\"\", \"abc\") = \"abc\"\n+     * StringUtils.difference(\"abc\", \"\") = \"\"\n+     * StringUtils.difference(\"abc\", \"abc\") = \"\"\n+     * StringUtils.difference(\"ab\", \"abxyz\") = \"xyz\"\n+     * StringUtils.difference(\"abcde\", \"abxyz\") = \"xyz\"\n+     * StringUtils.difference(\"abcde\", \"xyz\") = \"xyz\"\n+     * </pre>\n+     *\n      * @param str1  the first String, may be null\n      * @param str2  the second String, may be null\n      * @return the portion of str2 where it differs from str1; returns the \n      * \n      * <p>For example, \n      * <code>differenceAt(\"i am a machine\", \"i am a robot\") -> 7</code></p>\n+     *\n+     * <pre>\n+     * StringUtils.differenceAt(null, null) = -1\n+     * StringUtils.differenceAt(\"\", \"\") = -1\n+     * StringUtils.differenceAt(\"\", \"abc\") = 0\n+     * StringUtils.differenceAt(\"abc\", \"\") = 0\n+     * StringUtils.differenceAt(\"abc\", \"abc\") = -1\n+     * StringUtils.differenceAt(\"ab\", \"abxyz\") = 2\n+     * StringUtils.differenceAt(\"abcde\", \"abxyz\") = 2\n+     * StringUtils.differenceAt(\"abcde\", \"xyz\") = 0\n+     * </pre>\n      *\n      * @param str1  the first String, may be null\n      * @param str2  the second String, may be null\n                 }\n \n                 // Step 6\n-                d[i][j] = NumberUtils.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n+                d[i][j] = min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n             }\n         }\n \n         return d[n][m];\n     }\n \n+    /**\n+     * <p>Gets the minimum of three <code>int</code> values.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the smallest of the values\n+     */\n+    private static int min(int a, int b, int c) {\n+        // Method copied from NumberUtils to avoid dependency on subpackage\n+        if (b < a) {\n+            a = b;\n+        }\n+        if (c < a) {\n+            a = c;\n+        }\n+        return a;\n+    }\n+\n }\n \n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n- * @version $Id: StringUtilsTest.java,v 1.31 2003/07/20 00:17:29 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.32 2003/07/20 10:29:21 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         assertEquals(\"a\", res[0]);\n     }\n     \n-    public void testSplit() {\n+    public void testSplit_StringString_StringStringInt() {\n         assertEquals(null, StringUtils.split(null, \".\"));\n         assertEquals(null, StringUtils.split(null, \".\", 3));\n         \n     }\n     \n     private void innerTestSplit(char separator, String sepStr, char noMatch) {\n-        try {\n-            final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n-            String[] res;\n-            // (str, sepStr)\n-            res = StringUtils.split(str, sepStr);\n-            assertEquals(3, res.length);\n-            assertEquals(\"a\", res[0]);\n-            assertEquals(\"b\", res[1]);\n-            assertEquals(noMatch + \"c\", res[2]);\n-            \n-            final String str2 = separator + \"a\" + separator;\n-            res = StringUtils.split(str2, sepStr);\n-            assertEquals(1, res.length);\n-            assertEquals(\"a\", res[0]);\n-\n-            res = StringUtils.split(str, sepStr, -1);\n-            assertEquals(3, res.length);\n-            assertEquals(\"a\", res[0]);\n-            assertEquals(\"b\", res[1]);\n-            assertEquals(noMatch + \"c\", res[2]);\n-            \n-            res = StringUtils.split(str, sepStr, 0);\n-            assertEquals(3, res.length);\n-            assertEquals(\"a\", res[0]);\n-            assertEquals(\"b\", res[1]);\n-            assertEquals(noMatch + \"c\", res[2]);\n-            \n-            res = StringUtils.split(str, sepStr, 1);\n-            assertEquals(1, res.length);\n-            assertEquals(str, res[0]);\n-            \n-            res = StringUtils.split(str, sepStr, 2);\n-            assertEquals(2, res.length);\n-            assertEquals(\"a\", res[0]);\n-            assertEquals(str.substring(2), res[1]);\n-            \n-        } catch (AssertionFailedError ex) {\n-            System.out.println(\"Failed on separator hex(\" + Integer.toHexString(separator) +\n-                 \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\");\n-            throw ex;\n-        }\n+        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n+            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n+        \n+        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n+        String[] res;\n+        // (str, sepStr)\n+        res = StringUtils.split(str, sepStr);\n+        assertEquals(msg, 3, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, noMatch + \"c\", res[2]);\n+        \n+        final String str2 = separator + \"a\" + separator;\n+        res = StringUtils.split(str2, sepStr);\n+        assertEquals(msg, 1, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+\n+        res = StringUtils.split(str, sepStr, -1);\n+        assertEquals(msg, 3, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, noMatch + \"c\", res[2]);\n+        \n+        res = StringUtils.split(str, sepStr, 0);\n+        assertEquals(msg, 3, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, noMatch + \"c\", res[2]);\n+        \n+        res = StringUtils.split(str, sepStr, 1);\n+        assertEquals(msg, 1, res.length);\n+        assertEquals(msg, str, res[0]);\n+        \n+        res = StringUtils.split(str, sepStr, 2);\n+        assertEquals(msg, 2, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, str.substring(2), res[1]);\n     }\n \n     public void testDeleteSpace_String() {\n         } catch (IndexOutOfBoundsException ex) {}\n     }\n \n-    public void testRepeat() {\n+    public void testRepeat_StringInt() {\n         assertEquals(null, StringUtils.repeat(null, 2));\n         assertEquals(\"\", StringUtils.repeat(\"ab\", 0));\n         assertEquals(\"\", StringUtils.repeat(\"\", 3));\n         assertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\n         assertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\n         assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\n-    }\n-\n-    public void testCenter() {\n-        assertEquals(null, StringUtils.center(null, -1));\n-        assertEquals(null, StringUtils.center(null, 4));\n-        assertEquals(\"ab\", StringUtils.center(\"ab\", 0));\n-        assertEquals(\"ab\", StringUtils.center(\"ab\", -1));\n-        assertEquals(\"ab\", StringUtils.center(\"ab\", 1));\n-        assertEquals(\"    \", StringUtils.center(\"\", 4));\n-        assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\n-        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\n-        assertEquals(\" a  \", StringUtils.center(\"a\", 4));\n-        assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n-\n-        assertEquals(null, StringUtils.center(null, -1, \" \"));\n-        assertEquals(null, StringUtils.center(null, 4, \" \"));\n-        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\n-        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\n-        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\n-        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n-        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\n-        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\n-        assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n-        assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n-        assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n-        try {\n-            StringUtils.center(null, 4, null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {\n-        }\n-        try {\n-            StringUtils.center(\"abc\", 4, null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {\n-        }\n-        try {\n-            StringUtils.center(\"abc\", 4, \"\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {\n-        }\n     }\n \n     public void testDeprecatedChompFunctions() {\n \n     }\n \n-    public void testPadFunctions() {\n-        assertEquals(null, StringUtils.rightPad (null, 8) );\n-        assertEquals(\"1234    \", StringUtils.rightPad (\"1234\", 8) );\n-        \n-        assertEquals(null, StringUtils.rightPad (null, 8, \"-+\") );\n-        assertEquals(\"1234-+-+\", StringUtils.rightPad (\"1234\", 8, \"-+\") );\n-        assertEquals(\"123456-+~\", StringUtils.rightPad (\"123456\", 9, \"-+~\") );\n-        assertEquals(\"123456-+\", StringUtils.rightPad (\"123456\", 8, \"-+~\") );\n+    //-----------------------------------------------------------------------\n+    public void testRightPad_StringInt() {\n+        assertEquals(null, StringUtils.rightPad(null, 5));\n+        assertEquals(\"     \", StringUtils.rightPad(\"\", 5));\n+        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1));\n+    }\n+\n+    public void testRightPad_StringIntChar() {\n+        assertEquals(null, StringUtils.rightPad(null, 5, ' '));\n+        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, ' '));\n+        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, ' '));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, ' '));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, ' '));\n+        assertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, 'x'));\n+    }\n+\n+    public void testRightPad_StringIntString() {\n+        assertEquals(null, StringUtils.rightPad(null, 5, \"-+\"));\n+        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, \" \"));\n+        assertEquals(null, StringUtils.rightPad(null, 8, null));\n+        assertEquals(\"abc-+-+\", StringUtils.rightPad(\"abc\", 7, \"-+\"));\n+        assertEquals(\"abc-+~\", StringUtils.rightPad(\"abc\", 6, \"-+~\"));\n+        assertEquals(\"abc-+\", StringUtils.rightPad(\"abc\", 5, \"-+~\"));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \" \"));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \" \"));\n         try {\n-            StringUtils.rightPad(null, 6, null);\n+            StringUtils.rightPad(\"abc56\", 6, null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            StringUtils.rightPad(\"123456\", 6, null);\n+            StringUtils.rightPad(\"abc56\", 6, \"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+        \n+    //-----------------------------------------------------------------------\n+    public void testLeftPad_StringInt() {\n+        assertEquals(null, StringUtils.leftPad(null, 5));\n+        assertEquals(\"     \", StringUtils.leftPad(\"\", 5));\n+        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5));\n+        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2));\n+    }\n+        \n+    public void testLeftPad_StringIntChar() {\n+        assertEquals(null, StringUtils.leftPad(null, 5, ' '));\n+        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, ' '));\n+        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, ' '));\n+        assertEquals(\"xxabc\", StringUtils.leftPad(\"abc\", 5, 'x'));\n+        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, ' '));\n+    }\n+        \n+    public void testLeftPad_StringIntString() {\n+        assertEquals(null, StringUtils.leftPad(null, 5, \"-+\"));\n+        assertEquals(null, StringUtils.leftPad(null, 5, null));\n+        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, \" \"));\n+        assertEquals(\"-+-+abc\", StringUtils.leftPad(\"abc\", 7, \"-+\"));\n+        assertEquals(\"-+~abc\", StringUtils.leftPad(\"abc\", 6, \"-+~\"));\n+        assertEquals(\"-+abc\", StringUtils.leftPad(\"abc\", 5, \"-+~\"));\n+        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \" \"));\n+        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", -1, \" \"));\n+        try {\n+            StringUtils.leftPad(\"abc56\", 6, null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            StringUtils.rightPad(\"123456\", 6, \"\");\n+            StringUtils.leftPad(\"abc56\", 6, \"\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n-        \n-        assertEquals(null, StringUtils.leftPad (null, 8) );\n-        assertEquals(\"    1234\", StringUtils.leftPad(\"1234\", 8) );\n-        \n-        assertEquals(null, StringUtils.leftPad (null, 8, \"-+\") );\n-        assertEquals(\"-+-+1234\", StringUtils.leftPad(\"1234\", 8, \"-+\") );\n-        assertEquals(\"-+~123456\", StringUtils.leftPad(\"123456\", 9, \"-+~\") );\n-        assertEquals(\"-+123456\", StringUtils.leftPad(\"123456\", 8, \"-+~\") );\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCenter_StringInt() {\n+        assertEquals(null, StringUtils.center(null, -1));\n+        assertEquals(null, StringUtils.center(null, 4));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 0));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", -1));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 1));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4));\n+        assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\n+        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\n+        assertEquals(\" a  \", StringUtils.center(\"a\", 4));\n+        assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n+    }\n+    \n+    public void testCenter_StringIntChar() {\n+        assertEquals(null, StringUtils.center(null, -1, ' '));\n+        assertEquals(null, StringUtils.center(null, 4, ' '));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, ' '));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, ' '));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, ' '));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n+        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, ' '));\n+        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, ' '));\n+        assertEquals(\" a  \", StringUtils.center(\"a\", 4, ' '));\n+        assertEquals(\"  a  \", StringUtils.center(\"a\", 5, ' '));\n+        assertEquals(\"xxaxx\", StringUtils.center(\"a\", 5, 'x'));\n+    }\n+    \n+    public void testCenter_StringIntString() {\n+        assertEquals(null, StringUtils.center(null, 4, null));\n+        assertEquals(null, StringUtils.center(null, -1, \" \"));\n+        assertEquals(null, StringUtils.center(null, 4, \" \"));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n+        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\n+        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\n+        assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n+        assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n+        assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n         try {\n-            StringUtils.leftPad(null, 6, null);\n+            StringUtils.center(\"abc\", 4, null);\n             fail();\n-        } catch (IllegalArgumentException ex) {}\n+        } catch (IllegalArgumentException ex) {\n+        }\n         try {\n-            StringUtils.leftPad(\"123456\", 6, null);\n+            StringUtils.center(\"abc\", 4, \"\");\n             fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            StringUtils.leftPad(\"123456\", 6, \"\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    public void testReverse() {\n+        } catch (IllegalArgumentException ex) {\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReverse_String() {\n         assertEquals(null, StringUtils.reverse(null) );\n+        assertEquals(\"\", StringUtils.reverse(\"\") );\n         assertEquals(\"sdrawkcab\", StringUtils.reverse(\"backwards\") );\n-        assertEquals(\"\", StringUtils.reverse(\"\") );\n-    }\n-        \n-    public void testReverseDelimitedString() {\n+    }\n+        \n+    public void testReverseDelimitedString_StringChar() {\n         assertEquals(null, StringUtils.reverseDelimitedString(null, '.') );\n+        assertEquals(\"\", StringUtils.reverseDelimitedString(\"\", '.') );\n         assertEquals(\"c.b.a\", StringUtils.reverseDelimitedString(\"a.b.c\", '.') );\n         assertEquals(\"a b c\", StringUtils.reverseDelimitedString(\"a b c\", '.') );\n         assertEquals(\"\", StringUtils.reverseDelimitedString(\"\", '.') );\n-\n+    }\n+\n+    public void testReverseDelimitedString_StringString() {\n         assertEquals(null, StringUtils.reverseDelimitedString(null, null) );\n+        assertEquals(\"\", StringUtils.reverseDelimitedString(\"\", null) );\n+        assertEquals(\"\", StringUtils.reverseDelimitedString(\"\", \".\") );\n         assertEquals(\"a.b.c\", StringUtils.reverseDelimitedString(\"a.b.c\", null) );\n         assertEquals(\"c b a\", StringUtils.reverseDelimitedString(\"a b c\", null) );\n-        assertEquals(\"org.apache.test\",\n-                       StringUtils.reverseDelimitedString(\"test.apache.org\", \".\") );\n-        assertEquals(\"reverseDelimitedString(empty-string,'.') failed\",\n-                     \"\",\n-                       StringUtils.reverseDelimitedString(\"\", \".\") );\n-        assertEquals(\"reverseDelimitedString(String,' ') failed\",\n-                     \"once upon a time\",\n-                       StringUtils.reverseDelimitedString(\"time a upon once\",\" \") );\n-    }\n-\n-    public void testDefaultFunctions() {\n+        assertEquals(\"c.b.a\", StringUtils.reverseDelimitedString(\"a.b.c\", \".\") );\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDefault_String() {\n         assertEquals(\"\", StringUtils.defaultString(null) );\n         assertEquals(\"\", StringUtils.defaultString(\"\") );\n-        assertEquals(FOO, StringUtils.defaultString(FOO) );\n-        \n-        assertEquals(BAR, StringUtils.defaultString(null, BAR) );\n-        assertEquals(\"\", StringUtils.defaultString(\"\", BAR) );\n-        assertEquals(FOO, StringUtils.defaultString(FOO, BAR) );\n-\n-        assertEquals(\"\", StringUtils.defaultString((Object) \"\") );\n-        assertEquals(FOO, StringUtils.defaultString((Object) FOO) );\n+        assertEquals(\"abc\", StringUtils.defaultString(\"abc\") );\n+    }\n+            \n+    public void testDefault_StringString() {\n+        assertEquals(\"xyz\", StringUtils.defaultString(null, \"xyz\") );\n+        assertEquals(\"\", StringUtils.defaultString(\"\", \"xyz\") );\n+        assertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"xyz\") );\n+    }\n+    \n+    public void testDefault_Object() {\n         assertEquals(\"\", StringUtils.defaultString((Object) null) );\n-        \n-        assertEquals(\"\", StringUtils.defaultString((Object) \"\", BAR) );\n-        assertEquals(FOO, StringUtils.defaultString((Object) FOO, BAR) );\n+        assertEquals(Boolean.TRUE.toString(), StringUtils.defaultString(Boolean.TRUE) );\n+    }\n+            \n+    public void testDefault_ObjectString() {\n         assertEquals(BAR, StringUtils.defaultString((Object) null, BAR) );\n         assertEquals(Boolean.TRUE.toString(), StringUtils.defaultString(Boolean.TRUE, BAR) );\n     }\n \n-    public void testEscapeFunctions() {\n-        assertEquals(\"escape(empty-string) failed\",\n-                     \"\", StringUtils.escape(\"\") );\n-        assertEquals(\"escape(String) failed\",\n-                     FOO, StringUtils.escape(FOO) );\n-        assertEquals(\"escape(String) failed\",\n-                     \"\\\\t\", StringUtils.escape(\"\\t\") );\n-        assertEquals(\"escape(String) failed\",\n-                     \"\\\\\\\\\", StringUtils.escape(\"\\\\\") );\n-        assertEquals(\"escape(String) failed\",\n-                     \"\\\\\\\\\\\\b\\\\t\\\\r\", StringUtils.escape(\"\\\\\\b\\t\\r\") );\n-        assertEquals(\"escape(String) failed\",\n-                     \"\\\\u1234\", StringUtils.escape(\"\\u1234\") );\n-        assertEquals(\"escape(String) failed\",\n-                     \"\\\\u0234\", StringUtils.escape(\"\\u0234\") );\n-        assertEquals(\"escape(String) failed\",\n-                     \"\\\\u00FD\", StringUtils.escape(\"\\u00fd\") );\n-    }\n-\n-    public void testGetLevenshteinDistance() {\n-        assertEquals(\"getLevenshteinDistance(empty-string, empty-string) failed\",\n-                     0, StringUtils.getLevenshteinDistance(\"\", \"\") );\n-        assertEquals(\"getLevenshteinDistance(empty-string, String) failed\",\n-                     1, StringUtils.getLevenshteinDistance(\"\", \"a\") );\n-        assertEquals(\"getLevenshteinDistance(String, empty-string) failed\",\n-                     7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\") );\n-        assertEquals(\"getLevenshteinDistance(String, String) failed\",\n-                     1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\") );\n-        assertEquals(\"getLevenshteinDistance(String, String) failed\",\n-                     3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\") );\n-        assertEquals(\"getLevenshteinDistance(String, String) failed\",\n-                     7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") );\n-        assertEquals(\"getLevenshteinDistance(String, String) failed\",\n-                     7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") );\n-        assertEquals(\"getLevenshteinDistance(String, String) failed\",\n-                     1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\") );\n-    }\n-\n-    public void testAbbreviate() {\n+    //-----------------------------------------------------------------------\n+    public void testEscapeFunctions_String() {\n+        assertEquals(\"\", StringUtils.escape(\"\") );\n+        assertEquals(\"abc\", StringUtils.escape(\"abc\") );\n+        assertEquals(\"\\\\t\", StringUtils.escape(\"\\t\") );\n+        assertEquals(\"\\\\\\\\\", StringUtils.escape(\"\\\\\") );\n+        assertEquals(\"\\\\\\\\\\\\b\\\\t\\\\r\", StringUtils.escape(\"\\\\\\b\\t\\r\") );\n+        assertEquals(\"\\\\u1234\", StringUtils.escape(\"\\u1234\") );\n+        assertEquals(\"\\\\u0234\", StringUtils.escape(\"\\u0234\") );\n+        assertEquals(\"\\\\u00FD\", StringUtils.escape(\"\\u00fd\") );\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAbbreviate_StringInt() {\n         assertEquals(null, StringUtils.abbreviate(null, 10));\n-        assertEquals(\"abbreviate(String,int) failed\",\n-\t\t     \"short\", StringUtils.abbreviate(\"short\", 10));\n-        assertEquals(\"abbreviate(String,int) failed\",\n-\t\t     \"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\n+        assertEquals(\"\", StringUtils.abbreviate(\"\", 10));\n+        assertEquals(\"short\", StringUtils.abbreviate(\"short\", 10));\n+        assertEquals(\"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\n \n         String raspberry = \"raspberry peach\";\n-        assertEquals(\"abbreviate(String,int) failed (one past limit)\",\n-\t\t     \"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\n-        assertEquals(\"abbreviate(String,int) (at limit)\",\n-\t\t     \"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\n-        assertEquals(\"abbreviate(String,int) (one below limit)\",\n-\t\t     \"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\n-\n-        assertEquals(\"abbreviate(String,int,int) failed\",\n-                \"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\n+        assertEquals(\"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\n+        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\n+        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\n+    }\n+    \n+    public void testAbbreviate_StringIntInt() {\n+        assertEquals(null, StringUtils.abbreviate(null, 10, 12));\n+        assertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\n+        assertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\n+\n+        String raspberry = \"raspberry peach\";\n+        assertEquals(\"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\n \n         assertEquals(null, StringUtils.abbreviate(null, 7, 14));\n         assertAbbreviateWithOffset(\"abcdefg...\", -1, 10);\n         assertAbbreviateWithOffset(\"...ijklmno\", 15, 10);\n         assertAbbreviateWithOffset(\"...ijklmno\", 16, 10);\n         assertAbbreviateWithOffset(\"...ijklmno\", Integer.MAX_VALUE, 10);\n-\n-    }\n-\n-    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth)\n-    {\n+    }\n+\n+    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {\n         String abcdefghijklmno = \"abcdefghijklmno\";\n         String message = \"abbreviate(String,int,int) failed\";\n         String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n         assertEquals(message, expected, actual);\n     }\n \n-    public void testDifference() {\n+    //-----------------------------------------------------------------------\n+    public void testDifference_StringString() {\n         assertEquals(null, StringUtils.difference(null, null));\n+        assertEquals(\"\", StringUtils.difference(\"\", \"\"));\n+        assertEquals(\"abc\", StringUtils.difference(\"\", \"abc\"));\n+        assertEquals(\"\", StringUtils.difference(\"abc\", \"\"));\n         assertEquals(\"i am a robot\", StringUtils.difference(null, \"i am a robot\"));\n         assertEquals(\"i am a machine\", StringUtils.difference(\"i am a machine\", null));\n         assertEquals(\"robot\", StringUtils.difference(\"i am a machine\", \"i am a robot\"));\n-        assertEquals(\"\", StringUtils.difference(\"foo\", \"foo\"));\n+        assertEquals(\"\", StringUtils.difference(\"abc\", \"abc\"));\n         assertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\n     }\n \n-    public void testDifferenceAt() {\n+    public void testDifferenceAt_StringString() {\n         assertEquals(-1, StringUtils.differenceAt(null, null));\n         assertEquals(0, StringUtils.differenceAt(null, \"i am a robot\"));\n+        assertEquals(-1, StringUtils.differenceAt(\"\", \"\"));\n+        assertEquals(0, StringUtils.differenceAt(\"\", \"abc\"));\n+        assertEquals(0, StringUtils.differenceAt(\"abc\", \"\"));\n         assertEquals(0, StringUtils.differenceAt(\"i am a machine\", null));\n         assertEquals(7, StringUtils.differenceAt(\"i am a machine\", \"i am a robot\"));\n         assertEquals(-1, StringUtils.differenceAt(\"foo\", \"foo\"));\n         assertEquals(0, StringUtils.differenceAt(\"i am a robot\", \"you are a robot\"));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testGetLevenshteinDistance_StringString() {\n+        assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\") );\n+        assertEquals(1, StringUtils.getLevenshteinDistance(\"\", \"a\") );\n+        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\") );\n+        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\") );\n+        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\") );\n+        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") );\n+        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") );\n+        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\") );\n+    }\n+\n }\n ", "timestamp": 1058696962, "metainfo": ""}