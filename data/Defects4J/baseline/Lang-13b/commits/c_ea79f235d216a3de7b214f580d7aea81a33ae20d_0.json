{"sha": "ea79f235d216a3de7b214f580d7aea81a33ae20d", "log": "Convert to JUnit 4.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n \n import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n \n /**\n  * Unit tests for {@link StringEscapeUtils}.\n  *\n  * @version $Id$\n  */\n-public class StringEscapeUtilsTest extends TestCase {\n+public class StringEscapeUtilsTest {\n     private final static String FOO = \"foo\";\n \n-    public StringEscapeUtilsTest(String name) {\n-        super(name);\n-    }\n-\n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new StringEscapeUtils());\n         Constructor<?>[] cons = StringEscapeUtils.class.getDeclaredConstructors();\n         assertEquals(false, Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testEscapeJava() throws IOException {\n         assertEquals(null, StringEscapeUtils.escapeJava(null));\n         try {\n     }\n \n     /**\n-     * https://issues.apache.org/jira/browse/LANG-421\n+     * Tests https://issues.apache.org/jira/browse/LANG-421\n      */\n+    @Test\n     public void testEscapeJavaWithSlash() {\n         final String input = \"String with a slash (/) in it\";\n \n         assertEquals(expected, writer.toString());\n     }\n \n+    @Test\n     public void testUnescapeJava() throws IOException {\n         assertEquals(null, StringEscapeUtils.unescapeJava(null));\n         try {\n \n     }\n \n+    @Test\n     public void testEscapeEcmaScript() {\n         assertEquals(null, StringEscapeUtils.escapeEcmaScript(null));\n         try {\n         {\"8-bit ascii shouldn't number-escape\", \"\\u0080\\u009F\", \"\\u0080\\u009F\"},\n     };\n \n+    @Test\n     public void testEscapeHtml() {\n         for (int i = 0; i < htmlEscapes.length; ++i) {\n             String message = htmlEscapes[i][0];\n         }\n     }\n \n+    @Test\n     public void testUnescapeHtml4() {\n         for (int i = 0; i < htmlEscapes.length; ++i) {\n             String message = htmlEscapes[i][0];\n         assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml4(\"Hello&##;World\"));\n     }\n \n+    @Test\n     public void testUnescapeHexCharsHtml() {\n         // Simple easy to grok test \n         assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#x80;&#x9F;\"));\n         }\n     }\n \n+    @Test\n     public void testUnescapeUnknownEntity() throws Exception\n     {\n         assertEquals(\"&zzzz;\", StringEscapeUtils.unescapeHtml4(\"&zzzz;\"));\n     }\n \n+    @Test\n     public void testEscapeHtmlVersions() throws Exception\n     {\n         assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml4(\"\\u0392\"));\n \n     }\n \n+    @Test\n     public void testEscapeXml() throws Exception {\n         assertEquals(\"&lt;abc&gt;\", StringEscapeUtils.escapeXml(\"<abc>\"));\n         assertEquals(\"<abc>\", StringEscapeUtils.unescapeXml(\"&lt;abc&gt;\"));\n \n     // Tests issue #38569\n     // http://issues.apache.org/bugzilla/show_bug.cgi?id=38569\n+    @Test\n     public void testStandaloneAmphersand() {\n         assertEquals(\"<P&O>\", StringEscapeUtils.unescapeHtml4(\"&lt;P&O&gt;\"));\n         assertEquals(\"test & <\", StringEscapeUtils.unescapeHtml4(\"test & &lt;\"));\n         assertEquals(\"test & <\", StringEscapeUtils.unescapeXml(\"test & &lt;\"));\n     }\n \n+    @Test\n     public void testLang313() {\n         assertEquals(\"& &\", StringEscapeUtils.unescapeHtml4(\"& &amp;\"));\n     }\n \n+    @Test\n     public void testEscapeCsvString() throws Exception\n     {\n         assertEquals(\"foo.bar\",          StringEscapeUtils.escapeCsv(\"foo.bar\"));\n         assertEquals(null, StringEscapeUtils.escapeCsv(null));\n     }\n \n+    @Test\n     public void testEscapeCsvWriter() throws Exception\n     {\n         checkCsvEscapeWriter(\"foo.bar\",        \"foo.bar\");\n         }\n     }\n \n+    @Test\n     public void testUnescapeCsvString() throws Exception\n     {\n         assertEquals(\"foo.bar\",          StringEscapeUtils.unescapeCsv(\"foo.bar\"));\n         assertEquals(\"\\\"foo.bar\\\"\",          StringEscapeUtils.unescapeCsv(\"\\\"foo.bar\\\"\"));\n     }\n \n+    @Test\n     public void testUnescapeCsvWriter() throws Exception\n     {\n         checkCsvUnescapeWriter(\"foo.bar\",        \"foo.bar\");\n      * \n      * @throws java.io.UnsupportedEncodingException\n      */\n+    @Test\n     public void testEscapeHtmlHighUnicode() throws java.io.UnsupportedEncodingException {\n         // this is the utf8 representation of the character:\n         // COUNTING ROD UNIT DIGIT THREE\n     /**\n      * Tests https://issues.apache.org/jira/browse/LANG-339\n      */\n+    @Test\n     public void testEscapeHiragana() {\n         // Some random Japanese unicode characters\n         String original = \"\\u304B\\u304C\\u3068\";\n      * @throws IOException\n      *             if an I/O error occurs\n      */\n+    @Test\n     public void testLang708() throws IOException {\n         String input = IOUtils.toString(new FileInputStream(\"src/test/resources/lang-708-input.txt\"), \"UTF-8\");\n         String escaped = StringEscapeUtils.escapeEcmaScript(input);\n     /**\n      * Tests https://issues.apache.org/jira/browse/LANG-720\n      */\n+    @Test\n     public void testLang720() {\n         String input = new StringBuilder(\"\\ud842\\udfb7\").append(\"A\").toString();\n         String escaped = StringEscapeUtils.escapeXml(input);", "timestamp": 1310855203, "metainfo": ""}