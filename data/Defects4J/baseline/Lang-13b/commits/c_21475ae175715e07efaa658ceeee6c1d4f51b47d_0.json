{"sha": "21475ae175715e07efaa658ceeee6c1d4f51b47d", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/JavaVersion.java\n+++ b/src/main/java/org/apache/commons/lang3/JavaVersion.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * <p>An enum representing all the versions of the Java specification.\n- * This is intended to mirror available values from the \n+ * This is intended to mirror available values from the\n  * <em>java.specification.version</em> System property. </p>\n  *\n  * @author Apache Software Foundation\n  * @version $Id: $\n  */\n public enum JavaVersion {\n-    JAVA_0_9(1.5f, \"0.9\"),    // Android \n-    JAVA_1_1(1.1f, \"1.1\"), \n-    JAVA_1_2(1.2f, \"1.2\"), \n-    JAVA_1_3(1.3f, \"1.3\"), \n-    JAVA_1_4(1.4f, \"1.4\"), \n-    JAVA_1_5(1.5f, \"1.5\"), \n-    JAVA_1_6(1.6f, \"1.6\"), \n+    JAVA_0_9(1.5f, \"0.9\"),    // Android\n+    JAVA_1_1(1.1f, \"1.1\"),\n+    JAVA_1_2(1.2f, \"1.2\"),\n+    JAVA_1_3(1.3f, \"1.3\"),\n+    JAVA_1_4(1.4f, \"1.4\"),\n+    JAVA_1_5(1.5f, \"1.5\"),\n+    JAVA_1_6(1.6f, \"1.6\"),\n     JAVA_1_7(1.7f, \"1.7\"),\n     JAVA_1_8(1.8f, \"1.8\");\n \n \n     /**\n      * Constructor.\n-     * \n+     *\n      * @param value  the float value\n      * @param name  the standard name, not null\n      */\n         return this.value >= requiredVersion.value;\n     }\n \n+    /**\n+     * Transforms the given string with a Java version number to the\n+     * corresponding constant of this enumeration class. This method is used\n+     * internally.\n+     *\n+     * @param nom the Java version as string\n+     * @return the corresponding enumeration constant or <b>null</b> if the\n+     * version is unknown\n+     */\n     // helper for static importing\n     static JavaVersion getJavaVersion(final String nom) {\n         return get(nom);\n     }\n \n+    /**\n+     * Transforms the given string with a Java version number to the\n+     * corresponding constant of this enumeration class. This method is used\n+     * internally.\n+     *\n+     * @param nom the Java version as string\n+     * @return the corresponding enumeration constant or <b>null</b> if the\n+     * version is unknown\n+     */\n     static JavaVersion get(final String nom) {\n         if (\"0.9\".equals(nom)) {\n             return JAVA_0_9;\n     //-----------------------------------------------------------------------\n     /**\n      * <p>The string value is overridden to return the standard name.</p>\n-     * \n+     *\n      * <p>For example, '1.5'.</p>\n-     * \n+     *\n      * @return the name, not null\n      */\n     @Override", "timestamp": 1300549665, "metainfo": ""}