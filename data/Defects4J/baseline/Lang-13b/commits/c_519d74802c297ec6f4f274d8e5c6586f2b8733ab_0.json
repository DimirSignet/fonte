{"sha": "519d74802c297ec6f4f274d8e5c6586f2b8733ab", "log": "Javadoc clarifications and tidy  ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n     /**\n      * Constructs a new MutableBoolean with the specified value.\n      * \n-     * @param value\n-     *            a value.\n+     * @param value  the initial value to store\n      */\n     public MutableBoolean(boolean value) {\n         super();\n     /**\n      * Constructs a new MutableBoolean with the specified value.\n      * \n-     * @param value\n-     *            a value.\n-     * @throws NullPointerException\n-     *             if the object is null\n+     * @param value  the initial value to store, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public MutableBoolean(Boolean value) {\n         super();\n     /**\n      * Compares this mutable to another in ascending order.\n      * \n-     * @param other\n-     *            the mutable to compare to\n-     * @return zero if this object represents the same boolean value as the argument; a positive value if this object\n-     *         represents true and the argument represents false; and a negative value if this object represents false\n-     *         and the argument represents true\n+     * @param other  the other mutable to compare to, not null\n+     * @return negative if this is less, zero if equal, positive if greater\n+     *  where false is less than true\n      */\n     public int compareTo(MutableBoolean other) {\n         boolean anotherVal = other.value;\n      * not <code>null</code> and is an <code>MutableBoolean</code> object that contains the same\n      * <code>boolean</code> value as this object.\n      * \n-     * @param obj\n-     *            the object to compare with.\n+     * @param obj  the object to compare with, null returns false\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n     @Override\n     /**\n      * Gets the value as a Boolean instance.\n      * \n-     * @return the value as a Boolean\n+     * @return the value as a Boolean, never null\n      */\n     public Boolean getValue() {\n         return Boolean.valueOf(this.value);\n     }\n \n     /**\n-     * Returns a suitable hashcode for this mutable.\n+     * Returns a suitable hash code for this mutable.\n      * \n-     * @return the integer <code>1231</code> if this object represents <code>true</code>; returns the integer\n-     *         <code>1237</code> if this object represents <code>false</code>.\n+     * @return the hash code returned by <code>Boolean.TRUE</code> or <code>Boolean.FALSE</code>\n      */\n     @Override\n     public int hashCode() {\n     /**\n      * Sets the value.\n      * \n-     * @param value\n-     *            the value to set\n+     * @param value  the value to set\n      */\n     public void setValue(boolean value) {\n         this.value = value;\n     /**\n      * Sets the value from any Boolean instance.\n      * \n-     * @param value\n-     *            the value to set\n-     * @throws NullPointerException\n-     *             if the object is null\n+     * @param value  the value to set, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public void setValue(Boolean value) {\n         this.value = value.booleanValue();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the String value of this mutable.\n      * \n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n     /**\n      * Constructs a new MutableByte with the specified value.\n      * \n-     * @param value\n-     *            a value.\n+     * @param value  the initial value to store\n      */\n     public MutableByte(byte value) {\n         super();\n     /**\n      * Constructs a new MutableByte with the specified value.\n      * \n-     * @param value\n-     *            a value.\n-     * @throws NullPointerException\n-     *             if the object is null\n+     * @param value  the initial value to store, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public MutableByte(Number value) {\n         super();\n     /**\n      * Constructs a new MutableByte parsing the given string.\n      * \n-     * @param value\n-     *                  the string to parse.\n-     * @throws NumberFormatException\n-     *                  if the string cannot be parsed into a byte\n+     * @param value  the string to parse, not null\n+     * @throws NumberFormatException if the string cannot be parsed into a byte\n      */\n     public MutableByte(String value) throws NumberFormatException {\n         super();\n     /**\n      * Gets the value as a Byte instance.\n      * \n-     * @return the value as a Byte\n+     * @return the value as a Byte, never null\n      */\n     public Byte getValue() {\n         return Byte.valueOf(this.value);\n     /**\n      * Sets the value.\n      * \n-     * @param value\n-     *            the value to set\n+     * @param value  the value to set\n      */\n     public void setValue(byte value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value\n-     *            the value to set\n-     * @throws NullPointerException\n-     *             if the object is null\n+     * @param value  the value to set, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public void setValue(Number value) {\n         this.value = value.byteValue();\n     }\n \n     /**\n-     * Returns the value of this MutableByte as a int.\n+     * Returns the value of this MutableByte as an int.\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n      * @since Commons Lang 2.2\n      */\n     public void add(byte operand) {\n     }\n \n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void add(Number operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n      * @since Commons Lang 2.2\n      */\n     public void subtract(byte operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void subtract(Number operand) {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n-     * is not <code>null</code> and is a <code>MutableByte</code> object that contains the same <code>byte</code>\n-     * value as this object.\n-     * \n-     * @param obj\n-     *            the object to compare with.\n+     * Compares this object to the specified object. The result is <code>true</code> if and only if the argument is\n+     * not <code>null</code> and is a <code>MutableByte</code> object that contains the same <code>byte</code> value\n+     * as this object.\n+     * \n+     * @param obj  the object to compare with, null returns false\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n     @Override\n     }\n \n     /**\n-     * Returns a suitable hashcode for this mutable.\n-     * \n-     * @return a suitable hashcode\n+     * Returns a suitable hash code for this mutable.\n+     * \n+     * @return a suitable hash code\n      */\n     @Override\n     public int hashCode() {\n         return value;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Compares this mutable to another in ascending order.\n      * \n-     * @param other\n-     *            the mutable to compare to\n+     * @param other  the other mutable to compare to, not null\n      * @return negative if this is less, zero if equal, positive if greater\n-     * @throws ClassCastException if the argument is not a MutableByte\n      */\n     public int compareTo(MutableByte other) {\n         byte anotherVal = other.value;\n         return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the String value of this mutable.\n      * \n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n     /**\n      * Constructs a new MutableDouble with the specified value.\n      * \n-     * @param value\n-     *            a value.\n+     * @param value  the initial value to store\n      */\n     public MutableDouble(double value) {\n         super();\n     /**\n      * Constructs a new MutableDouble with the specified value.\n      * \n-     * @param value\n-     *            a value.\n-     * @throws NullPointerException\n-     *             if the object is null\n+     * @param value  the initial value to store, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public MutableDouble(Number value) {\n         super();\n     /**\n      * Constructs a new MutableDouble parsing the given string.\n      * \n-     * @param value\n-     *                  the string to parse.\n-     * @throws NumberFormatException\n-     *                  if the string cannot be parsed into a double\n+     * @param value  the string to parse, not null\n+     * @throws NumberFormatException if the string cannot be parsed into a double\n      */\n     public MutableDouble(String value) throws NumberFormatException {\n         super();\n     /**\n      * Gets the value as a Double instance.\n      * \n-     * @return the value as a Double\n+     * @return the value as a Double, never null\n      */\n     public Double getValue() {\n         return new Double(this.value);\n     /**\n      * Sets the value.\n      * \n-     * @param value\n-     *            the value to set\n+     * @param value  the value to set\n      */\n     public void setValue(double value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value\n-     *            the value to set\n-     * @throws NullPointerException\n-     *             if the object is null\n+     * @param value  the value to set, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public void setValue(Number value) {\n         this.value = value.doubleValue();\n     //-----------------------------------------------------------------------\n     // shortValue and bytValue rely on Number implementation\n     /**\n-     * Returns the value of this MutableDouble as a int.\n+     * Returns the value of this MutableDouble as an int.\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add\n      * @since Commons Lang 2.2\n      */\n     public void add(double operand) {\n     }\n \n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void add(Number operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n      * @since Commons Lang 2.2\n      */\n     public void subtract(double operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void subtract(Number operand) {\n      * <code>+0.0==-0.0</code> has the value <code>true</code>. This allows hashtables to operate properly.\n      * </ul>\n      * \n-     * @param obj\n-     *            the object to compare with.\n+     * @param obj  the object to compare with, null returns false\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n     @Override\n     }\n \n     /**\n-     * Returns a suitable hashcode for this mutable.\n-     * \n-     * @return a suitable hashcode\n+     * Returns a suitable hash code for this mutable.\n+     * \n+     * @return a suitable hash code\n      */\n     @Override\n     public int hashCode() {\n         return (int) (bits ^ (bits >>> 32));\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Compares this mutable to another in ascending order.\n      * \n-     * @param other\n-     *            the mutable to compare to\n+     * @param other  the other mutable to compare to, not null\n      * @return negative if this is less, zero if equal, positive if greater\n      */\n     public int compareTo(MutableDouble other) {\n         return Double.compare(value, anotherVal);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the String value of this mutable.\n      * \n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n     /**\n      * Constructs a new MutableFloat with the specified value.\n      * \n-     * @param value\n-     *            a value.\n+     * @param value  the initial value to store\n      */\n     public MutableFloat(float value) {\n         super();\n     /**\n      * Constructs a new MutableFloat with the specified value.\n      * \n-     * @param value\n-     *            a value.\n-     * @throws NullPointerException\n-     *             if the object is null\n+     * @param value  the initial value to store, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public MutableFloat(Number value) {\n         super();\n     /**\n      * Constructs a new MutableFloat parsing the given string.\n      * \n-     * @param value\n-     *                  the string to parse.\n-     * @throws NumberFormatException\n-     *                  if the string cannot be parsed into a float\n+     * @param value  the string to parse, not null\n+     * @throws NumberFormatException if the string cannot be parsed into a float\n      */\n     public MutableFloat(String value) throws NumberFormatException {\n         super();\n     /**\n      * Gets the value as a Float instance.\n      * \n-     * @return the value as a Float\n+     * @return the value as a Float, never null\n      */\n     public Float getValue() {\n         return new Float(this.value);\n     /**\n      * Sets the value.\n      * \n-     * @param value\n-     *            the value to set\n+     * @param value  the value to set\n      */\n     public void setValue(float value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value\n-     *            the value to set\n-     * @throws NullPointerException\n-     *             if the object is null\n+     * @param value  the value to set, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public void setValue(Number value) {\n         this.value = value.floatValue();\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n      * @since Commons Lang 2.2\n      */\n     public void add(float operand) {\n     }\n \n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void add(Number operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract\n      * @since Commons Lang 2.2\n      */\n     public void subtract(float operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void subtract(Number operand) {\n     //-----------------------------------------------------------------------\n     // shortValue and bytValue rely on Number implementation\n     /**\n-     * Returns the value of this MutableFloat as a int.\n+     * Returns the value of this MutableFloat as an int.\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n      * </ul>\n      * This definition allows hashtables to operate properly.\n      * \n-     * @param obj\n-     *            the object to be compared\n+     * @param obj  the object to compare with, null returns false\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      * @see java.lang.Float#floatToIntBits(float)\n      */\n             && (Float.floatToIntBits(((MutableFloat) obj).value) == Float.floatToIntBits(value));\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Returns a suitable hashcode for this mutable.\n-     * \n-     * @return a suitable hashcode\n+    /**\n+     * Returns a suitable hash code for this mutable.\n+     * \n+     * @return a suitable hash code\n      */\n     @Override\n     public int hashCode() {\n         return Float.floatToIntBits(value);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Compares this mutable to another in ascending order.\n      * \n-     * @param other\n-     *            the mutable to compare to\n+     * @param other  the other mutable to compare to, not null\n      * @return negative if this is less, zero if equal, positive if greater\n      */\n     public int compareTo(MutableFloat other) {\n         return Float.compare(value, anotherVal);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the String value of this mutable.\n      * \n--- a/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n     /**\n      * Constructs a new MutableInt with the specified value.\n      * \n-     * @param value\n-     *                  a value.\n+     * @param value  the initial value to store\n      */\n     public MutableInt(int value) {\n         super();\n     /**\n      * Constructs a new MutableInt with the specified value.\n      * \n-     * @param value\n-     *                  a value.\n-     * @throws NullPointerException\n-     *                  if the object is null\n+     * @param value  the initial value to store, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public MutableInt(Number value) {\n         super();\n     /**\n      * Constructs a new MutableInt parsing the given string.\n      * \n-     * @param value\n-     *                  the string to parse.\n-     * @throws NumberFormatException\n-     *                  if the string cannot be parsed into an int\n+     * @param value  the string to parse, not null\n+     * @throws NumberFormatException if the string cannot be parsed into an int\n      */\n     public MutableInt(String value) throws NumberFormatException {\n         super();\n     /**\n      * Gets the value as a Integer instance.\n      * \n-     * @return the value as a Integer\n+     * @return the value as a Integer, never null\n      */\n     public Integer getValue() {\n         return new Integer(this.value);\n     /**\n      * Sets the value.\n      * \n-     * @param value\n-     *                  the value to set\n+     * @param value  the value to set\n      */\n     public void setValue(int value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value\n-     *                  the value to set\n-     * @throws NullPointerException\n-     *                  if the object is null\n-     * @throws ClassCastException\n-     *                  if the type is not a {@link Number}\n+     * @param value  the value to set, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public void setValue(Number value) {\n         this.value = value.intValue();\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n      * @since Commons Lang 2.2\n      */\n     public void add(int operand) {\n     }\n \n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void add(Number operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n      * @since Commons Lang 2.2\n      */\n     public void subtract(int operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void subtract(Number operand) {\n     //-----------------------------------------------------------------------\n     // shortValue and bytValue rely on Number implementation\n     /**\n-     * Returns the value of this MutableInt as a int.\n+     * Returns the value of this MutableInt as an int.\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * Compares this object to the specified object. The result is <code>true</code> if and only if the argument is\n-     * not <code>null</code> and is an <code>MutableInt</code> object that contains the same <code>int</code> value\n+     * not <code>null</code> and is a <code>MutableInt</code> object that contains the same <code>int</code> value\n      * as this object.\n      * \n-     * @param obj\n-     *                  the object to compare with.\n+     * @param obj  the object to compare with, null returns false\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n     @Override\n     }\n \n     /**\n-     * Returns a suitable hashcode for this mutable.\n-     * \n-     * @return a suitable hashcode\n+     * Returns a suitable hash code for this mutable.\n+     * \n+     * @return a suitable hash code\n      */\n     @Override\n     public int hashCode() {\n         return value;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Compares this mutable to another in ascending order.\n      * \n-     * @param other\n-     *                  the mutable to compare to\n+     * @param other  the other mutable to compare to, not null\n      * @return negative if this is less, zero if equal, positive if greater\n      */\n     public int compareTo(MutableInt other) {\n         return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the String value of this mutable.\n      * \n--- a/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n     /**\n      * Constructs a new MutableLong with the specified value.\n      * \n-     * @param value\n-     *            a value.\n+     * @param value  the initial value to store\n      */\n     public MutableLong(long value) {\n         super();\n     /**\n      * Constructs a new MutableLong with the specified value.\n      * \n-     * @param value\n-     *            a value.\n-     * @throws NullPointerException\n-     *             if the object is null\n+     * @param value  the initial value to store, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public MutableLong(Number value) {\n         super();\n     /**\n      * Constructs a new MutableLong parsing the given string.\n      * \n-     * @param value\n-     *                  the string to parse.\n-     * @throws NumberFormatException\n-     *                  if the string cannot be parsed into a long\n+     * @param value  the string to parse, not null\n+     * @throws NumberFormatException if the string cannot be parsed into a long\n      */\n     public MutableLong(String value) throws NumberFormatException {\n         super();\n     /**\n      * Gets the value as a Long instance.\n      * \n-     * @return the value as a Long\n+     * @return the value as a Long, never null\n      */\n     public Long getValue() {\n         return new Long(this.value);\n     /**\n      * Sets the value.\n      * \n-     * @param value\n-     *            the value to set\n+     * @param value  the value to set\n      */\n     public void setValue(long value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value\n-     *            the value to set\n-     * @throws NullPointerException\n-     *             if the object is null\n+     * @param value  the value to set, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public void setValue(Number value) {\n         this.value = value.longValue();\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n      * @since Commons Lang 2.2\n      */\n     public void add(long operand) {\n     }\n \n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void add(Number operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n      * @since Commons Lang 2.2\n      */\n     public void subtract(long operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void subtract(Number operand) {\n     //-----------------------------------------------------------------------\n     // shortValue and bytValue rely on Number implementation\n     /**\n-     * Returns the value of this MutableLong as a int.\n+     * Returns the value of this MutableLong as an int.\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n+     * Compares this object to the specified object. The result is <code>true</code> if and only if the argument\n      * is not <code>null</code> and is a <code>MutableLong</code> object that contains the same <code>long</code>\n      * value as this object.\n      * \n-     * @param obj\n-     *            the object to compare with.\n+     * @param obj  the object to compare with, null returns false\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n     @Override\n     }\n \n     /**\n-     * Returns a suitable hashcode for this mutable.\n-     * \n-     * @return a suitable hashcode\n+     * Returns a suitable hash code for this mutable.\n+     * \n+     * @return a suitable hash code\n      */\n     @Override\n     public int hashCode() {\n         return (int) (value ^ (value >>> 32));\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Compares this mutable to another in ascending order.\n      * \n-     * @param other\n-     *            the mutable to compare to\n+     * @param other  the other mutable to compare to, not null\n      * @return negative if this is less, zero if equal, positive if greater\n      */\n     public int compareTo(MutableLong other) {\n         return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the String value of this mutable.\n      * \n--- a/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n     /**\n      * Constructs a new MutableShort with the specified value.\n      * \n-     * @param value\n-     *                  a value.\n+     * @param value  the initial value to store\n      */\n     public MutableShort(short value) {\n         super();\n     /**\n      * Constructs a new MutableShort with the specified value.\n      * \n-     * @param value\n-     *                  a value.\n-     * @throws NullPointerException\n-     *                  if the object is null\n+     * @param value  the initial value to store, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public MutableShort(Number value) {\n         super();\n     /**\n      * Constructs a new MutableShort parsing the given string.\n      * \n-     * @param value\n-     *                  the string to parse.\n-     * @throws NumberFormatException\n-     *                  if the string cannot be parsed into a short\n+     * @param value  the string to parse, not null\n+     * @throws NumberFormatException if the string cannot be parsed into a short\n      */\n     public MutableShort(String value) throws NumberFormatException {\n         super();\n     /**\n      * Gets the value as a Short instance.\n      * \n-     * @return the value as a Short\n+     * @return the value as a Short, never null\n      */\n     public Short getValue() {\n         return new Short(this.value);\n     /**\n      * Sets the value.\n      * \n-     * @param value\n-     *                  the value to set\n+     * @param value  the value to set\n      */\n     public void setValue(short value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value\n-     *                  the value to set\n-     * @throws NullPointerException\n-     *                  if the object is null\n+     * @param value  the value to set, not null\n+     * @throws NullPointerException if the object is null\n      */\n     public void setValue(Number value) {\n         this.value = value.shortValue();\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n      * @since Commons Lang 2.2\n      */\n     public void add(short operand) {\n     }\n \n     /**\n-     * Adds a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void add(Number operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n      * @since Commons Lang 2.2\n      */\n     public void subtract(short operand) {\n     }\n \n     /**\n-     * Subtracts a value.\n-     * \n-     * @param operand\n-     *            the value to add\n-     * @throws NullPointerException\n-     *             if the object is null\n-     *\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n+     * @throws NullPointerException if the object is null\n      * @since Commons Lang 2.2\n      */\n     public void subtract(Number operand) {\n     }\n \n     /**\n-     * Returns the value of this MutableShort as a int.\n+     * Returns the value of this MutableShort as an int.\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n+     * Compares this object to the specified object. The result is <code>true</code> if and only if the argument\n      * is not <code>null</code> and is a <code>MutableShort</code> object that contains the same <code>short</code>\n      * value as this object.\n      * \n-     * @param obj\n-     *                  the object to compare with.\n+     * @param obj  the object to compare with, null returns false\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n     @Override\n     }\n \n     /**\n-     * Returns a suitable hashcode for this mutable.\n-     * \n-     * @return a suitable hashcode\n+     * Returns a suitable hash code for this mutable.\n+     * \n+     * @return a suitable hash code\n      */\n     @Override\n     public int hashCode() {\n         return value;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Compares this mutable to another in ascending order.\n      * \n-     * @param other\n-     *                  the mutable to compare to\n+     * @param other  the other mutable to compare to, not null\n      * @return negative if this is less, zero if equal, positive if greater\n      */\n     public int compareTo(MutableShort other) {\n         return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the String value of this mutable.\n      * ", "timestamp": 1256600589, "metainfo": ""}