{"sha": "e0fd3944555ac03f579db3ddeb8bf57322c8c62d", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Validate.java\n+++ b/src/main/java/org/apache/commons/lang3/Validate.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n import java.util.regex.Pattern;\n \n /**\n- * <p>This class assists in validating arguments. The validation methods are \n- * based along the following principles: \n+ * <p>This class assists in validating arguments. The validation methods are\n+ * based along the following principles:\n  * <ul>\n  *   <li>An invalid {@code null} argument causes a {@link NullPointerException}.</li>\n  *   <li>A non-{@code null} argument causes an {@link IllegalArgumentException}.</li>\n- *   <li>An invalid index into an array/collection/map/string causes an {@link IndexOutOfBoundsException}.</li> \n+ *   <li>An invalid index into an array/collection/map/string causes an {@link IndexOutOfBoundsException}.</li>\n  * </ul>\n- *  \n- * <p>All exceptions messages are <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax\">format strings</a>\n+ *\n+ * <p>All exceptions messages are\n+ * <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax\">format strings</a>\n  * as defined by the Java platform. For example:</p>\n- * \n+ *\n  * <pre>\n  * Validate.isTrue(i > 0, \"The value must be greater than zero: %d\", i);\n  * Validate.notNull(surname, \"The surname must not be %s\", null);\n  * </pre>\n- * \n+ *\n  * <p>#ThreadSafe#</p>\n  * @author Apache Software Foundation\n  * @author <a href=\"mailto:ola.berg@arkitema.se\">Ola Berg</a>\n  */\n public class Validate {\n \n-    private static final String DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE = \"The value %s is not in the specified exclusive range of %s to %s\";\n-    private static final String DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE = \"The value %s is not in the specified inclusive range of %s to %s\";\n+    private static final String DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE =\n+        \"The value %s is not in the specified exclusive range of %s to %s\";\n+    private static final String DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE =\n+        \"The value %s is not in the specified inclusive range of %s to %s\";\n     private static final String DEFAULT_MATCHES_PATTERN_EX = \"The string %s does not match the pattern %s\";\n     private static final String DEFAULT_IS_NULL_EX_MESSAGE = \"The validated object is null\";\n     private static final String DEFAULT_IS_TRUE_EX_MESSAGE = \"The validated expression is false\";\n-    private static final String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE = \"The validated array contains null element at index: %d\";\n-    private static final String DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE = \"The validated collection contains null element at index: %d\";\n+    private static final String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE =\n+        \"The validated array contains null element at index: %d\";\n+    private static final String DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE =\n+        \"The validated collection contains null element at index: %d\";\n     private static final String DEFAULT_NOT_BLANK_EX_MESSAGE = \"The validated character sequence is blank\";\n     private static final String DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE = \"The validated array is empty\";\n-    private static final String DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE = \"The validated character sequence is empty\";\n+    private static final String DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE =\n+        \"The validated character sequence is empty\";\n     private static final String DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE = \"The validated collection is empty\";\n     private static final String DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE = \"The validated map is empty\";\n     private static final String DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE = \"The validated array index is invalid: %d\";\n-    private static final String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE = \"The validated character sequence index is invalid: %d\";\n-    private static final String DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE = \"The validated collection index is invalid: %d\";\n+    private static final String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE =\n+        \"The validated character sequence index is invalid: %d\";\n+    private static final String DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE =\n+        \"The validated collection index is invalid: %d\";\n     private static final String DEFAULT_VALID_STATE_EX_MESSAGE = \"The validated state is false\";\n-    private static final String DEFAULT_IS_ASSIGNABLE_EX_MESSAGE = \"The validated class can not be converted to the %s class\";\n+    private static final String DEFAULT_IS_ASSIGNABLE_EX_MESSAGE =\n+        \"The validated class can not be converted to the %s class\";\n     private static final String DEFAULT_IS_INSTANCE_OF_EX_MESSAGE = \"The validated object is not an instance of %s\";\n \n     /**\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the argument condition is {@code true}; otherwise \n+     * <p>Validate that the argument condition is {@code true}; otherwise\n      * throwing an exception with the specified message. This method is useful when\n-     * validating according to an arbitrary boolean expression, such as validating a \n+     * validating according to an arbitrary boolean expression, such as validating a\n      * primitive number or using your own custom validation expression.</p>\n      *\n      * <pre>Validate.isTrue(i > 0.0, \"The value must be greater than zero: %d\", i);</pre>\n      *\n      * <p>For performance reasons, the long value is passed as a separate parameter and\n      * appended to the exception message only in the case of an error.</p>\n-     * \n+     *\n      * @param expression  the boolean expression to check\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param value  the value to append to the message when invalid\n     }\n \n     /**\n-     * <p>Validate that the argument condition is {@code true}; otherwise \n+     * <p>Validate that the argument condition is {@code true}; otherwise\n      * throwing an exception with the specified message. This method is useful when\n-     * validating according to an arbitrary boolean expression, such as validating a \n+     * validating according to an arbitrary boolean expression, such as validating a\n      * primitive number or using your own custom validation expression.</p>\n      *\n      * <pre>Validate.isTrue(d > 0.0, \"The value must be greater than zero: %s\", d);</pre>\n      *\n      * <p>For performance reasons, the double value is passed as a separate parameter and\n      * appended to the exception message only in the case of an error.</p>\n-     * \n-     * @param expression  the boolean expression to check \n+     *\n+     * @param expression  the boolean expression to check\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param value  the value to append to the message when invalid\n      * @throws IllegalArgumentException if expression is {@code false}\n     }\n \n     /**\n-     * <p>Validate that the argument condition is {@code true}; otherwise \n+     * <p>Validate that the argument condition is {@code true}; otherwise\n      * throwing an exception with the specified message. This method is useful when\n-     * validating according to an arbitrary boolean expression, such as validating a \n+     * validating according to an arbitrary boolean expression, such as validating a\n      * primitive number or using your own custom validation expression.</p>\n      *\n      * <pre>\n      * Validate.isTrue(i >= min && i <= max, \"The value must be between %d and %d\", min, max);\n      * Validate.isTrue(myObject.isOk(), \"The object is not okay\");</pre>\n      *\n-     * @param expression  the boolean expression to check \n+     * @param expression  the boolean expression to check\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if expression is {@code false}\n     }\n \n     /**\n-     * <p>Validate that the argument condition is {@code true}; otherwise \n-     * throwing an exception. This method is useful when validating according \n-     * to an arbitrary boolean expression, such as validating a \n+     * <p>Validate that the argument condition is {@code true}; otherwise\n+     * throwing an exception. This method is useful when validating according\n+     * to an arbitrary boolean expression, such as validating a\n      * primitive number or using your own custom validation expression.</p>\n      *\n      * <pre>\n      * Validate.isTrue(i > 0);\n      * Validate.isTrue(myObject.isOk());</pre>\n      *\n-     * <p>The message of the exception is &quot;The validated expression is \n+     * <p>The message of the exception is &quot;The validated expression is\n      * false&quot;.</p>\n-     * \n-     * @param expression  the boolean expression to check \n+     *\n+     * @param expression  the boolean expression to check\n      * @throws IllegalArgumentException if expression is {@code false}\n      * @see #isTrue(boolean, String, long)\n      * @see #isTrue(boolean, String, double)\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument is not {@code null}; \n+     * <p>Validate that the specified argument is not {@code null};\n      * otherwise throwing an exception.\n      *\n      * <pre>Validate.notNull(myObject, \"The object must not be null\");</pre>\n      *\n-     * <p>The message of the exception is &quot;The validated object is \n+     * <p>The message of the exception is &quot;The validated object is\n      * null&quot;.</p>\n-     * \n+     *\n      * @param <T> the object type\n      * @param object  the object to check\n      * @return the validated object (never {@code null} for method chaining)\n     }\n \n     /**\n-     * <p>Validate that the specified argument is not {@code null}; \n+     * <p>Validate that the specified argument is not {@code null};\n      * otherwise throwing an exception with the specified message.\n      *\n      * <pre>Validate.notNull(myObject, \"The object must not be null\");</pre>\n-     * \n+     *\n      * @param <T> the object type\n      * @param object  the object to check\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument array is neither {@code null} \n-     * nor a length of zero (no elements); otherwise throwing an exception \n+     * <p>Validate that the specified argument array is neither {@code null}\n+     * nor a length of zero (no elements); otherwise throwing an exception\n      * with the specified message.\n      *\n      * <pre>Validate.notEmpty(myArray, \"The array must not be empty\");</pre>\n-     * \n+     *\n      * @param <T> the array type\n      * @param array  the array to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n     }\n \n     /**\n-     * <p>Validate that the specified argument array is neither {@code null} \n-     * nor a length of zero (no elements); otherwise throwing an exception. \n+     * <p>Validate that the specified argument array is neither {@code null}\n+     * nor a length of zero (no elements); otherwise throwing an exception.\n      *\n      * <pre>Validate.notEmpty(myArray);</pre>\n-     * \n-     * <p>The message in the exception is &quot;The validated array is \n+     *\n+     * <p>The message in the exception is &quot;The validated array is\n      * empty&quot;.\n-     * \n+     *\n      * @param <T> the array type\n      * @param array  the array to check, validated not null by this method\n      * @return the validated array (never {@code null} method for chaining)\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument collection is neither {@code null} \n-     * nor a size of zero (no elements); otherwise throwing an exception \n+     * <p>Validate that the specified argument collection is neither {@code null}\n+     * nor a size of zero (no elements); otherwise throwing an exception\n      * with the specified message.\n      *\n      * <pre>Validate.notEmpty(myCollection, \"The collection must not be empty\");</pre>\n-     * \n+     *\n      * @param <T> the collection type\n      * @param collection  the collection to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n     }\n \n     /**\n-     * <p>Validate that the specified argument collection is neither {@code null} \n-     * nor a size of zero (no elements); otherwise throwing an exception. \n+     * <p>Validate that the specified argument collection is neither {@code null}\n+     * nor a size of zero (no elements); otherwise throwing an exception.\n      *\n      * <pre>Validate.notEmpty(myCollection);</pre>\n-     * \n-     * <p>The message in the exception is &quot;The validated collection is \n+     *\n+     * <p>The message in the exception is &quot;The validated collection is\n      * empty&quot;.</p>\n-     * \n+     *\n      * @param <T> the collection type\n      * @param collection  the collection to check, validated not null by this method\n      * @return the validated collection (never {@code null} method for chaining)\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument map is neither {@code null} \n-     * nor a size of zero (no elements); otherwise throwing an exception \n+     * <p>Validate that the specified argument map is neither {@code null}\n+     * nor a size of zero (no elements); otherwise throwing an exception\n      * with the specified message.\n      *\n      * <pre>Validate.notEmpty(myMap, \"The map must not be empty\");</pre>\n-     * \n+     *\n      * @param <T> the map type\n      * @param map  the map to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n     }\n \n     /**\n-     * <p>Validate that the specified argument map is neither {@code null} \n-     * nor a size of zero (no elements); otherwise throwing an exception. \n+     * <p>Validate that the specified argument map is neither {@code null}\n+     * nor a size of zero (no elements); otherwise throwing an exception.\n      *\n      * <pre>Validate.notEmpty(myMap);</pre>\n-     * \n-     * <p>The message in the exception is &quot;The validated map is \n+     *\n+     * <p>The message in the exception is &quot;The validated map is\n      * empty&quot;.</p>\n-     * \n+     *\n      * @param <T> the map type\n      * @param map  the map to check, validated not null by this method\n      * @return the validated map (never {@code null} method for chaining)\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument character sequence is \n-     * neither {@code null} nor a length of zero (no characters); \n+     * <p>Validate that the specified argument character sequence is\n+     * neither {@code null} nor a length of zero (no characters);\n      * otherwise throwing an exception with the specified message.\n      *\n      * <pre>Validate.notEmpty(myString, \"The string must not be empty\");</pre>\n-     * \n+     *\n      * @param <T> the character sequence type\n      * @param chars  the character sequence to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n     }\n \n     /**\n-     * <p>Validate that the specified argument character sequence is \n-     * neither {@code null} nor a length of zero (no characters); \n+     * <p>Validate that the specified argument character sequence is\n+     * neither {@code null} nor a length of zero (no characters);\n      * otherwise throwing an exception with the specified message.\n      *\n      * <pre>Validate.notEmpty(myString);</pre>\n-     * \n-     * <p>The message in the exception is &quot;The validated \n+     *\n+     * <p>The message in the exception is &quot;The validated\n      * character sequence is empty&quot;.</p>\n-     * \n+     *\n      * @param <T> the character sequence type\n      * @param chars  the character sequence to check, validated not null by this method\n      * @return the validated character sequence (never {@code null} method for chaining)\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument character sequence is \n+     * <p>Validate that the specified argument character sequence is\n      * neither {@code null}, a length of zero (no characters), empty\n-     * nor whitespace; otherwise throwing an exception with the specified \n+     * nor whitespace; otherwise throwing an exception with the specified\n      * message.\n      *\n      * <pre>Validate.notBlank(myString, \"The string must not be blank\");</pre>\n-     * \n+     *\n      * @param <T> the character sequence type\n      * @param chars  the character sequence to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IllegalArgumentException if the character sequence is blank\n      * @see #notBlank(CharSequence)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T extends CharSequence> T notBlank(T chars, String message, Object... values) {\n     }\n \n     /**\n-     * <p>Validate that the specified argument character sequence is \n+     * <p>Validate that the specified argument character sequence is\n      * neither {@code null}, a length of zero (no characters), empty\n      * nor whitespace; otherwise throwing an exception.\n      *\n      * <pre>Validate.notBlank(myString);</pre>\n-     * \n-     * <p>The message in the exception is &quot;The validated character \n+     *\n+     * <p>The message in the exception is &quot;The validated character\n      * sequence is blank&quot;.</p>\n-     * \n+     *\n      * @param <T> the character sequence type\n      * @param chars  the character sequence to check, validated not null by this method\n      * @return the validated character sequence (never {@code null} method for chaining)\n      * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IllegalArgumentException if the character sequence is blank\n      * @see #notBlank(CharSequence, String, Object...)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T extends CharSequence> T notBlank(T chars) {\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument array is neither \n+     * <p>Validate that the specified argument array is neither\n      * {@code null} nor contains any elements that are {@code null};\n      * otherwise throwing an exception with the specified message.\n      *\n      * <pre>Validate.noNullElements(myArray, \"The array contain null at position %d\");</pre>\n-     * \n-     * <p>If the array is {@code null}, then the message in the exception \n+     *\n+     * <p>If the array is {@code null}, then the message in the exception\n      * is &quot;The validated object is null&quot;.</p>\n-     * \n-     * <p>If the array has a {@code null} element, then the iteration \n-     * index of the invalid element is appended to the {@code values} \n+     *\n+     * <p>If the array has a {@code null} element, then the iteration\n+     * index of the invalid element is appended to the {@code values}\n      * argument.</p>\n-     * \n+     *\n      * @param <T> the array type\n      * @param array  the array to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n     }\n \n     /**\n-     * <p>Validate that the specified argument array is neither \n+     * <p>Validate that the specified argument array is neither\n      * {@code null} nor contains any elements that are {@code null};\n      * otherwise throwing an exception.\n      *\n      * <pre>Validate.noNullElements(myArray);</pre>\n-     * \n-     * <p>If the array is {@code null}, then the message in the exception \n+     *\n+     * <p>If the array is {@code null}, then the message in the exception\n      * is &quot;The validated object is null&quot;.</p>\n-     * \n+     *\n      * <p>If the array has a {@code null} element, then the message in the\n-     * exception is &quot;The validated array contains null element at index: \n+     * exception is &quot;The validated array contains null element at index:\n      * &quot followed by the index.</p>\n      *\n      * @param <T> the array type\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument iterable is neither \n+     * <p>Validate that the specified argument iterable is neither\n      * {@code null} nor contains any elements that are {@code null};\n      * otherwise throwing an exception with the specified message.\n      *\n      * <pre>Validate.noNullElements(myCollection, \"The collection contains null at position %d\");</pre>\n-     * \n-     * <p>If the iterable is {@code null}, then the message in the exception \n+     *\n+     * <p>If the iterable is {@code null}, then the message in the exception\n      * is &quot;The validated object is null&quot;.</p>\n-     * \n-     * <p>If the iterable has a {@code null} element, then the iteration \n-     * index of the invalid element is appended to the {@code values} \n+     *\n+     * <p>If the iterable has a {@code null} element, then the iteration\n+     * index of the invalid element is appended to the {@code values}\n      * argument.</p>\n      *\n      * @param <T> the iterable type\n     }\n \n     /**\n-     * <p>Validate that the specified argument iterable is neither \n+     * <p>Validate that the specified argument iterable is neither\n      * {@code null} nor contains any elements that are {@code null};\n      * otherwise throwing an exception.\n      *\n      * <pre>Validate.noNullElements(myCollection);</pre>\n-     * \n-     * <p>If the iterable is {@code null}, then the message in the exception \n+     *\n+     * <p>If the iterable is {@code null}, then the message in the exception\n      * is &quot;The validated object is null&quot;.</p>\n-     * \n+     *\n      * <p>If the array has a {@code null} element, then the message in the\n-     * exception is &quot;The validated iterable contains null element at index: \n+     * exception is &quot;The validated iterable contains null element at index:\n      * &quot followed by the index.</p>\n      *\n      * @param <T> the iterable type\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validates that the index is within the bounds of the argument \n+     * <p>Validates that the index is within the bounds of the argument\n      * array; otherwise throwing an exception with the specified message.</p>\n      *\n      * <pre>Validate.validIndex(myArray, 2, \"The array index is invalid: \");</pre>\n-     * \n-     * <p>If the array is {@code null}, then the message of the exception \n+     *\n+     * <p>If the array is {@code null}, then the message of the exception\n      * is &quot;The validated object is null&quot;.</p>\n-     * \n+     *\n      * @param <T> the array type\n      * @param array  the array to check, validated not null by this method\n      * @param index  the index to check\n      * @throws NullPointerException if the array is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Object[], int)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T> T[] validIndex(T[] array, int index, String message, Object... values) {\n     }\n \n     /**\n-     * <p>Validates that the index is within the bounds of the argument \n+     * <p>Validates that the index is within the bounds of the argument\n      * array; otherwise throwing an exception.</p>\n      *\n      * <pre>Validate.validIndex(myArray, 2);</pre>\n      *\n      * <p>If the array is {@code null}, then the message of the exception\n      * is &quot;The validated object is null&quot;.</p>\n-     * \n-     * <p>If the index is invalid, then the message of the exception is \n-     * &quot;The validated array index is invalid: &quot; followed by the \n+     *\n+     * <p>If the index is invalid, then the message of the exception is\n+     * &quot;The validated array index is invalid: &quot; followed by the\n      * index.</p>\n-     * \n+     *\n      * @param <T> the array type\n      * @param array  the array to check, validated not null by this method\n      * @param index  the index to check\n      * @throws NullPointerException if the array is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Object[], int, String, Object...)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T> T[] validIndex(T[] array, int index) {\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validates that the index is within the bounds of the argument \n+     * <p>Validates that the index is within the bounds of the argument\n      * collection; otherwise throwing an exception with the specified message.</p>\n      *\n      * <pre>Validate.validIndex(myCollection, 2, \"The collection index is invalid: \");</pre>\n-     * \n-     * <p>If the collection is {@code null}, then the message of the \n+     *\n+     * <p>If the collection is {@code null}, then the message of the\n      * exception is &quot;The validated object is null&quot;.</p>\n      *\n      * @param <T> the collection type\n      * @throws NullPointerException if the collection is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Collection, int)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T extends Collection<?>> T validIndex(T collection, int index, String message, Object... values) {\n     }\n \n     /**\n-     * <p>Validates that the index is within the bounds of the argument \n+     * <p>Validates that the index is within the bounds of the argument\n      * collection; otherwise throwing an exception.</p>\n      *\n      * <pre>Validate.validIndex(myCollection, 2);</pre>\n      *\n-     * <p>If the index is invalid, then the message of the exception \n-     * is &quot;The validated collection index is invalid: &quot; \n+     * <p>If the index is invalid, then the message of the exception\n+     * is &quot;The validated collection index is invalid: &quot;\n      * followed by the index.</p>\n-     * \n+     *\n      * @param <T> the collection type\n      * @param collection  the collection to check, validated not null by this method\n      * @param index  the index to check\n      * @throws NullPointerException if the collection is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Collection, int, String, Object...)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T extends Collection<?>> T validIndex(T collection, int index) {\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validates that the index is within the bounds of the argument \n-     * character sequence; otherwise throwing an exception with the \n+     * <p>Validates that the index is within the bounds of the argument\n+     * character sequence; otherwise throwing an exception with the\n      * specified message.</p>\n      *\n      * <pre>Validate.validIndex(myStr, 2, \"The string index is invalid: \");</pre>\n-     * \n-     * <p>If the character sequence is {@code null}, then the message \n+     *\n+     * <p>If the character sequence is {@code null}, then the message\n      * of the exception is &quot;The validated object is null&quot;.</p>\n      *\n      * @param <T> the character sequence type\n      * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(CharSequence, int)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T extends CharSequence> T validIndex(T chars, int index, String message, Object... values) {\n     }\n \n     /**\n-     * <p>Validates that the index is within the bounds of the argument \n+     * <p>Validates that the index is within the bounds of the argument\n      * character sequence; otherwise throwing an exception.</p>\n-     * \n+     *\n      * <pre>Validate.validIndex(myStr, 2);</pre>\n      *\n-     * <p>If the character sequence is {@code null}, then the message \n-     * of the exception is &quot;The validated object is \n+     * <p>If the character sequence is {@code null}, then the message\n+     * of the exception is &quot;The validated object is\n      * null&quot;.</p>\n-     * \n-     * <p>If the index is invalid, then the message of the exception \n-     * is &quot;The validated character sequence index is invalid: &quot; \n+     *\n+     * <p>If the index is invalid, then the message of the exception\n+     * is &quot;The validated character sequence index is invalid: &quot;\n      * followed by the index.</p>\n-     * \n+     *\n      * @param <T> the character sequence type\n      * @param chars  the character sequence to check, validated not null by this method\n      * @param index  the index to check\n      * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(CharSequence, int, String, Object...)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T extends CharSequence> T validIndex(T chars, int index) {\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the stateful condition is {@code true}; otherwise \n-     * throwing an exception. This method is useful when validating according \n-     * to an arbitrary boolean expression, such as validating a \n+     * <p>Validate that the stateful condition is {@code true}; otherwise\n+     * throwing an exception. This method is useful when validating according\n+     * to an arbitrary boolean expression, such as validating a\n      * primitive number or using your own custom validation expression.</p>\n      *\n      * <pre>\n      * Validate.validState(field > 0);\n      * Validate.validState(this.isOk());</pre>\n      *\n-     * <p>The message of the exception is &quot;The validated state is \n+     * <p>The message of the exception is &quot;The validated state is\n      * false&quot;.</p>\n-     * \n-     * @param expression  the boolean expression to check \n+     *\n+     * @param expression  the boolean expression to check\n      * @throws IllegalStateException if expression is {@code false}\n      * @see #validState(boolean, String, Object...)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static void validState(boolean expression) {\n     }\n \n     /**\n-     * <p>Validate that the stateful condition is {@code true}; otherwise \n+     * <p>Validate that the stateful condition is {@code true}; otherwise\n      * throwing an exception with the specified message. This method is useful when\n-     * validating according to an arbitrary boolean expression, such as validating a \n+     * validating according to an arbitrary boolean expression, such as validating a\n      * primitive number or using your own custom validation expression.</p>\n      *\n      * <pre>Validate.validState(this.isOk(), \"The state is not OK: %s\", myObject);</pre>\n      *\n-     * @param expression  the boolean expression to check \n+     * @param expression  the boolean expression to check\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalStateException if expression is {@code false}\n      * @see #validState(boolean)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static void validState(boolean expression, String message, Object... values) {\n      * expression pattern; otherwise throwing an exception.</p>\n      *\n      * <pre>Validate.matchesPattern(\"hi\", \"[a-z]*\");</pre>\n-     * \n+     *\n      * <p>The syntax of the pattern is the one used in the {@link Pattern} class.</p>\n-     * \n+     *\n      * @param input  the character sequence to validate, not null\n      * @param pattern  the regular expression pattern, not null\n      * @throws IllegalArgumentException if the character sequence does not match the pattern\n      * @see #matchesPattern(CharSequence, String, String, Object...)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static void matchesPattern(CharSequence input, String pattern) {\n      * expression pattern; otherwise throwing an exception with the specified message.</p>\n      *\n      * <pre>Validate.matchesPattern(\"hi\", \"[a-z]*\", \"%s does not match %s\", \"hi\" \"[a-z]*\");</pre>\n-     * \n+     *\n      * <p>The syntax of the pattern is the one used in the {@link Pattern} class.</p>\n-     * \n+     *\n      * @param input  the character sequence to validate, not null\n      * @param pattern  the regular expression pattern, not null\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if the character sequence does not match the pattern\n      * @see #matchesPattern(CharSequence, String)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static void matchesPattern(CharSequence input, String pattern, String message, Object... values) {\n      * inclusive values specified; otherwise, throws an exception.</p>\n      *\n      * <pre>Validate.inclusiveBetween(0, 2, 1);</pre>\n-     * \n+     *\n+     * @param <T> the type of the argument object\n      * @param start  the inclusive start value, not null\n      * @param end  the inclusive end value, not null\n      * @param value  the object to validate, not null\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #inclusiveBetween(Object, Object, Comparable, String, Object...)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T> void inclusiveBetween(T start, T end, Comparable<T> value) {\n      * specified message.</p>\n      *\n      * <pre>Validate.inclusiveBetween(0, 2, 1, \"Not in boundaries\");</pre>\n-     * \n+     *\n+     * @param <T> the type of the argument object\n      * @param start  the inclusive start value, not null\n      * @param end  the inclusive end value, not null\n      * @param value  the object to validate, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #inclusiveBetween(Object, Object, Comparable)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T> void inclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values) {\n      * exclusive values specified; otherwise, throws an exception.</p>\n      *\n      * <pre>Validate.inclusiveBetween(0, 2, 1);</pre>\n-     * \n+     *\n+     * @param <T> the type of the argument object\n      * @param start  the exclusive start value, not null\n      * @param end  the exclusive end value, not null\n      * @param value  the object to validate, not null\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #exclusiveBetween(Object, Object, Comparable, String, Object...)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T> void exclusiveBetween(T start, T end, Comparable<T> value) {\n      * specified message.</p>\n      *\n      * <pre>Validate.inclusiveBetween(0, 2, 1, \"Not in boundaries\");</pre>\n-     * \n+     *\n+     * @param <T> the type of the argument object\n      * @param start  the exclusive start value, not null\n      * @param end  the exclusive end value, not null\n      * @param value  the object to validate, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #exclusiveBetween(Object, Object, Comparable)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static <T> void exclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values) {\n      * <p>Validate that the argument is an instance of the specified class; otherwise\n      * throwing an exception. This method is useful when validating according to an arbitrary\n      * class</p>\n-     * \n+     *\n      * <pre>Validate.isInstanceOf(OkClass.class, object);</pre>\n-     * \n+     *\n      * <p>The message of the exception is &quot;The validated object is not an instance of&quot;\n      * followed by the name of the class</p>\n-     * \n+     *\n      * @param type  the class the object must be validated against, not null\n      * @param obj  the object to check, null throws an exception\n      * @throws IllegalArgumentException if argument is not of specified class\n      * @see #isInstanceOf(Class, Object, String, Object...)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static void isInstanceOf(Class<?> type, Object obj) {\n \n     /**\n      * <p>Validate that the argument is an instance of the specified class; otherwise\n-     * throwing an exception with the specified message. This method is useful when \n+     * throwing an exception with the specified message. This method is useful when\n      * validating according to an arbitrary class</p>\n-     * \n-     * <pre>Validate.isInstanceOf(OkClass.classs, object, \"Wrong class, object is of class %s\", object.getClass().getName());</pre>\n-     * \n+     *\n+     * <pre>Validate.isInstanceOf(OkClass.classs, object, \"Wrong class, object is of class %s\",\n+     *   object.getClass().getName());</pre>\n+     *\n      * @param type  the class the object must be validated against, not null\n      * @param obj  the object to check, null throws an exception\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if argument is not of specified class\n      * @see #isInstanceOf(Class, Object)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static void isInstanceOf(Class<?> type, Object obj, String message, Object... values) {\n      * <p>Validate that the argument can be converted to the specified class; otherwise\n      * throwing an exception with the specified message. This method is useful when\n      * validating if there will be no casting errors.</p>\n-     * \n+     *\n      * <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre>\n-     * \n+     *\n      * <p>The message of the exception is &quot;The validated object can not be converted to the&quot;\n      * followed by the name of the class and &quot;class&quot;</p>\n-     * \n+     *\n      * @param superType  the class the class must be validated against, not null\n      * @param type  the class to check, not null\n      * @throws IllegalArgumentException if argument can not be converted to the specified class\n      * @see #isAssignableFrom(Class, Class, String, Object...)\n-     * \n+     *\n      * @since 3.0\n      */\n     public static void isAssignableFrom(Class<?> superType, Class<?> type) {\n      * <p>Validate that the argument can be converted to the specified class; otherwise\n      * throwing an exception. This method is useful when validating if there will be no\n      * casting errors.</p>\n-     * \n+     *\n      * <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre>\n-     * \n+     *\n      * <p>The message of the exception is &quot;The validated object can not be converted to the&quot;\n      * followed by the name of the class and &quot;class&quot;</p>\n-     * \n+     *\n      * @param superType  the class the class must be validated against, not null\n      * @param type  the class to check, not null\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null", "timestamp": 1300552599, "metainfo": ""}