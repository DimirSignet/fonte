{"sha": "a26c319b0ccc541d532062758dc1bc748df20b27", "log": "Adding StringUtils.defaultIfBlank(String, String). Requested by Adam Dyga, patch from Nicklas Holm. LANG-655  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n \n     /**\n      * <p>Returns either the passed in CharSequence, or if the CharSequence is\n+     * whitespace, empty (\"\") or <code>null</code>, the value of <code>defaultStr</code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.defaultIfBlank(null, \"NULL\")  = \"NULL\"\n+     * StringUtils.defaultIfBlank(\"\", \"NULL\")    = \"NULL\"\n+     * StringUtils.defaultIfBlank(\" \", \"NULL\")   = \"NULL\"\n+     * StringUtils.defaultIfBlank(\"bat\", \"NULL\") = \"bat\"\n+     * StringUtils.defaultIfBlank(\"\", null)      = null\n+     * </pre>\n+     * @param <T> the specific kind of CharSequence\n+     * @param str the CharSequence to check, may be null\n+     * @param defaultStr  the default CharSequence to return\n+     *  if the input is whitespace, empty (\"\") or <code>null</code>, may be null\n+     * @return the passed in CharSequence, or the default\n+     * @see StringUtils#defaultString(String, String)\n+     */\n+    public static <T extends CharSequence> T defaultIfBlank(T str, T defaultStr) {\n+        return StringUtils.isBlank(str) ? defaultStr : str;\n+    }\n+\n+    /**\n+     * <p>Returns either the passed in CharSequence, or if the CharSequence is\n      * empty or <code>null</code>, the value of <code>defaultStr</code>.</p>\n      *\n      * <pre>\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n         assertEquals(\"abc\", s);\n     }\n \n+    public void testDefaultIfBlank_StringString() {\n+        assertEquals(\"NULL\", StringUtils.defaultIfBlank(null, \"NULL\"));\n+        assertEquals(\"NULL\", StringUtils.defaultIfBlank(\"\", \"NULL\"));\n+        assertEquals(\"NULL\", StringUtils.defaultIfBlank(\" \", \"NULL\"));\n+        assertEquals(\"abc\", StringUtils.defaultIfBlank(\"abc\", \"NULL\"));\n+        assertNull(StringUtils.defaultIfBlank(\"\", null));\n+        // Tests compatibility for the API return type\n+        String s = StringUtils.defaultIfBlank(\"abc\", \"NULL\");\n+        assertEquals(\"abc\", s);\n+    }\n+\n     public void testDefaultIfEmpty_StringBuilders() {\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\n         assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\n         assertEquals(\"abc\", s.toString());\n     }\n \n+    public void testDefaultIfBlank_StringBuilders() {\n+        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\n+        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\" \"), new StringBuilder(\"NULL\")).toString());\n+        assertEquals(\"abc\", StringUtils.defaultIfBlank(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\n+        assertNull(StringUtils.defaultIfBlank(new StringBuilder(\"\"), null));\n+        // Tests compatibility for the API return type\n+        StringBuilder s = StringUtils.defaultIfBlank(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\"));\n+        assertEquals(\"abc\", s.toString());\n+    }\n+\n     public void testDefaultIfEmpty_StringBuffers() {\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\n         assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\n         assertEquals(\"abc\", s.toString());\n     }\n \n+    public void testDefaultIfBlank_StringBuffers() {\n+        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\n+        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\" \"), new StringBuffer(\"NULL\")).toString());\n+        assertEquals(\"abc\", StringUtils.defaultIfBlank(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\n+        assertNull(StringUtils.defaultIfBlank(new StringBuffer(\"\"), null));\n+        // Tests compatibility for the API return type\n+        StringBuffer s = StringUtils.defaultIfBlank(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\"));\n+        assertEquals(\"abc\", s.toString());\n+    }\n+\n     public void testDefaultIfEmpty_CharBuffers() {\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\n         assertEquals(\"abc\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\n         assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), null));\n         // Tests compatibility for the API return type\n         CharBuffer s = StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\"));\n+        assertEquals(\"abc\", s.toString());\n+    }\n+\n+    public void testDefaultIfBlank_CharBuffers() {\n+        assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\n+        assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\" \"), CharBuffer.wrap(\"NULL\")).toString());\n+        assertEquals(\"abc\", StringUtils.defaultIfBlank(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\n+        assertNull(StringUtils.defaultIfBlank(CharBuffer.wrap(\"\"), null));\n+        // Tests compatibility for the API return type\n+        CharBuffer s = StringUtils.defaultIfBlank(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\"));\n         assertEquals(\"abc\", s.toString());\n     }\n ", "timestamp": 1288843557, "metainfo": ""}