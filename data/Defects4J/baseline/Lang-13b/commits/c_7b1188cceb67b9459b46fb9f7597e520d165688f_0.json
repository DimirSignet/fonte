{"sha": "7b1188cceb67b9459b46fb9f7597e520d165688f", "log": "Fixing javadoc warnings  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n      * \n      * <p>This provides the {@code CharSequence} equivalent to {@link String#substring(int)}.\n      * The length (in {@code char}) of the returned sequence is {@code length() - start},\n-     * so if {@start == end} then an empty sequence is returned.</p>\n+     * so if {@code start == end} then an empty sequence is returned.</p>\n      *\n      * @param cs  the specified subsequence, null returns null\n      * @param start  the start index, inclusive, valid\n--- a/src/main/java/org/apache/commons/lang3/ImmutablePair.java\n+++ b/src/main/java/org/apache/commons/lang3/ImmutablePair.java\n     }\n \n     /**\n-     * {@link Map.Entry#setValue(Object)} implementation.\n+     * {@link java.util.Map.Entry#setValue(Object)} implementation.\n      * @throws UnsupportedOperationException\n      */\n     public R setValue(R arg0) {\n--- a/src/main/java/org/apache/commons/lang3/MutablePair.java\n+++ b/src/main/java/org/apache/commons/lang3/MutablePair.java\n     }\n \n     /**\n-     * Implement {@link Map.Entry#setValue(Object)}.\n+     * Implement {@link java.util.Map.Entry#setValue(Object)}.\n      * @param value value (<code>rightElement</code>) to set\n      */\n     public R setValue(R value) {\n--- a/src/main/java/org/apache/commons/lang3/Pair.java\n+++ b/src/main/java/org/apache/commons/lang3/Pair.java\n \n     /**\n      * Get the \"right\" element of the pair.\n-     * @return\n+     * @return R\n      */\n     public abstract R getRightElement();\n \n     /**\n-     * Return {@link #getLeftElement()} as a {@link Map.Entry}'s key.\n+     * Return {@link #getLeftElement()} as a {@link java.util.Map.Entry}'s key.\n      * @return L\n      */\n     public final L getKey() {\n     }\n \n     /**\n-     * Return {@link #getRightElement()} as a {@link Map.Entry}'s value.\n+     * Return {@link #getRightElement()} as a {@link java.util.Map.Entry}'s value.\n      * @return R\n      */\n     public R getValue() {\n--- a/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n     /**\n      * Translator object for escaping Java. \n      * \n-     * While {@link escapeJava(String)} is the expected method of use, this \n+     * While {@link #escapeJava(String)} is the expected method of use, this \n      * object allows the Java escaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n     /**\n      * Translator object for escaping EcmaScript/JavaScript. \n      * \n-     * While {@link escapeEcmaScript(String)} is the expected method of use, this \n+     * While {@link #escapeEcmaScript(String)} is the expected method of use, this \n      * object allows the EcmaScript escaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n     /**\n      * Translator object for escaping XML.\n      * \n-     * While {@link escapeXml(String)} is the expected method of use, this \n+     * While {@link #escapeXml(String)} is the expected method of use, this \n      * object allows the XML escaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n     /**\n      * Translator object for escaping HTML version 3.0.\n      * \n-     * While {@link escapeHtml3(String)} is the expected method of use, this \n+     * While {@link #escapeHtml3(String)} is the expected method of use, this \n      * object allows the HTML escaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n     /**\n      * Translator object for escaping HTML version 4.0.\n      * \n-     * While {@link escapeHtml4(String)} is the expected method of use, this \n+     * While {@link #escapeHtml4(String)} is the expected method of use, this \n      * object allows the HTML escaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n     /**\n      * Translator object for escaping individual Comma Separated Values. \n      * \n-     * While {@link escapeCsv(String)} is the expected method of use, this \n+     * While {@link #escapeCsv(String)} is the expected method of use, this \n      * object allows the CSV escaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n     /**\n      * Translator object for unescaping escaped Java. \n      * \n-     * While {@link unescapeJava(String)} is the expected method of use, this \n+     * While {@link #unescapeJava(String)} is the expected method of use, this \n      * object allows the Java unescaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n     /**\n      * Translator object for unescaping escaped EcmaScript. \n      * \n-     * While {@link unescapeEcmaScript(String)} is the expected method of use, this \n+     * While {@link #unescapeEcmaScript(String)} is the expected method of use, this \n      * object allows the EcmaScript unescaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n     /**\n      * Translator object for unescaping escaped HTML 3.0. \n      * \n-     * While {@link unescapeHtml3(String)} is the expected method of use, this \n+     * While {@link #unescapeHtml3(String)} is the expected method of use, this \n      * object allows the HTML unescaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n     /**\n      * Translator object for unescaping escaped HTML 4.0. \n      * \n-     * While {@link unescapeHtml4(String)} is the expected method of use, this \n+     * While {@link #unescapeHtml4(String)} is the expected method of use, this \n      * object allows the HTML unescaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n     /**\n      * Translator object for unescaping escaped XML.\n      * \n-     * While {@link unescapeXml(String)} is the expected method of use, this \n+     * While {@link #unescapeXml(String)} is the expected method of use, this \n      * object allows the XML unescaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n     /**\n      * Translator object for unescaping escaped Comma Separated Value entries.\n      * \n-     * While {@link unescapeCsv(String)} is the expected method of use, this \n+     * While {@link #unescapeCsv(String)} is the expected method of use, this \n      * object allows the CSV unescaping functionality to be used \n      * as the foundation for a custom translator. \n      */\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n      * StringUtils.join([null, \"\", \"a\"]) = \"a\"\n      * </pre>\n      *\n-     * @param array  the array of values to join together, may be null\n+     * @param elements  the values to join together, may be null\n      * @return the joined String, {@code null} if null array input\n      * @since 2.0\n      * @since 3.0 Changed signature to use varargs", "timestamp": 1299564628, "metainfo": ""}