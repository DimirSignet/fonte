{"sha": "b4255e6d071dc8d48bfc51037cecb29097b9a49d", "log": "[LANG-720] StringEscapeUtils.escapeXml(input) outputs wrong results when an input contains characters in Supplementary Planes.  ALSO rewrite method to avoid modification of counter variable in for loop  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n         if (input == null) {\n             return;\n         }\n-        int sz = Character.codePointCount(input, 0, input.length());\n-        for (int i = 0; i < sz; i++) {\n-\n-            // consumed is the number of codepoints consumed\n-            int consumed = translate(input, i, out);\n-\n+        int pos = 0;\n+        int len = input.length();\n+        while (pos < len) {\n+            int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n-                out.write(Character.toChars(Character.codePointAt(input, i)));\n-            } else {\n-                // contract with translators is that they have to understand codepoints \n-                // and they just took care of a surrogate pair\n-                for (int j = 0; j < consumed; j++) {\n-                    if (i < sz - 2) {\n-                        i += Character.charCount(Character.codePointAt(input, i));\n-                    } else {\n-                        // If the String ends with a high surrogate, just add the 1 and don't worry about such things\n-                        i++;\n-                    }\n-                }\n-                // for loop will increment 1 anyway, so remove 1 to account for that\n-                i--;\n+                char[] c = Character.toChars(Character.codePointAt(input, pos));\n+                out.write(c);\n+                pos+= c.length;\n+                continue;\n+            }\n+//          // contract with translators is that they have to understand codepoints \n+//          // and they just took care of a surrogate pair\n+            for (int pt = 0; pt < consumed; pt++) {\n+                pos += Character.charCount(Character.codePointAt(input, pos));\n             }\n         }\n     }\n--- a/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java\n \n         assertEquals( \"Hiragana character unicode behaviour has changed - expected no unescaping\", escaped, unescaped);\n     }\n+\n+    // https://issues.apache.org/jira/browse/LANG-720\n+    public void testLang720() {\n+        String input = new StringBuilder(\"\\ud842\\udfb7\").append(\"A\").toString();\n+        String escaped = StringEscapeUtils.escapeXml(input);\n+        assertEquals(input, escaped);\n+    }\n }", "timestamp": 1310669391, "metainfo": ""}