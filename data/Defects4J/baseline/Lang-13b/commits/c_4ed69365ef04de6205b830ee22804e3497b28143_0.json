{"sha": "4ed69365ef04de6205b830ee22804e3497b28143", "log": "Remove unthrown Exceptions assertEquals(true|false => asserTrue|False  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java\n package org.apache.commons.lang3.concurrent;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.util.concurrent.ExecutionException;\n      * Tests handleCauseUnchecked() if the cause is an error.\n      */\n     @Test\n-    public void testHandleCauseUncheckedError() throws ConcurrentException {\n+    public void testHandleCauseUncheckedError() {\n         Error err = new AssertionError(\"Test\");\n         try {\n             ConcurrentUtils.handleCauseUnchecked(new ExecutionException(err));\n      * Tests handleCauseUnchecked() if the cause is an unchecked exception.\n      */\n     @Test\n-    public void testHandleCauseUncheckedUncheckedException()\n-            throws ConcurrentException {\n+    public void testHandleCauseUncheckedUncheckedException() {\n         RuntimeException rex = new RuntimeException(\"Test\");\n         try {\n             ConcurrentUtils.handleCauseUnchecked(new ExecutionException(rex));\n      * exception is thrown.\n      */\n     @Test\n-    public void testHandleCauseUncheckedNull() throws ConcurrentException {\n+    public void testHandleCauseUncheckedNull() {\n         ConcurrentUtils.handleCauseUnchecked(null);\n         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(\"Test\",\n                 null));\n     public void testConstantFuture_Integer() throws Exception {\n         Integer value = new Integer(5);\n         Future<Integer> test = ConcurrentUtils.constantFuture(value);\n-        assertEquals(true, test.isDone());\n+        assertTrue(test.isDone());\n         assertSame(value, test.get());\n         assertSame(value, test.get(1000, TimeUnit.SECONDS));\n         assertSame(value, test.get(1000, null));\n-        assertEquals(false, test.isCancelled());\n-        assertEquals(false, test.cancel(true));\n-        assertEquals(false, test.cancel(false));\n+        assertFalse(test.isCancelled());\n+        assertFalse(test.cancel(true));\n+        assertFalse(test.cancel(false));\n     }\n \n     /**\n     public void testConstantFuture_null() throws Exception {\n         Integer value = null;\n         Future<Integer> test = ConcurrentUtils.constantFuture(value);\n-        assertEquals(true, test.isDone());\n+        assertTrue(test.isDone());\n         assertSame(value, test.get());\n         assertSame(value, test.get(1000, TimeUnit.SECONDS));\n         assertSame(value, test.get(1000, null));\n-        assertEquals(false, test.isCancelled());\n-        assertEquals(false, test.cancel(true));\n-        assertEquals(false, test.cancel(false));\n+        assertFalse(test.isCancelled());\n+        assertFalse(test.cancel(true));\n+        assertFalse(test.cancel(false));\n     }\n \n }", "timestamp": 1289670986, "metainfo": ""}