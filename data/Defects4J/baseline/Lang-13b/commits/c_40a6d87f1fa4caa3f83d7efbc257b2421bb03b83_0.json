{"sha": "40a6d87f1fa4caa3f83d7efbc257b2421bb03b83", "log": "Make the pad method public. I can use this now :) ! The method used to be private and named padding. It is used internally and covered by unit tests through leftPad(), rightPad() and repeat().  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n             return str;\n         }\n         if (inputLength == 1 && repeat <= PAD_LIMIT) {\n-            return padding(repeat, str.charAt(0));\n+            return pad(repeat, str.charAt(0));\n         }\n \n         int outputLength = inputLength * repeat;\n      * <pre>\n      * StringUtils.padding(0, 'e')  = \"\"\n      * StringUtils.padding(3, 'e')  = \"eee\"\n-     * StringUtils.padding(-2, 'e') = IndexOutOfBoundsException\n+     * StringUtils.padding(-2, 'e') throws IndexOutOfBoundsException\n      * </pre>\n      *\n      * <p>Note: this method doesn't not support padding with\n      * @throws IndexOutOfBoundsException if <code>repeat &lt; 0</code>\n      * @see #repeat(String, int)\n      */\n-    private static String padding(int repeat, char padChar) throws IndexOutOfBoundsException {\n+    public static String pad(int repeat, char padChar) throws IndexOutOfBoundsException {\n         if (repeat < 0) {\n             throw new IndexOutOfBoundsException(\"Cannot pad a negative amount: \" + repeat);\n         }\n         if (pads > PAD_LIMIT) {\n             return rightPad(str, size, String.valueOf(padChar));\n         }\n-        return str.concat(padding(pads, padChar));\n+        return str.concat(pad(pads, padChar));\n     }\n \n     /**\n         if (pads > PAD_LIMIT) {\n             return leftPad(str, size, String.valueOf(padChar));\n         }\n-        return padding(pads, padChar).concat(str);\n+        return pad(pads, padChar).concat(str);\n     }\n \n     /**", "timestamp": 1303500538, "metainfo": ""}