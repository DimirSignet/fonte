{"sha": "899db03536fb0055b56fefd754d2d72c61759978", "log": "Remove deprecated methods  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  *\n  * <p>A side effect of the <code>null</code> handling is that a\n  * <code>NullPointerException</code> should be considered a bug in\n- * <code>StringUtils</code> (except for deprecated methods).</p>\n+ * <code>StringUtils</code>.</p>\n  *\n  * <p>Methods in this class give sample code to explain their operation.\n  * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n  * @since 1.0\n  * @version $Id$\n  */\n+//@Immutable\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     // Whitespace:\n     /**\n      * <p>Removes control characters (char &lt;= 32) from both\n      * ends of this String, handling <code>null</code> by returning\n-     * an empty String (\"\").</p>\n-     *\n-     * <pre>\n-     * StringUtils.clean(null)          = \"\"\n-     * StringUtils.clean(\"\")            = \"\"\n-     * StringUtils.clean(\"abc\")         = \"abc\"\n-     * StringUtils.clean(\"    abc    \") = \"abc\"\n-     * StringUtils.clean(\"     \")       = \"\"\n-     * </pre>\n-     *\n-     * @see java.lang.String#trim()\n-     * @param str  the String to clean, may be null\n-     * @return the trimmed text, never <code>null</code>\n-     * @deprecated Use the clearer named {@link #trimToEmpty(String)}.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String clean(String str) {\n-        return str == null ? EMPTY : str.trim();\n-    }\n-\n-    /**\n-     * <p>Removes control characters (char &lt;= 32) from both\n-     * ends of this String, handling <code>null</code> by returning\n      * <code>null</code>.</p>\n      *\n      * <p>The String is trimmed using {@link String#trim()}.\n \n     // Nested extraction\n     //-----------------------------------------------------------------------\n-    /**\n-     * <p>Gets the String that is nested in between two instances of the\n-     * same String.</p>\n-     *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> tag returns <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * StringUtils.getNestedString(null, *)            = null\n-     * StringUtils.getNestedString(\"\", \"\")             = \"\"\n-     * StringUtils.getNestedString(\"\", \"tag\")          = null\n-     * StringUtils.getNestedString(\"tagabctag\", null)  = null\n-     * StringUtils.getNestedString(\"tagabctag\", \"\")    = \"\"\n-     * StringUtils.getNestedString(\"tagabctag\", \"tag\") = \"abc\"\n-     * </pre>\n-     *\n-     * @param str  the String containing nested-string, may be null\n-     * @param tag  the String before and after nested-string, may be null\n-     * @return the nested String, <code>null</code> if no match\n-     * @deprecated Use the better named {@link #substringBetween(String, String)}.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String getNestedString(String str, String tag) {\n-        return substringBetween(str, tag, tag);\n-    }\n-\n-    /**\n-     * <p>Gets the String that is nested in between two Strings.\n-     * Only the first match is returned.</p>\n-     *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> open/close returns <code>null</code> (no match).\n-     * An empty (\"\") open/close returns an empty string.</p>\n-     *\n-     * <pre>\n-     * StringUtils.getNestedString(null, *, *)          = null\n-     * StringUtils.getNestedString(\"\", \"\", \"\")          = \"\"\n-     * StringUtils.getNestedString(\"\", \"\", \"tag\")       = null\n-     * StringUtils.getNestedString(\"\", \"tag\", \"tag\")    = null\n-     * StringUtils.getNestedString(\"yabcz\", null, null) = null\n-     * StringUtils.getNestedString(\"yabcz\", \"\", \"\")     = \"\"\n-     * StringUtils.getNestedString(\"yabcz\", \"y\", \"z\")   = \"abc\"\n-     * StringUtils.getNestedString(\"yabczyabcz\", \"y\", \"z\")   = \"abc\"\n-     * </pre>\n-     *\n-     * @param str  the String containing nested-string, may be null\n-     * @param open  the String before nested-string, may be null\n-     * @param close  the String after nested-string, may be null\n-     * @return the nested String, <code>null</code> if no match\n-     * @deprecated Use the better named {@link #substringBetween(String, String, String)}.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String getNestedString(String str, String open, String close) {\n-        return substringBetween(str, open, close);\n-    }\n \n     // Splitting\n     //-----------------------------------------------------------------------\n     // Joining\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Concatenates elements of an array into a single String.\n-     * Null objects or empty strings within the array are represented by\n-     * empty strings.</p>\n-     *\n-     * <pre>\n-     * StringUtils.concatenate(null)            = null\n-     * StringUtils.concatenate([])              = \"\"\n-     * StringUtils.concatenate([null])          = \"\"\n-     * StringUtils.concatenate([\"a\", \"b\", \"c\"]) = \"abc\"\n-     * StringUtils.concatenate([null, \"\", \"a\"]) = \"a\"\n-     * </pre>\n-     *\n-     * @param array  the array of values to concatenate, may be null\n-     * @return the concatenated String, <code>null</code> if null array input\n-     * @deprecated Use the better named {@link #join(Object[])} instead.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String concatenate(Object[] array) {\n-        return join(array, null);\n-    }\n-\n-    /**\n      * <p>Joins the elements of the provided array into a single String\n      * containing the provided list of elements.</p>\n      *\n \n     // Delete\n     //-----------------------------------------------------------------------\n-    /**\n-     * <p>Deletes all 'space' characters from a String as defined by\n-     * {@link Character#isSpace(char)}.</p>\n-     *\n-     * <p>This is the only StringUtils method that uses the\n-     * <code>isSpace</code> definition. You are advised to use\n-     * {@link #deleteWhitespace(String)} instead as whitespace is much\n-     * better localized.</p>\n-     *\n-     * <pre>\n-     * StringUtils.deleteSpaces(null)           = null\n-     * StringUtils.deleteSpaces(\"\")             = \"\"\n-     * StringUtils.deleteSpaces(\"abc\")          = \"abc\"\n-     * StringUtils.deleteSpaces(\" \\t  abc \\n \") = \"abc\"\n-     * StringUtils.deleteSpaces(\"ab  c\")        = \"abc\"\n-     * StringUtils.deleteSpaces(\"a\\nb\\tc     \") = \"abc\"\n-     * </pre>\n-     *\n-     * <p>Spaces are defined as <code>{' ', '\\t', '\\r', '\\n', '\\b'}</code>\n-     * in line with the deprecated <code>isSpace</code> method.</p>\n-     *\n-     * @param str  the String to delete spaces from, may be null\n-     * @return the String without 'spaces', <code>null</code> if null String input\n-     * @deprecated Use the better localized {@link #deleteWhitespace(String)}.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String deleteSpaces(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        return CharSetUtils.delete(str, \" \\t\\r\\n\\b\");\n-    }\n-\n     /**\n      * <p>Deletes all whitespaces from a String as defined by\n      * {@link Character#isWhitespace(char)}.</p>\n     /**\n      * <p>Overlays part of a String with another String.</p>\n      *\n-     * <pre>\n-     * StringUtils.overlayString(null, *, *, *)           = NullPointerException\n-     * StringUtils.overlayString(*, null, *, *)           = NullPointerException\n-     * StringUtils.overlayString(\"\", \"abc\", 0, 0)         = \"abc\"\n-     * StringUtils.overlayString(\"abcdef\", null, 2, 4)    = \"abef\"\n-     * StringUtils.overlayString(\"abcdef\", \"\", 2, 4)      = \"abef\"\n-     * StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 4)  = \"abzzzzef\"\n-     * StringUtils.overlayString(\"abcdef\", \"zzzz\", 4, 2)  = \"abcdzzzzcdef\"\n-     * StringUtils.overlayString(\"abcdef\", \"zzzz\", -1, 4) = IndexOutOfBoundsException\n-     * StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 8)  = IndexOutOfBoundsException\n-     * </pre>\n-     *\n-     * @param text  the String to do overlaying in, may be null\n-     * @param overlay  the String to overlay, may be null\n-     * @param start  the position to start overlaying at, must be valid\n-     * @param end  the position to stop overlaying before, must be valid\n-     * @return overlayed String, <code>null</code> if null String input\n-     * @throws NullPointerException if text or overlay is null\n-     * @throws IndexOutOfBoundsException if either position is invalid\n-     * @deprecated Use better named {@link #overlay(String, String, int, int)} instead.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String overlayString(String text, String overlay, int start, int end) {\n-        return new StringBuffer(start + overlay.length() + text.length() - end + 1)\n-            .append(text.substring(0, start))\n-            .append(overlay)\n-            .append(text.substring(end))\n-            .toString();\n-    }\n-\n-    /**\n-     * <p>Overlays part of a String with another String.</p>\n-     *\n      * <p>A <code>null</code> string input returns <code>null</code>.\n      * A negative index is treated as zero.\n      * An index greater than the string length is treated as the string length.\n         return str;\n     }\n \n-    /**\n-     * <p>Remove any &quot;\\n&quot; if and only if it is at the end\n-     * of the supplied String.</p>\n-     *\n-     * @param str  the String to chomp from, must not be null\n-     * @return String without chomped ending\n-     * @throws NullPointerException if str is <code>null</code>\n-     * @deprecated Use {@link #chomp(String)} instead.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String chompLast(String str) {\n-        return chompLast(str, \"\\n\");\n-    }\n-\n-    /**\n-     * <p>Remove a value if and only if the String ends with that value.</p>\n-     *\n-     * @param str  the String to chomp from, must not be null\n-     * @param sep  the String to chomp, must not be null\n-     * @return String without chomped ending\n-     * @throws NullPointerException if str or sep is <code>null</code>\n-     * @deprecated Use {@link #chomp(String,String)} instead.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String chompLast(String str, String sep) {\n-        if (str.length() == 0) {\n-            return str;\n-        }\n-        String sub = str.substring(str.length() - sep.length());\n-        if (sep.equals(sub)) {\n-            return str.substring(0, str.length() - sep.length());\n-        }\n-        return str;\n-    }\n-\n-    /**\n-     * <p>Remove everything and return the last value of a supplied String, and\n-     * everything after it from a String.</p>\n-     *\n-     * @param str  the String to chomp from, must not be null\n-     * @param sep  the String to chomp, must not be null\n-     * @return String chomped\n-     * @throws NullPointerException if str or sep is <code>null</code>\n-     * @deprecated Use {@link #substringAfterLast(String, String)} instead\n-     *             (although this doesn't include the separator)\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String getChomp(String str, String sep) {\n-        int idx = str.lastIndexOf(sep);\n-        if (idx == str.length() - sep.length()) {\n-            return sep;\n-        } else if (idx != -1) {\n-            return str.substring(idx);\n-        } else {\n-            return EMPTY;\n-        }\n-    }\n-\n-    /**\n-     * <p>Remove the first value of a supplied String, and everything before it\n-     * from a String.</p>\n-     *\n-     * @param str  the String to chomp from, must not be null\n-     * @param sep  the String to chomp, must not be null\n-     * @return String without chomped beginning\n-     * @throws NullPointerException if str or sep is <code>null</code>\n-     * @deprecated Use {@link #substringAfter(String,String)} instead.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String prechomp(String str, String sep) {\n-        int idx = str.indexOf(sep);\n-        if (idx == -1) {\n-            return str;\n-        }             \n-        return str.substring(idx + sep.length());\n-    }\n-\n-    /**\n-     * <p>Remove and return everything before the first value of a\n-     * supplied String from another String.</p>\n-     *\n-     * @param str  the String to chomp from, must not be null\n-     * @param sep  the String to chomp, must not be null\n-     * @return String prechomped\n-     * @throws NullPointerException if str or sep is <code>null</code>\n-     * @deprecated Use {@link #substringBefore(String,String)} instead\n-     *             (although this doesn't include the separator).\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String getPrechomp(String str, String sep) {\n-        int idx = str.indexOf(sep);\n-        if (idx == -1) {\n-            return EMPTY;\n-        } \n-        return str.substring(0, idx + sep.length());\n-    }\n-\n     // Chopping\n     //-----------------------------------------------------------------------\n     /**\n         return ret;\n     }\n \n-    /**\n-     * <p>Removes <code>\\n</code> from end of a String if it's there.\n-     * If a <code>\\r</code> precedes it, then remove that too.</p>\n-     *\n-     * @param str  the String to chop a newline from, must not be null\n-     * @return String without newline\n-     * @throws NullPointerException if str is <code>null</code>\n-     * @deprecated Use {@link #chomp(String)} instead.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String chopNewline(String str) {\n-        int lastIdx = str.length() - 1;\n-        if (lastIdx <= 0) {\n-            return EMPTY;\n-        }\n-        char last = str.charAt(lastIdx);\n-        if (last == CharUtils.LF) {\n-            if (str.charAt(lastIdx - 1) == CharUtils.CR) {\n-                lastIdx--;\n-            }\n-        } else {\n-            lastIdx++;\n-        }\n-        return str.substring(0, lastIdx);\n-    }\n-\n     // Conversion\n     //-----------------------------------------------------------------------\n-    /**\n-     * <p>Escapes any values it finds into their String form.</p>\n-     *\n-     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n-     * <code>'t'</code>.</p>\n-     *\n-     * <p>As of Lang 2.0, this calls {@link StringEscapeUtils#escapeJava(String)}\n-     * behind the scenes.\n-     * </p>\n-     * @see StringEscapeUtils#escapeJava(java.lang.String)\n-     * @param str String to escape values in\n-     * @return String with escaped values\n-     * @throws NullPointerException if str is <code>null</code>\n-     * @deprecated Use {@link StringEscapeUtils#escapeJava(String)}\n-     *             This method will be removed in Commons Lang 3.0\n-     */\n-    public static String escape(String str) {\n-        return StringEscapeUtils.escapeJava(str);\n-    }\n \n     // Padding\n     //-----------------------------------------------------------------------\n     }\n \n     /**\n-     * <p>Capitalizes a String changing the first letter to title case as\n-     * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n-     *\n-     * @param str  the String to capitalize, may be null\n-     * @return the capitalized String, <code>null</code> if null String input\n-     * @deprecated Use the standardly named {@link #capitalize(String)}.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String capitalise(String str) {\n-        return capitalize(str);\n-    }\n-\n-    /**\n      * <p>Uncapitalizes a String changing the first letter to title case as\n      * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n      *\n             .append(Character.toLowerCase(str.charAt(0)))\n             .append(str.substring(1))\n             .toString();\n-    }\n-\n-    /**\n-     * <p>Uncapitalizes a String changing the first letter to title case as\n-     * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n-     *\n-     * @param str  the String to uncapitalize, may be null\n-     * @return the uncapitalized String, <code>null</code> if null String input\n-     * @deprecated Use the standardly named {@link #uncapitalize(String)}.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String uncapitalise(String str) {\n-        return uncapitalize(str);\n     }\n \n     /**\n             buffer.append(ch);\n         }\n         return buffer.toString();\n-    }\n-\n-    /**\n-     * <p>Capitalizes all the whitespace separated words in a String.\n-     * Only the first letter of each word is changed.</p>\n-     *\n-     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n-     * A <code>null</code> input String returns <code>null</code>.</p>\n-     *\n-     * @param str  the String to capitalize, may be null\n-     * @return capitalized String, <code>null</code> if null String input\n-     * @deprecated Use the relocated {@link WordUtils#capitalize(String)}.\n-     *             Method will be removed in Commons Lang 3.0.\n-     */\n-    public static String capitaliseAllWords(String str) {\n-        return WordUtils.capitalize(str);\n     }\n \n     // Count matches\n         String[] strs = split(str, separatorChar);\n         ArrayUtils.reverse(strs);\n         return join(strs, separatorChar);\n-    }\n-\n-    /**\n-     * <p>Reverses a String that is delimited by a specific character.</p>\n-     *\n-     * <p>The Strings between the delimiters are not reversed.\n-     * Thus java.lang.String becomes String.lang.java (if the delimiter\n-     * is <code>\".\"</code>).</p>\n-     *\n-     * <pre>\n-     * StringUtils.reverseDelimitedString(null, *)       = null\n-     * StringUtils.reverseDelimitedString(\"\",*)          = \"\"\n-     * StringUtils.reverseDelimitedString(\"a.b.c\", null) = \"a.b.c\"\n-     * StringUtils.reverseDelimitedString(\"a.b.c\", \".\")  = \"c.b.a\"\n-     * </pre>\n-     *\n-     * @param str  the String to reverse, may be null\n-     * @param separatorChars  the separator characters to use, null treated as whitespace\n-     * @return the reversed String, <code>null</code> if null String input\n-     * @deprecated Use {@link #reverseDelimited(String, char)} instead.\n-     *      This method is broken as the join doesn't know which char to use.\n-     *      Method will be removed in Commons Lang 3.0.\n-     *\n-     */\n-    public static String reverseDelimitedString(String str, String separatorChars) {\n-        if (str == null) {\n-            return null;\n-        }\n-        // could implement manually, but simple way is to reuse other,\n-        // probably slower, methods.\n-        String[] strs = split(str, separatorChars);\n-        ArrayUtils.reverse(strs);\n-        if (separatorChars == null) {\n-            return join(strs, ' ');\n-        }\n-        return join(strs, separatorChars);\n     }\n \n     // Abbreviating\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n         assertEquals(null, StringUtils.lowerCase(null));\n         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH));\n         assertEquals(null, StringUtils.capitalize(null));\n-        assertEquals(null, StringUtils.uncapitalise(null));\n         assertEquals(null, StringUtils.uncapitalize(null));\n \n-        assertEquals(\"capitalise(String) failed\",\n-                    FOO_CAP, StringUtils.capitalise(FOO_UNCAP) );\n-        assertEquals(\"capitalise(empty-string) failed\",\n-                    \"\", StringUtils.capitalise(\"\") );\n-        assertEquals(\"capitalise(single-char-string) failed\",\n-                    \"X\", StringUtils.capitalise(\"x\") );\n-        assertEquals(\"capitalize(String) failed\",\n-                     FOO_CAP, StringUtils.capitalize(FOO_UNCAP) );\n         assertEquals(\"capitalize(empty-string) failed\",\n                      \"\", StringUtils.capitalize(\"\") );\n         assertEquals(\"capitalize(single-char-string) failed\",\n                      \"X\", StringUtils.capitalize(\"x\") );\n-        assertEquals(\"uncapitalise(String) failed\",\n-                     FOO_UNCAP, StringUtils.uncapitalise(FOO_CAP) );\n-        assertEquals(\"uncapitalise(empty-string) failed\",\n-                     \"\", StringUtils.uncapitalise(\"\") );\n-        assertEquals(\"uncapitalise(single-char-string) failed\",\n-                     \"x\", StringUtils.uncapitalise(\"X\") );\n         assertEquals(\"uncapitalize(String) failed\",\n                      FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );\n         assertEquals(\"uncapitalize(empty-string) failed\",\n                      \"x\", StringUtils.uncapitalize(\"X\") );\n                      \n         // reflection type of tests: Sentences.\n-        assertEquals(\"uncapitalise(capitalise(String)) failed\",\n-                     SENTENCE_UNCAP, StringUtils.uncapitalise(StringUtils.capitalise(SENTENCE_UNCAP)) );\n-        assertEquals(\"capitalise(uncapitalise(String)) failed\",\n-                     SENTENCE_CAP, StringUtils.capitalise(StringUtils.uncapitalise(SENTENCE_CAP)) );\n         assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                      SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );\n         assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                      SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );\n \n         // reflection type of tests: One word.\n-        assertEquals(\"uncapitalise(capitalise(String)) failed\",\n-                     FOO_UNCAP, StringUtils.uncapitalise(StringUtils.capitalise(FOO_UNCAP)) );\n-        assertEquals(\"capitalise(uncapitalise(String)) failed\",\n-                     FOO_CAP, StringUtils.capitalise(StringUtils.uncapitalise(FOO_CAP)) );\n         assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                      FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );\n         assertEquals(\"capitalize(uncapitalize(String)) failed\",\n         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n     }\n \n-    public void testDeprecatedConcatenate_Objectarray() {\n-        assertEquals(null, StringUtils.concatenate(null));\n-        assertEquals(\"\", StringUtils.concatenate(EMPTY_ARRAY_LIST));\n-        assertEquals(\"\", StringUtils.concatenate(NULL_ARRAY_LIST));\n-        assertEquals(\"foo\", StringUtils.concatenate(MIXED_ARRAY_LIST));\n-        assertEquals(\"foo2\", StringUtils.concatenate(MIXED_TYPE_LIST));\n-    }\n-        \n     public void testSplit_String() {\n         assertEquals(null, StringUtils.split(null));\n         assertEquals(0, StringUtils.split(\"\").length);\n         String stringToSplitOnNulls = \"ab   de fg\" ;\n         String[] splitOnNullExpectedResults = { \"ab\", \"de\", \"fg\" } ;\n \n-        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( \"ab   de fg\", null ) ;\n+        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null ) ;\n         assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n         for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n             assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n                 StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")));\n     }\n \n-    public void testDeprecatedDeleteSpace_String() {\n-        assertEquals(null, StringUtils.deleteSpaces(null));\n-        assertEquals(\"\", StringUtils.deleteSpaces(\"\"));\n-        assertEquals(\"\", StringUtils.deleteSpaces(\"    \\t\\t\\n\\n   \"));\n-        assertEquals(\"test\", StringUtils.deleteSpaces(\"t  \\t\\ne\\rs\\n\\n   \\tt\"));\n-    }\n-    \n     public void testDeleteWhitespace_String() {\n         assertEquals(null, StringUtils.deleteWhitespace(null));\n         assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n             \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\n     }\n     \n-    public void testDeprecatedOverlayString_StringStringIntInt() {\n-        assertEquals(\"overlayString(String, String, int, int) failed\",\n-                     \"foo foor baz\", StringUtils.overlayString(SENTENCE_UNCAP, FOO_UNCAP, 4, 6) );\n-        assertEquals(\"abef\", StringUtils.overlayString(\"abcdef\", \"\", 2, 4));\n-        assertEquals(\"abzzzzef\", StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 4));\n-        assertEquals(\"abcdzzzzcdef\", StringUtils.overlayString(\"abcdef\", \"zzzz\", 4, 2));\n-        try {\n-            StringUtils.overlayString(null, \"zzzz\", 2, 4);\n-            fail();\n-        } catch (NullPointerException ex) {}\n-        try {\n-            StringUtils.overlayString(\"abcdef\", null, 2, 4);\n-            fail();\n-        } catch (NullPointerException ex) {}\n-        try {\n-            StringUtils.overlayString(\"abcdef\", \"zzzz\", -1, 4);\n-            fail();\n-        } catch (IndexOutOfBoundsException ex) {}\n-        try {\n-            StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 8);\n-            fail();\n-        } catch (IndexOutOfBoundsException ex) {}\n-    }\n-\n     public void testOverlay_StringStringIntInt() {\n         assertEquals(null, StringUtils.overlay(null, null, 2, 4));\n         assertEquals(null, StringUtils.overlay(null, null, -2, -4));\n         String str = StringUtils.repeat(\"a\", 10000);  // bigger than pad limit\n         assertEquals(10000, str.length());\n         assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n-    }\n-\n-    public void testDeprecatedChompFunctions() {\n-        assertEquals(\"chompLast(String) failed\",\n-                     FOO_UNCAP, StringUtils.chompLast(FOO_UNCAP + \"\\n\") );\n-\n-        assertEquals(\"chompLast(\\\"\\\") failed\",\n-            \"\", StringUtils.chompLast(\"\") );\n-        assertEquals(\"chompLast(\\\"test\\\", \\\"test\\\") failed\",\n-            \"test\", StringUtils.chompLast(\"test\", \"tst\") );\n-        \n-        assertEquals(\"getChomp(String, String) failed\",\n-                     \"\\n\" + FOO_UNCAP, StringUtils.getChomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n-        assertEquals(\"getChomp(String, String) failed\",\n-                     FOO_CAP, StringUtils.getChomp(FOO_CAP+FOO_CAP, FOO_CAP));\n-        assertEquals(\"getChomp(String, String) failed\",\n-                     \"\", StringUtils.getChomp(FOO_UNCAP, FOO_CAP));\n-\n-        assertEquals(\"prechomp(String, String) failed\",\n-                     FOO_UNCAP, StringUtils.prechomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n-        assertEquals(\"prechomp(String, String) failed\",\n-                     FOO_UNCAP, StringUtils.prechomp(FOO_UNCAP, FOO_CAP));\n-        \n-        assertEquals(\"getPrechomp(String, String) failed\",\n-                     FOO_UNCAP + \"\\n\", StringUtils.getPrechomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n-        assertEquals(\"getPrechomp(String, String) failed\",\n-                     \"\", StringUtils.getPrechomp(FOO_CAP, FOO_UNCAP));\n-        \n-        assertEquals(\"chopNewline(String, String) failed\",\n-                     FOO_UNCAP, StringUtils.chopNewline(FOO_UNCAP + \"\\r\\n\") );\n     }\n \n     public void testChop() {\n                 \"foo \", StringUtils.chomp(\"foo \", \"foo\"));\n     }\n \n-    public void testChopNewLine() {\n-\n-        String[][] newLineCases = {\n-            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP } ,\n-            { FOO_UNCAP + \"\\n\" , FOO_UNCAP } ,\n-            { FOO_UNCAP + \"\\r\", FOO_UNCAP + \"\\r\" },\n-            { FOO_UNCAP, FOO_UNCAP },\n-            { FOO_UNCAP + \"\\n\" + FOO_UNCAP , FOO_UNCAP + \"\\n\" + FOO_UNCAP },\n-            { FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\"},\n-            { \"\\n\", \"\" },\n-            { \"\", \"\" },\n-            { \"\\r\\n\", \"\" }\n-      };\n-\n-      for (int i = 0; i < newLineCases.length; i++) {\n-          String original = newLineCases[i][0];\n-          String expectedResult = newLineCases[i][1];\n-          assertEquals(\"chopNewline(String) failed\",\n-                  expectedResult, StringUtils.chopNewline(original));\n-      }\n-    }\n-\n     //-----------------------------------------------------------------------\n     public void testRightPad_StringInt() {\n         assertEquals(null, StringUtils.rightPad(null, 5));\n         assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n     }\n \n-    public void testDeprecatedReverseDelimitedString_StringString() {\n-        assertEquals(null, StringUtils.reverseDelimitedString(null, null) );\n-        assertEquals(\"\", StringUtils.reverseDelimitedString(\"\", null) );\n-        assertEquals(\"\", StringUtils.reverseDelimitedString(\"\", \".\") );\n-        assertEquals(\"a.b.c\", StringUtils.reverseDelimitedString(\"a.b.c\", null) );\n-        assertEquals(\"c b a\", StringUtils.reverseDelimitedString(\"a b c\", null) );\n-        assertEquals(\"c.b.a\", StringUtils.reverseDelimitedString(\"a.b.c\", \".\") );\n-    }\n-\n     //-----------------------------------------------------------------------\n     public void testDefault_String() {\n         assertEquals(\"\", StringUtils.defaultString(null));\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\n         assertEquals(\"abc\", StringUtils.defaultIfEmpty(\"abc\", \"NULL\"));\n         assertNull(StringUtils.defaultIfEmpty(\"\", null));\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testDeprecatedEscapeFunctions_String() {\n-        assertEquals(\"\", StringUtils.escape(\"\") );\n-        assertEquals(\"abc\", StringUtils.escape(\"abc\") );\n-        assertEquals(\"\\\\t\", StringUtils.escape(\"\\t\") );\n-        assertEquals(\"\\\\\\\\\", StringUtils.escape(\"\\\\\") );\n-        assertEquals(\"\\\\\\\\\\\\b\\\\t\\\\r\", StringUtils.escape(\"\\\\\\b\\t\\r\") );\n-        assertEquals(\"\\\\u1234\", StringUtils.escape(\"\\u1234\") );\n-        assertEquals(\"\\\\u0234\", StringUtils.escape(\"\\u0234\") );\n-        assertEquals(\"\\\\u00FD\", StringUtils.escape(\"\\u00fd\") );\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"\", StringUtils.abbreviate(\"\", 4));\n         \n         try {\n+            @SuppressWarnings(\"unused\")\n             String res = StringUtils.abbreviate(\"abc\", 3);\n             fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n         assertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\n         \n         try {\n+            @SuppressWarnings(\"unused\")\n             String res = StringUtils.abbreviate(\"abcdefghij\", 0, 3);\n             fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n                 // empty\n         }      \n         try {\n+            @SuppressWarnings(\"unused\")\n             String res = StringUtils.abbreviate(\"abcdefghij\", 5, 6);\n             fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {", "timestamp": 1237066428, "metainfo": ""}