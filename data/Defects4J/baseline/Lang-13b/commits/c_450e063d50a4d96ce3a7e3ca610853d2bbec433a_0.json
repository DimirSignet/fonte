{"sha": "450e063d50a4d96ce3a7e3ca610853d2bbec433a", "log": "Added a test for the under a day range in formatPeriod  ", "commit": "\n--- a/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n         assertEqualDuration( \"09\", new int[] { 2005, 11, 31, 0, 0, 0 }, \n                              new int[] { 2006, 9, 6, 0, 0, 0 }, \"MM\");\n     }\n+    \n+    // Testing the under a day range in DurationFormatUtils.formatPeriod\n+    public void testLowDurations() {\n+        for(int hr=0; hr < 24; hr++) {\n+            for(int min=0; min < 60; min++) {\n+                for(int sec=0; sec < 60; sec++) {\n+                    assertEqualDuration( hr + \":\" + min + \":\" + sec, \n+                                         new int[] { 2000, 0, 1, 0, 0, 0, 0 },\n+                                         new int[] { 2000, 0, 1, hr, min, sec },\n+                                         \"H:m:s\"\n+                                       );\n+                }\n+            }\n+        }\n+    }\n \n     // Attempting to test edge cases in DurationFormatUtils.formatPeriod\n     public void testEdgeDurations() {\n             c.add(calendarType, 1);\n         }\n     }\n-    \n-    \n \n     private void assertEqualDuration(String expected, int[] start, int[] end, String format) {\n         assertEqualDuration(null, expected, start, end, format);", "timestamp": 1166595840, "metainfo": ""}