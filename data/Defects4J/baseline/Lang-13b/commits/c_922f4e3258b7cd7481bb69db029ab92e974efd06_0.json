{"sha": "922f4e3258b7cd7481bb69db029ab92e974efd06", "log": "Use more efficient Long cache: Use \"Long.valueOf(int)\" instead of \"new Long(long)\"  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n public class NumberUtils {\n     \n     /** Reusable Long constant for zero. */\n-    public static final Long LONG_ZERO = new Long(0L);\n+    public static final Long LONG_ZERO = Long.valueOf(0L);\n     /** Reusable Long constant for one. */\n-    public static final Long LONG_ONE = new Long(1L);\n+    public static final Long LONG_ONE = Long.valueOf(1L);\n     /** Reusable Long constant for minus one. */\n-    public static final Long LONG_MINUS_ONE = new Long(-1L);\n+    public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);\n     /** Reusable Integer constant for zero. */\n     public static final Integer INTEGER_ZERO = Integer.valueOf(0);\n     /** Reusable Integer constant for one. */\n     // Integer.valueOf(String)\n     // new Double(String)\n     // new Byte(String)\n-    // new Long(String)\n+    // Long.valueOf(String)\n     // Long.getLong(String)\n     // Long.getLong(String,int)\n     // Long.getLong(String,Integer)\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableLong.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableLong.java\n      * @return the value as a Long, never null\n      */\n     public Long getValue() {\n-        return new Long(this.value);\n+        return Long.valueOf(this.value);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n          \n          assertTrue(Arrays.equals(\n              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n-                 new Long(Long.MAX_VALUE), new Long(9999999)}))\n+             ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE), \n+                 Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)}))\n          );\n \n          try {\n-             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n+             ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE), null});\n              fail();\n          } catch (NullPointerException ex) {}\n      }\n          \n          assertTrue(Arrays.equals(\n              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n-                 new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n+             ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE), \n+                 Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)},1)));\n          \n          assertTrue(Arrays.equals(\n              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n-                 null, new Long(9999999)}, Long.MAX_VALUE))\n+             ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE), \n+                 null, Long.valueOf(9999999)}, Long.MAX_VALUE))\n          );\n      }\n      \n         assertTrue(\n             Arrays.equals(\n                 new Long[] {\n-                    new Long(Long.MIN_VALUE),\n-                    new Long(Long.MAX_VALUE),\n-                    new Long(9999999)},\n+                    Long.valueOf(Long.MIN_VALUE),\n+                    Long.valueOf(Long.MAX_VALUE),\n+                    Long.valueOf(9999999)},\n             ArrayUtils.toObject(\n                 new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 })));\n     }\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n         assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n         assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n         assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n-        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n+        assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n             + (Integer.MAX_VALUE + 1L)));\n-        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n-        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));\n+        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));\n+        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));\n         assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n         assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n         assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n             assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                     .createNumber(\"1.1E-700F\"));\n         }\n-        assertEquals(\"createNumber(String) 16 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n+        assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                 .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n-        assertEquals(\"createNumber(String) 17 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n+        assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                 .createNumber(\"10\" + Integer.MAX_VALUE));\n         assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                 .createNumber(\"10\" + Long.MAX_VALUE));\n \n     @Test\n     public void testCreateLong() {\n-        assertEquals(\"createLong(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n+        assertEquals(\"createLong(String) failed\", Long.valueOf(\"12345\"), NumberUtils.createLong(\"12345\"));\n         assertEquals(\"createLong(null) failed\", null, NumberUtils.createLong(null));\n         this.testCreateLongFailure(\"\");\n         this.testCreateLongFailure(\" \");\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java\n         \n         assertEquals(1, new MutableLong(1).longValue());\n         \n-        assertEquals(2, new MutableLong(new Long(2)).longValue());\n+        assertEquals(2, new MutableLong(Long.valueOf(2)).longValue());\n         assertEquals(3, new MutableLong(new MutableLong(3)).longValue());\n \n         assertEquals(2, new MutableLong(\"2\").longValue());\n     public void testGetSet() {\n         final MutableLong mutNum = new MutableLong(0);\n         assertEquals(0, new MutableLong().longValue());\n-        assertEquals(new Long(0), new MutableLong().getValue());\n+        assertEquals(Long.valueOf(0), new MutableLong().getValue());\n         \n         mutNum.setValue(1);\n         assertEquals(1, mutNum.longValue());\n-        assertEquals(new Long(1), mutNum.getValue());\n+        assertEquals(Long.valueOf(1), mutNum.getValue());\n         \n-        mutNum.setValue(new Long(2));\n+        mutNum.setValue(Long.valueOf(2));\n         assertEquals(2, mutNum.longValue());\n-        assertEquals(new Long(2), mutNum.getValue());\n+        assertEquals(Long.valueOf(2), mutNum.getValue());\n         \n         mutNum.setValue(new MutableLong(3));\n         assertEquals(3, mutNum.longValue());\n-        assertEquals(new Long(3), mutNum.getValue());\n+        assertEquals(Long.valueOf(3), mutNum.getValue());\n         try {\n             mutNum.setValue(null);\n             fail();\n         assertEquals(false, mutNumB.equals(mutNumC));\n         assertEquals(true, mutNumC.equals(mutNumC));\n         assertEquals(false, mutNumA.equals(null));\n-        assertEquals(false, mutNumA.equals(new Long(0)));\n+        assertEquals(false, mutNumA.equals(Long.valueOf(0)));\n         assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n         assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n         assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n         assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == new Long(0).hashCode());\n+        assertEquals(true, mutNumA.hashCode() == Long.valueOf(0).hashCode());\n     }\n \n     public void testCompareTo() {\n     }\n \n     public void testToLong() {\n-        assertEquals(new Long(0L), new MutableLong(0L).toLong());\n-        assertEquals(new Long(123L), new MutableLong(123L).toLong());\n+        assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong());\n+        assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong());\n     }\n \n     public void testIncrement() {\n \n     public void testAddValueObject() {\n         MutableLong mutNum = new MutableLong(1);\n-        mutNum.add(new Long(1));\n+        mutNum.add(Long.valueOf(1));\n         \n         assertEquals(2, mutNum.intValue());\n         assertEquals(2L, mutNum.longValue());\n \n     public void testSubtractValueObject() {\n         MutableLong mutNum = new MutableLong(1);\n-        mutNum.subtract(new Long(1));\n+        mutNum.subtract(Long.valueOf(1));\n         \n         assertEquals(0, mutNum.intValue());\n         assertEquals(0L, mutNum.longValue());", "timestamp": 1312379091, "metainfo": ""}