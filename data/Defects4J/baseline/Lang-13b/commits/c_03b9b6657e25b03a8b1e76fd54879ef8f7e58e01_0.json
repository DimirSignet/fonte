{"sha": "03b9b6657e25b03a8b1e76fd54879ef8f7e58e01", "log": "Add since tags for 2.1   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @author Maarten Coene\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.46 2004/08/15 02:12:51 bayard Exp $\n+ * @version $Id: ArrayUtils.java,v 1.47 2004/10/08 00:11:00 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n      *      array length.\n      * @return a new array containing the elements between\n      *      the start and end indices.\n+     * @since 2.1\n      */\n     public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n      *      array length.\n      * @return a new array containing the elements between\n      *      the start and end indices.\n+     * @since 2.1\n      */\n     public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n      *      array length.\n      * @return a new array containing the elements between\n      *      the start and end indices.\n+     * @since 2.1\n      */\n     public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n      *      array length.\n      * @return a new array containing the elements between\n      *      the start and end indices.\n+     * @since 2.1\n      */\n     public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n      *      array length.\n      * @return a new array containing the elements between\n      *      the start and end indices.\n+     * @since 2.1\n      */\n     public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n      *      array length.\n      * @return a new array containing the elements between\n      *      the start and end indices.\n+     * @since 2.1\n      */\n     public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n      *      array length.\n      * @return a new array containing the elements between\n      *      the start and end indices.\n+     * @since 2.1\n      */\n     public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n      *      array length.\n      * @return a new array containing the elements between\n      *      the start and end indices.\n+     * @since 2.1\n      */\n     public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n      *      array length.\n      * @return a new array containing the elements between\n      *      the start and end indices.\n+     * @since 2.1\n      */\n     public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n      * @param array  the array to retrieve the length from, may be null\n      * @return The length of the array, or <code>0</code> if the array is <code>null</code>\n      * @throws IllegalArgumentException if the object arguement is not an array.\n+     * @since 2.1\n      */\n     public static int getLength(Object array) {\n         if (array == null) {\n      * @param array  the array to return the last index for, may be null\n      * @return the last index, -1 if empty or null\n      * @throws IllegalArgumentException if the object arguement is not an array.\n+     * @since 2.1\n      */\n     public static int lastIndex(Object array) {\n         return ArrayUtils.getLength(array) - 1;\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n+     * @since 2.1\n      */\n     public static int indexOf(char[] array, char valueToFind) {\n         return indexOf(array, valueToFind, 0);\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n+     * @since 2.1\n      */\n     public static int indexOf(char[] array, char valueToFind, int startIndex) {\n         if (array == null) {\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n+     * @since 2.1\n      */\n     public static int lastIndexOf(char[] array, char valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n+     * @since 2.1\n      */\n     public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {\n         if (array == null) {\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n+     * @since 2.1\n      */\n     public static boolean contains(char[] array, char valueToFind) {\n         return (indexOf(array, valueToFind) != -1);\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Gary Gregory\n  * @author Norm Deane\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.30 2004/06/30 18:33:58 ggregory Exp $\n+ * @version $Id: ClassUtils.java,v 1.31 2004/10/08 00:10:59 scolebourne Exp $\n  */\n public class ClassUtils {\n \n      * @param cls  the class to convert, may be null\n      * @return the wrapper class for <code>cls</code> or <code>cls</code> if\n      * <code>cls</code> is not a primitive. <code>null</code> if null input.\n+     * @since 2.1\n      */\n     public static Class primitiveToWrapper(Class cls) {\n         Class convertedClass = cls;\n      * @return an array which contains for each given class, the wrapper class or \n      * the original class if class is not a primitive. <code>null</code> if null input. \n      * Empty array if an empty array passed in.\n+     * @since 2.1\n      */\n     public static Class[] primitivesToWrappers(Class[] classes) {\n         if (classes == null) {\n         }\n         \n         if (classes.length == 0) {\n-            return ArrayUtils.EMPTY_CLASS_ARRAY;\n+            return classes;\n         }\n         \n         Class[] convertedClasses = new Class[classes.length];\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n  * @author Tetsuya Kaneuchi\n  * @author Rafal Krupinski\n  * @since 1.0\n- * @version $Id: SystemUtils.java,v 1.35 2004/08/30 21:21:18 ggregory Exp $\n+ * @version $Id: SystemUtils.java,v 1.36 2004/10/08 00:10:59 scolebourne Exp $\n  */\n public class SystemUtils {\n \n      *             <code>checkPropertyAccess</code> method doesn't allow\n      *              access to the specified system property.\n      * @see System#getProperty(String)\n+     * @since 2.1\n      */\n     public static File getJavaHome() {\n         return new File(System.getProperty(JAVA_HOME_KEY));\n      *             <code>checkPropertyAccess</code> method doesn't allow\n      *              access to the specified system property.\n      * @see System#getProperty(String)\n+     * @since 2.1\n      */\n     public static File getJavaIoTmpDir() {\n         return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));\n      *             <code>checkPropertyAccess</code> method doesn't allow\n      *              access to the specified system property.\n      * @see System#getProperty(String)\n+     * @since 2.1\n      */\n     public static File getUserDir() {\n         return new File(System.getProperty(USER_DIR_KEY));\n      *             <code>checkPropertyAccess</code> method doesn't allow\n      *              access to the specified system property.\n      * @see System#getProperty(String)\n+     * @since 2.1\n      */\n     public static File getUserHome() {\n         return new File(System.getProperty(USER_HOME_KEY));\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n  * @author Pete Gieser\n  * @author Arun Mammen Thomas\n  * @since 1.0\n- * @version $Id: EqualsBuilder.java,v 1.26 2004/08/26 05:46:45 ggregory Exp $\n+ * @version $Id: EqualsBuilder.java,v 1.27 2004/10/08 00:07:59 scolebourne Exp $\n  */\n public class EqualsBuilder {\n     \n      * Sets the <code>isEquals</code> value.\n      * \n      * @param isEquals The value to set.\n+     * @since 2.1\n      */\n     protected void setEquals(boolean isEquals) {\n         this.isEquals = isEquals;\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n \n /**\n  * <p>\n- * Assists in implementing {@link Object#toString()}methods using reflection.\n+ * Assists in implementing {@link Object#toString()} methods using reflection.\n  * </p>\n  * \n  * <p>\n      * @return the String result\n      * @throws IllegalArgumentException\n      *                  if the Object is <code>null</code>\n+     * @since 2.1\n      */\n     public static String toString(Object object, ToStringStyle style, boolean outputTransients, boolean outputStatics) {\n         return toString(object, style, outputTransients, outputStatics, null);\n      * @return the String result\n      * @throws IllegalArgumentException\n      *                  if the Object is <code>null</code>\n+     * @since 2.1\n      */\n     public static String toString(Object object, ToStringStyle style, boolean outputTransients, boolean outputStatics,\n             Class reflectUpToClass) {\n      * @return the String result\n      * @throws IllegalArgumentException\n      *                  if the Object is <code>null</code>\n+     * @since 2.1\n      */\n     public static String toString(Object object, ToStringStyle style, boolean outputTransients, Class reflectUpToClass) {\n         return new ReflectionToStringBuilder(object, style, null, reflectUpToClass, outputTransients).toString();\n      *                  whether to include transient fields\n      * @param outputStatics\n      *                  whether to include static fields\n+     * @since 2.1\n      */\n     public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer, Class reflectUpToClass,\n             boolean outputTransients, boolean outputStatics) {\n      * </p>\n      * \n      * @return Whether or not to append static fields.\n+     * @since 2.1\n      */\n     public boolean isAppendStatics() {\n         return this.appendStatics;\n      * \n      * @param appendStatics\n      *                  Whether or not to append static fields.\n+     * @since 2.1\n      */\n     public void setAppendStatics(boolean appendStatics) {\n         this.appendStatics = appendStatics;\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ToStringStyle.java,v 1.32 2004/07/01 17:40:10 ggregory Exp $\n+ * @version $Id: ToStringStyle.java,v 1.33 2004/10/08 00:07:59 scolebourne Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n \n     \n     /**\n      * The short prefix toString style.\n+     * @since 2.1\n      */\n     public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();\n \n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n  * @since 2.0\n- * @version $Id: NumberUtils.java,v 1.18 2004/02/18 22:56:13 ggregory Exp $\n+ * @version $Id: NumberUtils.java,v 1.19 2004/10/08 00:07:59 scolebourne Exp $\n  */\n public class NumberUtils {\n     \n      * @param str  the string to convert, may be null\n      * @return the int represented by the string, or <code>zero</code> if\n      *  conversion fails\n+     * @since 2.1\n      */\n     public static int toInt(String str) {\n         return toInt(str, 0);\n      * @param str  the string to convert, may be null\n      * @param defaultValue  the default value\n      * @return the int represented by the string, or the default if conversion fails\n+     * @since 2.1\n      */\n     public static int toInt(String str, int defaultValue) {\n         if(str == null) {\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 2.0\n- * @version $Id: DateUtils.java,v 1.30 2004/09/27 03:14:15 bayard Exp $\n+ * @version $Id: DateUtils.java,v 1.31 2004/10/08 00:09:01 scolebourne Exp $\n  */\n public class DateUtils {\n     \n     public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");\n     /**\n      * Number of milliseconds in a standard second.\n+     * @since 2.1\n      */\n     public static final long MILLIS_PER_SECOND = 1000;\n     /**\n      * Number of milliseconds in a standard minute.\n+     * @since 2.1\n      */\n     public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;\n     /**\n      * Number of milliseconds in a standard hour.\n+     * @since 2.1\n      */\n     public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;\n     /**\n      * Number of milliseconds in a standard day.\n+     * @since 2.1\n      */\n     public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;\n \n      * @param cal2  the second calendar, not null\n      * @return true if they represent the same day\n      * @throws IllegalArgumentException if either calendar is <code>null</code>\n+     * @since 2.1\n      */\n     public static boolean isSameDay(Calendar cal1, Calendar cal2) {\n         if (cal1 == null || cal2 == null) {\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n  * @author Stephen Colebourne\n  * @author Nikolay Metchev\n  * @since 2.0\n- * @version $Id: FastDateFormat.java,v 1.21 2004/09/12 05:03:26 bayard Exp $\n+ * @version $Id: FastDateFormat.java,v 1.22 2004/10/08 00:09:01 scolebourne Exp $\n  */\n public class FastDateFormat extends Format {\n     // A lot of the speed in this class comes from caching, but some comes\n      * @return a localized standard date formatter\n      * @throws IllegalArgumentException if the Locale has no date\n      *  pattern defined\n+     * @since 2.1\n      */\n     public static FastDateFormat getDateInstance(int style) {\n         return getDateInstance(style, null, null);\n      * @return a localized standard date formatter\n      * @throws IllegalArgumentException if the Locale has no date\n      *  pattern defined\n+     * @since 2.1\n      */\n     public static FastDateFormat getDateInstance(int style, Locale locale) {\n         return getDateInstance(style, null, locale);\n      * @return a localized standard date formatter\n      * @throws IllegalArgumentException if the Locale has no date\n      *  pattern defined\n+     * @since 2.1\n      */\n     public static FastDateFormat getDateInstance(int style, TimeZone timeZone) {\n         return getDateInstance(style, timeZone, null);\n      * @return a localized standard time formatter\n      * @throws IllegalArgumentException if the Locale has no time\n      *  pattern defined\n+     * @since 2.1\n      */\n     public static FastDateFormat getTimeInstance(int style) {\n         return getTimeInstance(style, null, null);\n      * @return a localized standard time formatter\n      * @throws IllegalArgumentException if the Locale has no time\n      *  pattern defined\n+     * @since 2.1\n      */\n     public static FastDateFormat getTimeInstance(int style, Locale locale) {\n         return getTimeInstance(style, null, locale);\n      * @return a localized standard time formatter\n      * @throws IllegalArgumentException if the Locale has no time\n      *  pattern defined\n+     * @since 2.1\n      */\n     public static FastDateFormat getTimeInstance(int style, TimeZone timeZone) {\n         return getTimeInstance(style, timeZone, null);\n      * @return a localized standard date/time formatter\n      * @throws IllegalArgumentException if the Locale has no date/time\n      *  pattern defined\n+     * @since 2.1\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle) {\n      * @return a localized standard date/time formatter\n      * @throws IllegalArgumentException if the Locale has no date/time\n      *  pattern defined\n+     * @since 2.1\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle, Locale locale) {\n      * @return a localized standard date/time formatter\n      * @throws IllegalArgumentException if the Locale has no date/time\n      *  pattern defined\n+     * @since 2.1\n      */\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle, TimeZone timeZone) {\n      * \n      * @param millis  the millisecond value to format\n      * @return the formatted string\n+     * @since 2.1\n      */\n     public String format(long millis) {\n         return format(new Date(millis));\n      * @param millis  the millisecond value to format\n      * @param buf  the buffer to format into\n      * @return the specified string buffer\n+     * @since 2.1\n      */\n     public StringBuffer format(long millis, StringBuffer buf) {\n         return format(new Date(millis), buf);\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n  * @author Henri Yandell\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: StopWatch.java,v 1.9 2004/07/25 07:31:36 bayard Exp $\n+ * @version $Id: StopWatch.java,v 1.10 2004/10/08 00:09:01 scolebourne Exp $\n  */\n public class StopWatch {\n \n      * @return the split time in milliseconds\n      *\n      * @throws IllegalStateException if the StopWatch has not yet been split.\n+     * @since 2.1\n      */\n     public long getSplitTime() {\n         if(this.splitState != STATE_SPLIT) {\n      * <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>\n      * \n      * @return the split time as a String\n+     * @since 2.1\n      */\n     public String toSplitString() {\n         return DurationFormatUtils.formatISO(getSplitTime());", "timestamp": 1097194260, "metainfo": ""}