{"sha": "9277ed4edc95c5cf10407647aed2fa96e5e1b1f2", "log": "Convert to JUnit 4 from 3.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java\n  */\n package org.apache.commons.lang3.reflect;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Map;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.commons.lang3.mutable.Mutable;\n import org.apache.commons.lang3.mutable.MutableObject;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n \n /**\n  * Unit tests MethodUtils\n  * @version $Id$\n  */\n-public class MethodUtilsTest extends TestCase {\n+public class MethodUtilsTest {\n   \n     private static interface PrivateInterface {}\n     \n         public String foo(Object o) {\n             return \"foo(Object)\";\n         }\n+        \n+        public void oneParameter(String s) {\n+            // empty\n+        }\n     }\n \n     private static class TestMutable implements Mutable<Object> {\n     }\n \n     private TestBean testBean;\n-    private Map<Class<?>, Class<?>[]> classCache;\n-\n-    public MethodUtilsTest(String name) {\n-        super(name);\n-        classCache = new HashMap<Class<?>, Class<?>[]>();\n-    }\n-\n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+    private Map<Class<?>, Class<?>[]> classCache = new HashMap<Class<?>, Class<?>[]>();\n+\n+    @Before\n+    public void setUp() throws Exception {\n         testBean = new TestBean();\n         classCache.clear();\n     }\n \n+    @Test\n     public void testConstructor() throws Exception {\n         assertNotNull(MethodUtils.class.newInstance());\n     }\n \n+    @Test\n     public void testInvokeMethod() throws Exception {\n         assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\",\n                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\n                 NumberUtils.DOUBLE_ONE));\n     }\n \n+    @Test\n     public void testInvokeExactMethod() throws Exception {\n         assertEquals(\"foo()\", MethodUtils.invokeExactMethod(testBean, \"foo\",\n                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\n         }\n     }\n \n+    @Test\n+    public void testInvokeExactMethodNoParam() throws Exception {\n+        assertEquals(\"foo()\", MethodUtils.invokeExactMethod(testBean, \"foo\"));\n+    }\n+\n+    @Test\n     public void testInvokeStaticMethod() throws Exception {\n         assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class,\n                 \"bar\", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\n         }\n     }\n \n+    @Test\n     public void testInvokeExactStaticMethod() throws Exception {\n         assertEquals(\"bar()\", MethodUtils.invokeExactStaticMethod(TestBean.class,\n                 \"bar\", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\n         }\n     }\n \n+    @Test\n     public void testGetAccessibleInterfaceMethod() throws Exception {\n-\n         Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\n         for (Class<?>[] element : p) {\n             Method method = TestMutable.class.getMethod(\"getValue\", element);\n         }\n     }\n     \n+    @Test\n     public void testGetAccessibleMethodPrivateInterface() throws Exception {\n         Method expected = TestBeanWithInterfaces.class.getMethod(\"foo\");\n         assertNotNull(expected);\n         assertNull(actual);\n     }\n \n+    @Test\n     public void testGetAccessibleInterfaceMethodFromDescription()\n             throws Exception {\n         Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\n         }\n     }\n \n+    @Test\n     public void testGetAccessiblePublicMethod() throws Exception {\n         assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(\n                 MutableObject.class.getMethod(\"getValue\",\n                         ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass());\n     }\n \n+    @Test\n     public void testGetAccessiblePublicMethodFromDescription() throws Exception {\n         assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(\n                 MutableObject.class, \"getValue\", ArrayUtils.EMPTY_CLASS_ARRAY)\n                 .getDeclaringClass());\n     }\n     \n-    public void testGetAccessibleMethodInaccessible() throws Exception {\n+    @Test\n+   public void testGetAccessibleMethodInaccessible() throws Exception {\n         Method expected = TestBean.class.getDeclaredMethod(\"privateStuff\");\n         Method actual = MethodUtils.getAccessibleMethod(expected);\n         assertNull(actual);\n     }\n \n-    public void testGetMatchingAccessibleMethod() throws Exception {\n+    @Test\n+   public void testGetMatchingAccessibleMethod() throws Exception {\n         expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);\n         expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n         public void testTwo(GrandParentObject obj) {}\n         public void testTwo(ChildInterface obj) {}\n     }\n-    interface ChildInterface {}\n+    \n+    interface ChildInterface {}    \n     public static class GrandParentObject {}\n     public static class ParentObject extends GrandParentObject {}\n     public static class ChildObject extends ParentObject implements ChildInterface {}", "timestamp": 1315408686, "metainfo": ""}