{"sha": "2087934578e7b37953d63a82315248b0cbe56eb3", "log": "generics for addAll(Object[], Object[]) + varargs for all addAll addends  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n         final Map<Object, Object> map = new HashMap<Object, Object>((int) (array.length * 1.5));\n         for (int i = 0; i < array.length; i++) {\n             Object object = array[i];\n-            if (object instanceof Map.Entry) {\n+            if (object instanceof Map.Entry<?, ?>) {\n                 Map.Entry<?,?> entry = (Map.Entry<?,?>) object;\n                 map.put(entry.getKey(), entry.getValue());\n             } else if (object instanceof Object[]) {\n      *      The type of the new array is the type of the first array.\n      * @since 2.1\n      */\n-    public static Object[] addAll(Object[] array1, Object[] array2) {\n-        /* this method could be generic as <T, U extends T> T[] addAll(T[], U[]), but if array1 == null,\n-         * clone array2, then caller tries to add T objects to the U clone, could be a problem.\n-         * Could add another version of the method where the first array cannot be null... :/\n-         */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T[] addAll(T[] array1, T... array2) {\n         if (array1 == null) {\n             return clone(array2);\n         } else if (array2 == null) {\n             return clone(array1);\n         }\n-        Object[] joinedArray = (Object[]) Array.newInstance(array1.getClass().getComponentType(),\n+        T[] joinedArray = (T[]) Array.newInstance(array1.getClass().getComponentType(),\n                                                             array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n      * @return The new boolean[] array.\n      * @since 2.1\n      */\n-    public static boolean[] addAll(boolean[] array1, boolean[] array2) {\n+    public static boolean[] addAll(boolean[] array1, boolean... array2) {\n         if (array1 == null) {\n             return clone(array2);\n         } else if (array2 == null) {\n      * @return The new char[] array.\n      * @since 2.1\n      */\n-    public static char[] addAll(char[] array1, char[] array2) {\n+    public static char[] addAll(char[] array1, char... array2) {\n         if (array1 == null) {\n             return clone(array2);\n         } else if (array2 == null) {\n      * @return The new byte[] array.\n      * @since 2.1\n      */\n-    public static byte[] addAll(byte[] array1, byte[] array2) {\n+    public static byte[] addAll(byte[] array1, byte... array2) {\n         if (array1 == null) {\n             return clone(array2);\n         } else if (array2 == null) {\n      * @return The new short[] array.\n      * @since 2.1\n      */\n-    public static short[] addAll(short[] array1, short[] array2) {\n+    public static short[] addAll(short[] array1, short... array2) {\n         if (array1 == null) {\n             return clone(array2);\n         } else if (array2 == null) {\n      * @return The new int[] array.\n      * @since 2.1\n      */\n-    public static int[] addAll(int[] array1, int[] array2) {\n+    public static int[] addAll(int[] array1, int... array2) {\n         if (array1 == null) {\n             return clone(array2);\n         } else if (array2 == null) {\n      * @return The new long[] array.\n      * @since 2.1\n      */\n-    public static long[] addAll(long[] array1, long[] array2) {\n+    public static long[] addAll(long[] array1, long... array2) {\n         if (array1 == null) {\n             return clone(array2);\n         } else if (array2 == null) {\n      * @return The new float[] array.\n      * @since 2.1\n      */\n-    public static float[] addAll(float[] array1, float[] array2) {\n+    public static float[] addAll(float[] array1, float... array2) {\n         if (array1 == null) {\n             return clone(array2);\n         } else if (array2 == null) {\n      * @return The new double[] array.\n      * @since 2.1\n      */\n-    public static double[] addAll(double[] array1, double[] array2) {\n+    public static double[] addAll(double[] array1, double... array2) {\n         if (array1 == null) {\n             return clone(array2);\n         } else if (array2 == null) {", "timestamp": 1253733379, "metainfo": ""}