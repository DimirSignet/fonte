{"sha": "483f81c04062a9d9bc52b36aba68908d1387b629", "log": "Removed isJavaVersionAtLeast(float) and (int), and added an enum variant with the new JavaVersion enum. Updated the rest of the code, switched isJavaVersionAtLeast over to using java.specification.version and not java.version (the vendor code) and dropped JAVA_VERSION_TRIMMED, JAVA_VERSION_FLOAT and JAVA_VERSION_INT. See: LANG-624  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n      * @return <code>true</code> if assignment possible\n      */\n     public static boolean isAssignable(Class<?>[] classArray, Class<?>[] toClassArray) {\n-        return isAssignable(classArray, toClassArray, SystemUtils.isJavaVersionAtLeast(1.5f));\n+        return isAssignable(classArray, toClassArray, SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\n     }\n \n     /**\n      * @return <code>true</code> if assignment possible\n      */\n     public static boolean isAssignable(Class<?> cls, Class<?> toClass) {\n-        return isAssignable(cls, toClass, SystemUtils.isJavaVersionAtLeast(1.5f));\n+        return isAssignable(cls, toClass, SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\n     }\n \n     /**\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/JavaVersion.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+/**\n+ * <p>An enum representing all the versions of the Java specification.\n+ * This is intended to mirror available values from the \n+ * <em>java.specification.version</em> System property. </p>\n+ *\n+ * @author Apache Software Foundation\n+ * @since 3.0\n+ * @version $Id: $\n+ */\n+public enum JavaVersion {\n+    JAVA_0_9(1.5f, \"0.9\"),    // Android \n+    JAVA_1_1(1.1f, \"1.1\"), \n+    JAVA_1_2(1.2f, \"1.2\"), \n+    JAVA_1_3(1.3f, \"1.3\"), \n+    JAVA_1_4(1.4f, \"1.4\"), \n+    JAVA_1_5(1.5f, \"1.5\"), \n+    JAVA_1_6(1.6f, \"1.6\"), \n+    JAVA_1_7(1.7f, \"1.7\");\n+\n+    private float value;\n+    private String name;\n+\n+    JavaVersion(final float value, final String name) {\n+        this.value = value;\n+        this.name = name;\n+    }\n+\n+    public boolean atLeast(JavaVersion requiredVersion) {\n+        return this.value >= requiredVersion.value;\n+    }\n+\n+    // helper for static importing\n+    static JavaVersion getJavaVersion(final String nom) {\n+        return getJavaVersion(nom);\n+    }\n+    static JavaVersion get(final String nom) {\n+        if(\"0.9\".equals(nom)) {\n+            return JAVA_0_9;\n+        } else\n+        if(\"1.1\".equals(nom)) {\n+            return JAVA_1_1;\n+        } else\n+        if(\"1.2\".equals(nom)) {\n+            return JAVA_1_2;\n+        } else\n+        if(\"1.3\".equals(nom)) {\n+            return JAVA_1_3;\n+        } else\n+        if(\"1.4\".equals(nom)) {\n+            return JAVA_1_4;\n+        } else\n+        if(\"1.5\".equals(nom)) {\n+            return JAVA_1_5;\n+        } else\n+        if(\"1.6\".equals(nom)) {\n+            return JAVA_1_6;\n+        } else\n+        if(\"1.7\".equals(nom)) {\n+            return JAVA_1_7;\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n--- a/src/main/java/org/apache/commons/lang3/SystemUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SystemUtils.java\n      * @since Java 1.3\n      */\n     public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(\"java.specification.version\");\n+    private static final JavaVersion JAVA_SPECIFICATION_VERSION_AS_ENUM = JavaVersion.get(JAVA_SPECIFICATION_VERSION);\n \n     /**\n      * <p>\n      * @since 2.1\n      */\n     public static final String USER_TIMEZONE = getSystemProperty(\"user.timezone\");\n-\n-    // Java version\n-    // -----------------------------------------------------------------------\n-    // This MUST be declared after those above as it depends on the\n-    // values being set up\n-\n-    /**\n-     * <p>\n-     * Gets the Java version as a <code>String</code> trimming leading letters.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>null</code> if {@link #JAVA_VERSION} is <code>null</code>.\n-     * </p>\n-     * \n-     * @since 2.1\n-     */\n-    public static final String JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-\n-    // Java version values\n-    // -----------------------------------------------------------------------\n-    // These MUST be declared after the trim above as they depend on the\n-    // value being set up\n-\n-    /**\n-     * <p>\n-     * Gets the Java version as a <code>float</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example return values:\n-     * </p>\n-     * <ul>\n-     * <li><code>1.2f</code> for Java 1.2\n-     * <li><code>1.31f</code> for Java 1.3.1\n-     * </ul>\n-     * \n-     * <p>\n-     * The field will return zero if {@link #JAVA_VERSION} is <code>null</code>.\n-     * </p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final float JAVA_VERSION_FLOAT = getJavaVersionAsFloat();\n-\n-    /**\n-     * <p>\n-     * Gets the Java version as an <code>int</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example return values:\n-     * </p>\n-     * <ul>\n-     * <li><code>120</code> for Java 1.2\n-     * <li><code>131</code> for Java 1.3.1\n-     * </ul>\n-     * \n-     * <p>\n-     * The field will return zero if {@link #JAVA_VERSION} is <code>null</code>.\n-     * </p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final int JAVA_VERSION_INT = getJavaVersionAsInt();\n \n     // Java version checks\n     // -----------------------------------------------------------------------\n \n     /**\n      * <p>\n-     * Gets the Java version number as a <code>float</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example return values:\n-     * </p>\n-     * <ul>\n-     * <li><code>1.2f</code> for Java 1.2</li>\n-     * <li><code>1.31f</code> for Java 1.3.1</li>\n-     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n-     * </ul>\n-     * \n-     * <p>\n-     * Patch releases are not reported.\n-     * </p>\n-     * \n-     * @return the version, for example 1.31f for Java 1.3.1\n-     */\n-    private static float getJavaVersionAsFloat() {\n-        return toVersionFloat(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n-    }\n-\n-    /**\n-     * <p>\n-     * Gets the Java version number as an <code>int</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example return values:\n-     * </p>\n-     * <ul>\n-     * <li><code>120</code> for Java 1.2</li>\n-     * <li><code>131</code> for Java 1.3.1</li>\n-     * <li><code>160</code> for Java 1.6.0_20</li>\n-     * </ul>\n-     * \n-     * <p>\n-     * Patch releases are not reported.\n-     * </p>\n-     * \n-     * @return the version, for example 131 for Java 1.3.1\n-     */\n-    private static int getJavaVersionAsInt() {\n-        return toVersionInt(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n-    }\n-\n-    /**\n-     * <p>\n      * Decides if the Java version matches.\n      * </p>\n      * \n      * @return true if matches, or false if not or can't determine\n      */\n     private static boolean getJavaVersionMatches(String versionPrefix) {\n-        return isJavaVersionMatch(JAVA_VERSION_TRIMMED, versionPrefix);\n-    }\n-\n-    /**\n-     * Trims the text of the java version to start with numbers.\n-     * \n-     * @return the trimmed java version\n-     */\n-    private static String getJavaVersionTrimmed() {\n-        if (JAVA_VERSION != null) {\n-            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n-                char ch = JAVA_VERSION.charAt(i);\n-                if (ch >= '0' && ch <= '9') {\n-                    return JAVA_VERSION.substring(i);\n-                }\n-            }\n-        }\n-        return null;\n+        return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION, versionPrefix);\n     }\n \n     /**\n      *            the required version, for example 1.31f\n      * @return <code>true</code> if the actual version is equal or greater than the required version\n      */\n-    public static boolean isJavaVersionAtLeast(float requiredVersion) {\n-        return JAVA_VERSION_FLOAT >= requiredVersion;\n-    }\n-\n-    /**\n-     * <p>\n-     * Is the Java version at least the requested version.\n-     * </p>\n-     * \n-     * <p>\n-     * Example input:\n-     * </p>\n-     * <ul>\n-     * <li><code>120</code> to test for Java 1.2 or greater</li>\n-     * <li><code>131</code> to test for Java 1.3.1 or greater</li>\n-     * </ul>\n-     * \n-     * @param requiredVersion\n-     *            the required version, for example 131\n-     * @return <code>true</code> if the actual version is equal or greater than the required version\n-     * @since 2.0\n-     */\n-    public static boolean isJavaVersionAtLeast(int requiredVersion) {\n-        return JAVA_VERSION_INT >= requiredVersion;\n+    public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion) {\n+        return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);\n     }\n \n     /**\n         return osName.startsWith(osNamePrefix);\n     }\n \n-    /**\n-     * <p>\n-     * Converts the given Java version string to a <code>float</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example return values:\n-     * </p>\n-     * <ul>\n-     * <li><code>1.2f</code> for Java 1.2</li>\n-     * <li><code>1.31f</code> for Java 1.3.1</li>\n-     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n-     * </ul>\n-     * \n-     * <p>\n-     * Patch releases are not reported.\n-     * </p>\n-     * <p>\n-     * This method is package private instead of private to support unit test invocation.\n-     * </p>\n-     * \n-     * @return the version, for example 1.31f for Java 1.3.1\n-     */\n-    static float toJavaVersionFloat(String version) {\n-        return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n-    }\n-\n-    /**\n-     * <p>\n-     * Converts the given Java version string to an <code>int</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example return values:\n-     * </p>\n-     * <ul>\n-     * <li><code>120</code> for Java 1.2</li>\n-     * <li><code>131</code> for Java 1.3.1</li>\n-     * <li><code>160</code> for Java 1.6.0_20</li>\n-     * </ul>\n-     * \n-     * <p>\n-     * Patch releases are not reported.\n-     * </p>\n-     * <p>\n-     * This method is package private instead of private to support unit test invocation.\n-     * </p>\n-     * \n-     * @return the version, for example 131 for Java 1.3.1\n-     */\n-    static int toJavaVersionInt(String version) {\n-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n-    }\n-\n-    /**\n-     * <p>\n-     * Converts the given Java version string to an <code>int[]</code> of maximum size <code>3</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example return values:\n-     * </p>\n-     * <ul>\n-     * <li><code>[1, 2, 0]</code> for Java 1.2</li>\n-     * <li><code>[1, 3, 1]</code> for Java 1.3.1</li>\n-     * <li><code>[1, 5, 0]</code> for Java 1.5.0_21</li>\n-     * </ul>\n-     * <p>\n-     * This method is package private instead of private to support unit test invocation.\n-     * </p>\n-     * \n-     * @return the version, for example [1, 5, 0] for Java 1.5.0_21\n-     */\n-    static int[] toJavaVersionIntArray(String version) {\n-        return toJavaVersionIntArray(version, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * <p>\n-     * Converts the given Java version string to an <code>int[]</code> of maximum size <code>limit</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example return values:\n-     * </p>\n-     * <ul>\n-     * <li><code>[1, 2, 0]</code> for Java 1.2</li>\n-     * <li><code>[1, 3, 1]</code> for Java 1.3.1</li>\n-     * <li><code>[1, 5, 0, 21]</code> for Java 1.5.0_21</li>\n-     * </ul>\n-     * \n-     * @return the version, for example [1, 5, 0, 21] for Java 1.5.0_21\n-     */\n-    private static int[] toJavaVersionIntArray(String version, int limit) {\n-        if (version == null) {\n-            return ArrayUtils.EMPTY_INT_ARRAY;\n-        }\n-        String[] strings = Pattern.compile(\"[^\\\\d]\").split(version);\n-        int[] ints = new int[Math.min(limit, strings.length)];\n-        int j = 0;\n-        for (int i = 0; i < strings.length && j < limit; i++) {\n-            String s = strings[i];\n-            if (s.length() > 0) {\n-                ints[j++] = Integer.parseInt(s);\n-            }\n-        }\n-        return ints;\n-    }\n-\n-    /**\n-     * <p>\n-     * Converts given the Java version array to a <code>float</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example return values:\n-     * </p>\n-     * <ul>\n-     * <li><code>1.2f</code> for Java 1.2</li>\n-     * <li><code>1.31f</code> for Java 1.3.1</li>\n-     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n-     * </ul>\n-     * \n-     * <p>\n-     * Patch releases are not reported.\n-     * </p>\n-     * \n-     * @return the version, for example 1.31f for Java 1.3.1\n-     */\n-    private static float toVersionFloat(int[] javaVersions) {\n-        if (javaVersions == null || javaVersions.length == 0) {\n-            return 0f;\n-        }\n-        if (javaVersions.length == 1) {\n-            return javaVersions[0];\n-        }\n-        StringBuilder builder = new StringBuilder();\n-        builder.append(javaVersions[0]);\n-        builder.append('.');\n-        for (int i = 1; i < javaVersions.length; i++) {\n-            builder.append(javaVersions[i]);\n-        }\n-        try {\n-            return Float.parseFloat(builder.toString());\n-        } catch (Exception ex) {\n-            return 0f;\n-        }\n-    }\n-\n-    /**\n-     * <p>\n-     * Converts given the Java version array to an <code>int</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example return values:\n-     * </p>\n-     * <ul>\n-     * <li><code>120</code> for Java 1.2</li>\n-     * <li><code>131</code> for Java 1.3.1</li>\n-     * <li><code>160</code> for Java 1.6.0_20</li>\n-     * </ul>\n-     * \n-     * <p>\n-     * Patch releases are not reported.\n-     * </p>\n-     * \n-     * @return the version, for example 1.31f for Java 1.3.1\n-     */\n-    private static int toVersionInt(int[] javaVersions) {\n-        if (javaVersions == null) {\n-            return 0;\n-        }\n-        int intVersion = 0;\n-        int len = javaVersions.length;\n-        if (len >= 1) {\n-            intVersion = javaVersions[0] * 100;\n-        }\n-        if (len >= 2) {\n-            intVersion += javaVersions[1] * 10;\n-        }\n-        if (len >= 3) {\n-            intVersion += javaVersions[2];\n-        }\n-        return intVersion;\n-    }\n-\n     // -----------------------------------------------------------------------\n     /**\n      * <p>\n--- a/src/test/java/org/apache/commons/lang3/CharEncodingTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharEncodingTest.java\n package org.apache.commons.lang3;\n \n import junit.framework.TestCase;\n+\n+import static org.apache.commons.lang3.JavaVersion.*;\n \n /**\n  * Tests CharEncoding.\n     }\n \n     public void testMustBeSupportedJava1_3_1() {\n-        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n+        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n             this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n             this.assertSupportedEncoding(CharEncoding.US_ASCII);\n             this.assertSupportedEncoding(CharEncoding.UTF_16);\n             this.assertSupportedEncoding(CharEncoding.UTF_16LE);\n             this.assertSupportedEncoding(CharEncoding.UTF_8);\n         } else {\n-            this.warn(\"Java 1.3 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+            this.warn(\"Java 1.3 tests not run since the current version is \" + SystemUtils.JAVA_SPECIFICATION_VERSION);\n         }\n     }\n \n         // In this test, I simply deleted the encodings from the 1.3.1 list.\n         // The Javadoc do not specify which encodings are required.\n         //\n-        if (SystemUtils.isJavaVersionAtLeast(1.1f)) {\n+        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_1)) {\n             this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n             this.assertSupportedEncoding(CharEncoding.US_ASCII);\n             this.assertSupportedEncoding(CharEncoding.UTF_8);\n         } else {\n-            this.warn(\"Java 1.1 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+            this.warn(\"Java 1.1 tests not run since the current version is \" + SystemUtils.JAVA_SPECIFICATION_VERSION);\n         }\n     }\n \n         // In this test, I simply deleted the encodings from the 1.3.1 list.\n         // The Javadoc do not specify which encodings are required.\n         //\n-        if (SystemUtils.isJavaVersionAtLeast(1.2f)) {\n+        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_2)) {\n             this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n             this.assertSupportedEncoding(CharEncoding.US_ASCII);\n             this.assertSupportedEncoding(CharEncoding.UTF_8);\n         } else {\n-            this.warn(\"Java 1.2 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+            this.warn(\"Java 1.2 tests not run since the current version is \" + SystemUtils.JAVA_SPECIFICATION_VERSION);\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n import java.util.Map;\n import java.util.Set;\n \n+import static org.apache.commons.lang3.JavaVersion.*;\n+\n import junit.framework.TestCase;\n \n /**\n         assertTrue(ClassUtils.isAssignable(array1s, array1s));\n         assertTrue(ClassUtils.isAssignable(array1s, array1));\n \n-        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n+        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5);\n \n         assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers));\n         assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives));\n         assertTrue(ClassUtils.isAssignable(String.class, String.class));\n         assertFalse(ClassUtils.isAssignable(Object.class, String.class));\n \n-        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n+        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5);\n \n         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class));\n         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class));\n     }\n \n     public void test_isAssignable_DefaultUnboxing_Widening() throws Exception {\n-        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n+        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5);\n \n         // test byte conversions\n         assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.class, Character.TYPE));\n--- a/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java\n import java.util.Locale;\n import java.util.Set;\n \n+import static org.apache.commons.lang3.JavaVersion.*;\n+\n import junit.framework.TestCase;\n \n /**\n         assertValidToLocale(\"us_EN_A\", \"us\", \"EN\", \"A\");\n         // this isn't pretty, but was caused by a jdk bug it seems\n         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4210525\n-        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n+        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {\n             assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"a\");\n             assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFsafdFDsdfF\");\n         } else {\n--- a/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java\n import junit.framework.Assert;\n import junit.framework.TestCase;\n \n+import static org.apache.commons.lang3.JavaVersion.*;\n+\n /**\n  * Unit tests {@link org.apache.commons.lang3.SystemUtils}.\n  * \n         }\n     }\n \n-    public void testJavaVersionAsFloat() {\n-        assertEquals(0f, SystemUtils.toJavaVersionFloat(null), 0.000001f);\n-        assertEquals(0f, SystemUtils.toJavaVersionFloat(\"\"), 0.000001f);\n-        assertEquals(0f, SystemUtils.toJavaVersionFloat(\"0\"), 0.000001f);\n-        assertEquals(1.1f, SystemUtils.toJavaVersionFloat(\"1.1\"), 0.000001f);\n-        assertEquals(1.2f, SystemUtils.toJavaVersionFloat(\"1.2\"), 0.000001f);\n-        assertEquals(1.3f, SystemUtils.toJavaVersionFloat(\"1.3.0\"), 0.000001f);\n-        assertEquals(1.31f, SystemUtils.toJavaVersionFloat(\"1.3.1\"), 0.000001f);\n-        assertEquals(1.4f, SystemUtils.toJavaVersionFloat(\"1.4.0\"), 0.000001f);\n-        assertEquals(1.41f, SystemUtils.toJavaVersionFloat(\"1.4.1\"), 0.000001f);\n-        assertEquals(1.42f, SystemUtils.toJavaVersionFloat(\"1.4.2\"), 0.000001f);\n-        assertEquals(1.5f, SystemUtils.toJavaVersionFloat(\"1.5.0\"), 0.000001f);\n-        assertEquals(1.6f, SystemUtils.toJavaVersionFloat(\"1.6.0\"), 0.000001f);\n-        assertEquals(1.31f, SystemUtils.toJavaVersionFloat(\"JavaVM-1.3.1\"), 0.000001f);\n-        assertEquals(1.3f, SystemUtils.toJavaVersionFloat(\"1.3.0 subset\"), 0.000001f);\n-        // This used to return 0f in [lang] version 2.5:\n-        assertEquals(1.3f, SystemUtils.toJavaVersionFloat(\"XXX-1.3.x\"), 0.000001f);\n-    }\n-\n-    public void testJavaVersionAsInt() {\n-        assertEquals(0, SystemUtils.toJavaVersionInt(null));\n-        assertEquals(0, SystemUtils.toJavaVersionInt(\"\"));\n-        assertEquals(0, SystemUtils.toJavaVersionInt(\"0\"));\n-        assertEquals(110, SystemUtils.toJavaVersionInt(\"1.1\"));\n-        assertEquals(120, SystemUtils.toJavaVersionInt(\"1.2\"));\n-        assertEquals(130, SystemUtils.toJavaVersionInt(\"1.3.0\"));\n-        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1\"));\n-        assertEquals(140, SystemUtils.toJavaVersionInt(\"1.4.0\"));\n-        assertEquals(141, SystemUtils.toJavaVersionInt(\"1.4.1\"));\n-        assertEquals(142, SystemUtils.toJavaVersionInt(\"1.4.2\"));\n-        assertEquals(150, SystemUtils.toJavaVersionInt(\"1.5.0\"));\n-        assertEquals(160, SystemUtils.toJavaVersionInt(\"1.6.0\"));\n-        assertEquals(131, SystemUtils.toJavaVersionInt(\"JavaVM-1.3.1\"));\n-        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1 subset\"));\n-        // This used to return 0f in [lang] version 2.5:\n-        assertEquals(130, SystemUtils.toJavaVersionInt(\"XXX-1.3.x\"));\n-    }\n-\n-    public void testJavaVersionAtLeastFloat() {\n-        float version = SystemUtils.JAVA_VERSION_FLOAT;\n-        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n-        version -= 0.1f;\n-        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n-        version += 0.2f;\n-        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n-    }\n-\n-    public void testJavaVersionAtLeastInt() {\n-        int version = SystemUtils.JAVA_VERSION_INT;\n-        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n-        version -= 10;\n-        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n-        version += 20;\n-        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n-    }\n-\n     public void testJavaVersionMatches() {\n         String javaVersion = null;\n         assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n     }\n \n     public void testJavaAwtHeadless() {\n-        boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(140);\n+        boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4);\n         String expectedStringValue = System.getProperty(\"java.awt.headless\");\n         String expectedStringValueWithDefault = System.getProperty(\"java.awt.headless\", \"false\");\n         assertNotNull(expectedStringValueWithDefault);\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n \n import junit.framework.TestCase;\n \n+import static org.apache.commons.lang3.JavaVersion.*;\n import org.apache.commons.lang3.SystemUtils;\n \n /**\n                 .createNumber(\"12345678901234567890L\"));\n \n         // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n-        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n+        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n             assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                     .createNumber(\"1.1E-700F\"));\n         }\n--- a/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n \n import junit.framework.TestCase;\n \n+import static org.apache.commons.lang3.JavaVersion.*;\n import org.apache.commons.lang3.SystemUtils;\n \n /**\n \n     //can't trust what MessageFormat does with toPattern() pre 1.4:\n     private void assertPatternsEqual(String message, String expected, String actual) {\n-        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n+        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {\n             assertEquals(message, expected, actual);\n         }\n     }\n--- a/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java\n import junit.framework.AssertionFailedError;\n import junit.framework.TestCase;\n \n+import static org.apache.commons.lang3.JavaVersion.*;\n import org.apache.commons.lang3.SystemUtils;\n \n /**\n         assertEquals(\"round MET date across DST change-over\",\n                 dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n                 DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY));\n-        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n+        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {\n             assertEquals(\"round MET date across DST change-over\",\n                     dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                     DateUtils.round(date5, Calendar.HOUR_OF_DAY));\n                     dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                     DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY));\n         } else {\n-            this.warn(\"WARNING: Some date rounding tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+            this.warn(\"WARNING: Some date rounding tests not run since the current version is \" + SystemUtils.JAVA_SPECIFICATION_VERSION);\n         }\n         TimeZone.setDefault(defaultZone);\n         dateTimeParser.setTimeZone(defaultZone);\n      * see http://issues.apache.org/jira/browse/LANG-59\n      */\n     public void testTruncateLang59() throws Exception {\n-        if (!SystemUtils.isJavaVersionAtLeast(1.4f)) {\n-            this.warn(\"WARNING: Test for LANG-59 not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+        if (!SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {\n+            this.warn(\"WARNING: Test for LANG-59 not run since the current version is \" + SystemUtils.JAVA_SPECIFICATION_VERSION);\n             return;\n         }\n \n         assertEquals(\"ceiling MET date across DST change-over\",\n                 dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                 DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY));\n-        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n+        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {\n             assertEquals(\"ceiling MET date across DST change-over\",\n                     dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                     DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY));\n                     dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                     DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY));\n         } else {\n-            this.warn(\"WARNING: Some date ceiling tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+            this.warn(\"WARNING: Some date ceiling tests not run since the current version is \" + SystemUtils.JAVA_SPECIFICATION_VERSION);\n         }\n         TimeZone.setDefault(defaultZone);\n         dateTimeParser.setTimeZone(defaultZone);", "timestamp": 1296359320, "metainfo": ""}