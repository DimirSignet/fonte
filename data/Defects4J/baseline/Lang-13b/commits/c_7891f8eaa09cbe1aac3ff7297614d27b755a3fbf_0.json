{"sha": "7891f8eaa09cbe1aac3ff7297614d27b755a3fbf", "log": "Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Validate.java\n+++ b/src/main/java/org/apache/commons/lang3/Validate.java\n      * <p>For performance reasons, the long value is passed as a separate parameter and\n      * appended to the exception message only in the case of an error.</p>\n      * \n-     * @param expression the boolean expression to check \n-     * @param message the exception message if invalid\n-     * @param value the value to append to the message when invalid\n+     * @param expression  the boolean expression to check\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param value  the value to append to the message when invalid\n      * @throws IllegalArgumentException if expression is <code>false</code>\n      * @see #isTrue(boolean)\n      * @see #isTrue(boolean, String, double)\n      * <p>For performance reasons, the double value is passed as a separate parameter and\n      * appended to the exception message only in the case of an error.</p>\n      * \n-     * @param expression the boolean expression to check \n-     * @param message the exception message if invalid\n-     * @param value the value to append to the message when invalid\n+     * @param expression  the boolean expression to check \n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param value  the value to append to the message when invalid\n      * @throws IllegalArgumentException if expression is <code>false</code>\n      * @see #isTrue(boolean)\n      * @see #isTrue(boolean, String, long)\n      * Validate.isTrue(i >= min && i <= max, \"The value must be between %d and %d\", min, max);\n      * Validate.isTrue(myObject.isOk(), \"The object is not okay\");</pre>\n      *\n-     * @param expression the boolean expression to check \n-     * @param message the exception message if invalid\n-     * @param values the optional values for the formatted exception message\n+     * @param expression  the boolean expression to check \n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if expression is <code>false</code>\n      * @see #isTrue(boolean)\n      * @see #isTrue(boolean, String, long)\n      * <p>The message of the exception is &quot;The validated expression is \n      * false&quot;.</p>\n      * \n-     * @param expression the boolean expression to check \n+     * @param expression  the boolean expression to check \n      * @throws IllegalArgumentException if expression is <code>false</code>\n      * @see #isTrue(boolean, String, long)\n      * @see #isTrue(boolean, String, double)\n      * null&quot;.</p>\n      * \n      * @param <T> the object type\n-     * @param object the object to check\n+     * @param object  the object to check\n      * @return the validated object (never <code>null</code> for method chaining)\n      * @throws NullPointerException if the object is <code>null</code>\n      * @see #notNull(Object, String, Object...)\n      * <pre>Validate.notNull(myObject, \"The object must not be null\");</pre>\n      * \n      * @param <T> the object type\n-     * @param object the object to check\n-     * @param message the exception message if invalid\n-     * @param values the optional values for the formatted exception message\n+     * @param object  the object to check\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message\n      * @return the validated object (never <code>null</code> for method chaining)\n      * @throws NullPointerException if the object is <code>null</code>\n      * @see #notNull(Object)\n      * <pre>Validate.notEmpty(myArray, \"The array must not be empty\");</pre>\n      * \n      * @param <T> the array type\n-     * @param array the array to check\n-     * @param message the exception message if invalid\n+     * @param array  the array to check, validated not null by this method\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @return the validated array (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the array is <code>null</code>\n      * @throws IllegalArgumentException if the array is empty\n      * empty&quot;.\n      * \n      * @param <T> the array type\n-     * @param array the array to check\n+     * @param array  the array to check, validated not null by this method\n      * @return the validated array (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the array is <code>null</code>\n      * @throws IllegalArgumentException if the array is empty\n      * <pre>Validate.notEmpty(myCollection, \"The collection must not be empty\");</pre>\n      * \n      * @param <T> the collection type\n-     * @param collection the collection to check\n-     * @param message the exception message if invalid\n+     * @param collection  the collection to check, validated not null by this method\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @return the validated collection (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the collection is <code>null</code>\n      * @throws IllegalArgumentException if the collection is empty\n      * empty&quot;.</p>\n      * \n      * @param <T> the collection type\n-     * @param collection the collection to check\n+     * @param collection  the collection to check, validated not null by this method\n      * @return the validated collection (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the collection is <code>null</code>\n      * @throws IllegalArgumentException if the collection is empty\n      * <pre>Validate.notEmpty(myMap, \"The map must not be empty\");</pre>\n      * \n      * @param <T> the map type\n-     * @param map the map to check\n-     * @param message the exception message if invalid\n+     * @param map  the map to check, validated not null by this method\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @return the validated map (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the map is <code>null</code>\n      * @throws IllegalArgumentException if the map is empty\n      * empty&quot;.</p>\n      * \n      * @param <T> the map type\n-     * @param map the map to check\n+     * @param map  the map to check, validated not null by this method\n      * @return the validated map (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the map is <code>null</code>\n      * @throws IllegalArgumentException if the map is empty\n      * <pre>Validate.notEmpty(myString, \"The string must not be empty\");</pre>\n      * \n      * @param <T> the character sequence type\n-     * @param chars the character sequence to check\n-     * @param message the exception message if invalid\n+     * @param chars  the character sequence to check, validated not null by this method\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @return the validated character sequence (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the character sequence is <code>null</code>\n      * @throws IllegalArgumentException if the character sequence is empty\n      * character sequence is empty&quot;.</p>\n      * \n      * @param <T> the character sequence type\n-     * @param chars the character sequence to check\n+     * @param chars  the character sequence to check, validated not null by this method\n      * @return the validated character sequence (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the character sequence is <code>null</code>\n      * @throws IllegalArgumentException if the character sequence is empty\n      * <pre>Validate.notBlank(myString, \"The string must not be blank\");</pre>\n      * \n      * @param <T> the character sequence type\n-     * @param chars the character sequence to check\n-     * @param message the exception message if invalid\n+     * @param chars  the character sequence to check, validated not null by this method\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @return the validated character sequence (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the character sequence is <code>null</code>\n      * @throws IllegalArgumentException if the character sequence is blank\n      * sequence is blank&quot;.</p>\n      * \n      * @param <T> the character sequence type\n-     * @param chars the character sequence to check\n+     * @param chars  the character sequence to check, validated not null by this method\n      * @return the validated character sequence (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the character sequence is <code>null</code>\n      * @throws IllegalArgumentException if the character sequence is blank\n      * argument.</p>\n      * \n      * @param <T> the array type\n-     * @param array the array to check\n+     * @param array  the array to check, validated not null by this method\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @return the validated array (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the array is <code>null</code>\n      * @throws IllegalArgumentException if an element is <code>null</code>\n      * &quot followed by the index.</p>\n      *\n      * @param <T> the array type\n-     * @param array the array to check\n+     * @param array  the array to check, validated not null by this method\n      * @return the validated array (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the array is <code>null</code>\n      * @throws IllegalArgumentException if an element is <code>null</code>\n      * argument.</p>\n      *\n      * @param <T> the iterable type\n-     * @param iterable the iterable to check\n+     * @param iterable  the iterable to check, validated not null by this method\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @return the validated iterable (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the array is <code>null</code>\n      * @throws IllegalArgumentException if an element is <code>null</code>\n      * &quot followed by the index.</p>\n      *\n      * @param <T> the iterable type\n-     * @param iterable the iterable to check\n+     * @param iterable  the iterable to check, validated not null by this method\n      * @return the validated iterable (never <code>null</code> method for chaining)\n      * @throws NullPointerException if the array is <code>null</code>\n      * @throws IllegalArgumentException if an element is <code>null</code>\n      * is &quot;The validated object is null&quot;.</p>\n      * \n      * @param <T> the array type\n-     * @param array the array to check\n-     * @param index the index\n-     * @param message the exception message if invalid\n+     * @param array  the array to check, validated not null by this method\n+     * @param index  the index to check\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @return the validated array (never <code>null</code> for method chaining)\n      * @throws NullPointerException if the array is <code>null</code>\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * index.</p>\n      * \n      * @param <T> the array type\n-     * @param array the array to check\n-     * @param index the index\n+     * @param array  the array to check, validated not null by this method\n+     * @param index  the index to check\n      * @return the validated array (never <code>null</code> for method chaining)\n      * @throws NullPointerException if the array is <code>null</code>\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * exception is &quot;The validated object is null&quot;.</p>\n      *\n      * @param <T> the collection type\n-     * @param collection the collection to check\n-     * @param index the index\n-     * @param message the exception message if invalid\n+     * @param collection  the collection to check, validated not null by this method\n+     * @param index  the index to check\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @return the validated collection (never <code>null</code> for chaining)\n      * @throws NullPointerException if the collection is <code>null</code>\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * followed by the index.</p>\n      * \n      * @param <T> the collection type\n-     * @param collection the collection to check\n-     * @param index the index\n+     * @param collection  the collection to check, validated not null by this method\n+     * @param index  the index to check\n      * @return the validated collection (never <code>null</code> for method chaining)\n      * @throws NullPointerException if the collection is <code>null</code>\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * of the exception is &quot;The validated object is null&quot;.</p>\n      *\n      * @param <T> the character sequence type\n-     * @param chars the character sequence to check\n-     * @param index the index\n-     * @param message the exception message if invalid\n+     * @param chars  the character sequence to check, validated not null by this method\n+     * @param index  the index to check\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @return the validated character sequence (never <code>null</code> for method chaining)\n      * @throws NullPointerException if the character sequence is <code>null</code>\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * followed by the index.</p>\n      * \n      * @param <T> the character sequence type\n-     * @param chars the character sequence to check\n-     * @param index the index\n+     * @param chars  the character sequence to check, validated not null by this method\n+     * @param index  the index to check\n      * @return the validated character sequence (never <code>null</code> for method chaining)\n      * @throws NullPointerException if the character sequence is <code>null</code>\n      * @throws IndexOutOfBoundsException if the index is invalid\n         return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, Integer.valueOf(index));\n     }\n \n+    // validState\n+    //---------------------------------------------------------------------------------\n+\n     /**\n      * <p>Validate that the stateful condition is <code>true</code>; otherwise \n      * throwing an exception. This method is useful when validating according \n      * <p>The message of the exception is &quot;The validated state is \n      * false&quot;.</p>\n      * \n-     * @param expression the boolean expression to check \n+     * @param expression  the boolean expression to check \n      * @throws IllegalStateException if expression is <code>false</code>\n      * @see #validState(boolean, String, Object...)\n      */\n      *\n      * <pre>Validate.validState(this.isOk(), \"The state is not OK: %s\", myObject);</pre>\n      *\n-     * @param expression the boolean expression to check \n-     * @param message the exception message if invalid\n-     * @param values the optional values for the formatted exception message\n+     * @param expression  the boolean expression to check \n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalStateException if expression is <code>false</code>\n      * @see #validState(boolean)\n      */\n             throw new IllegalStateException(String.format(message, values));\n         }\n     }\n-    \n+\n+    // matchesPattern\n+    //---------------------------------------------------------------------------------\n+\n     /**\n      * <p>Validate that the specified argument character sequence matches the specified regular\n      * expression pattern; otherwise throwing an exception.</p>\n      * \n      * <p>The syntax of the pattern is the one used in the {@link Pattern} class.</p>\n      * \n-     * @param input the character sequence to validate\n-     * @param pattern regular expression pattern\n+     * @param input  the character sequence to validate, not null\n+     * @param pattern  the regular expression pattern, not null\n      * @throws IllegalArgumentException if the character sequence does not match the pattern\n      * @see #matchesPattern(CharSequence, String, String, Object...)\n      */\n             throw new IllegalArgumentException(String.format(DEFAULT_MATCHES_PATTERN_EX, input, pattern));\n         }\n     }\n-    \n+\n     /**\n      * <p>Validate that the specified argument character sequence matches the specified regular\n      * expression pattern; otherwise throwing an exception with the specified message.</p>\n      * \n      * <p>The syntax of the pattern is the one used in the {@link Pattern} class.</p>\n      * \n-     * @param input the character sequence to validate\n-     * @param pattern regular expression pattern\n-     * @param message the exception message\n-     * @param values (optional) values to replace in the exception message\n+     * @param input  the character sequence to validate, not null\n+     * @param pattern  the regular expression pattern, not null\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if the character sequence does not match the pattern\n      * @see #matchesPattern(CharSequence, String)\n      */\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n     }\n-    \n+\n+    // inclusiveBetween\n+    //---------------------------------------------------------------------------------\n+\n     /**\n      * <p>Validate that the specified argument object fall between the two\n      * inclusive values specified; otherwise, throws an exception.</p>\n      *\n      * <pre>Validate.inclusiveBetween(0, 2, 1);</pre>\n      * \n-     * @param value the object to validate\n-     * @param start the inclusive start value\n-     * @param end the inclusive end value\n+     * @param start  the inclusive start value, not null\n+     * @param end  the inclusive end value, not null\n+     * @param value  the object to validate, not null\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #inclusiveBetween(Object, Object, Comparable, String, Object...)\n      */\n             throw new IllegalArgumentException(String.format(DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));\n         }\n     }\n-    \n+\n     /**\n      * <p>Validate that the specified argument object fall between the two\n      * inclusive values specified; otherwise, throws an exception with the\n      *\n      * <pre>Validate.inclusiveBetween(0, 2, 1, \"Not in boundaries\");</pre>\n      * \n-     * @param value the object to validate\n-     * @param start the inclusive start value\n-     * @param end the inclusive end value\n-     * @param message the exception message\n-     * @param values to replace in the exception message (optional)\n+     * @param start  the inclusive start value, not null\n+     * @param end  the inclusive end value, not null\n+     * @param value  the object to validate, not null\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #inclusiveBetween(Object, Object, Comparable)\n      */\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n     }\n-    \n+\n+    // exclusiveBetween\n+    //---------------------------------------------------------------------------------\n+\n     /**\n      * <p>Validate that the specified argument object fall between the two\n      * exclusive values specified; otherwise, throws an exception.</p>\n      *\n      * <pre>Validate.inclusiveBetween(0, 2, 1);</pre>\n      * \n-     * @param value the object to validate\n-     * @param start the exclusive start value\n-     * @param end the exclusive end value\n+     * @param start  the exclusive start value, not null\n+     * @param end  the exclusive end value, not null\n+     * @param value  the object to validate, not null\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #exclusiveBetween(Object, Object, Comparable, String, Object...)\n      */\n             throw new IllegalArgumentException(String.format(DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));\n         }\n     }\n-    \n+\n     /**\n      * <p>Validate that the specified argument object fall between the two\n      * exclusive values specified; otherwise, throws an exception with the\n      *\n      * <pre>Validate.inclusiveBetween(0, 2, 1, \"Not in boundaries\");</pre>\n      * \n-     * @param value the object to validate\n-     * @param start the exclusive start value\n-     * @param end the exclusive end value\n-     * @param message the exception message\n-     * @param values to replace in the exception message (optional)\n+     * @param start  the exclusive start value, not null\n+     * @param end  the exclusive end value, not null\n+     * @param value  the object to validate, not null\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #exclusiveBetween(Object, Object, Comparable)\n      */\n         }\n     }\n \n+    // isInstanceOf\n+    //---------------------------------------------------------------------------------\n+\n     /**\n      * <p>Validate that the argument is an instance of the specified class; otherwise\n      * throwing an exception. This method is useful when validating according to an arbitrary\n      * <p>The message of the exception is &quot;The validated object is not an instance of&quot;\n      * followed by the name of the class</p>\n      * \n-     * @param type the class the object must be validated against\n-     * @param o the object to check\n+     * @param type  the class the object must be validated against, not null\n+     * @param obj  the object to check, null throws an exception\n      * @throws IllegalArgumentException if argument is not of specified class\n      * @see #isInstanceOf(Class, Object, String, Object...)\n      */\n-    public static void isInstanceOf(Class<?> type, Object o) {\n-        if (type.isInstance(o) == false) {\n+    public static void isInstanceOf(Class<?> type, Object obj) {\n+        if (type.isInstance(obj) == false) {\n             throw new IllegalArgumentException(String.format(DEFAULT_IS_INSTANCE_OF_EX_MESSAGE, type.getName()));\n         }\n     }\n-    \n+\n     /**\n      * <p>Validate that the argument is an instance of the specified class; otherwise\n      * throwing an exception with the specified message. This method is useful when \n      * \n      * <pre>Validate.isInstanceOf(OkClass.classs, object, \"Wrong class, object is of class %s\", object.getClass().getName());</pre>\n      * \n-     * @param type the class the object must be validated against\n-     * @param o the object to check\n-     * @param message exception message\n-     * @param values optional value for the exception message\n+     * @param type  the class the object must be validated against, not null\n+     * @param obj  the object to check, null throws an exception\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if argument is not of specified class\n      * @see #isInstanceOf(Class, Object)\n      */\n-    public static void isInstanceOf(Class<?> type, Object o, String message, Object... values) {\n-        if (type.isInstance(o) == false) {\n+    public static void isInstanceOf(Class<?> type, Object obj, String message, Object... values) {\n+        if (type.isInstance(obj) == false) {\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n     }\n-    \n+\n+    // isAssignableFrom\n+    //---------------------------------------------------------------------------------\n+\n     /**\n      * <p>Validate that the argument can be converted to the specified class; otherwise\n      * throwing an exception with the specified message. This method is useful when\n      * <p>The message of the exception is &quot;The validated object can not be converted to the&quot;\n      * followed by the name of the class and &quot;class&quot;</p>\n      * \n-     * @param superType the class the class must be validated against\n-     * @param type the class to check\n+     * @param superType  the class the class must be validated against, not null\n+     * @param type  the class to check, not null\n      * @throws IllegalArgumentException if argument can not be converted to the specified class\n      * @see #isAssignableFrom(Class, Class, String, Object...)\n      */\n             throw new IllegalArgumentException(String.format(DEFAULT_IS_ASSIGNABLE_EX_MESSAGE, superType.getName()));\n         }\n     }\n-    \n+\n     /**\n      * <p>Validate that the argument can be converted to the specified class; otherwise\n      * throwing an exception. This method is useful when validating if there will be no\n      * <p>The message of the exception is &quot;The validated object can not be converted to the&quot;\n      * followed by the name of the class and &quot;class&quot;</p>\n      * \n-     * @param superType the class the class must be validated against\n-     * @param type the class to check\n-     * @param message the exception message if invalid\n-     * @param values the optional values for the formatted exception message\n+     * @param superType  the class the class must be validated against, not null\n+     * @param type  the class to check, not null\n+     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n+     * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if argument can not be converted to the specified class\n      * @see #isAssignableFrom(Class, Class)\n      */", "timestamp": 1299248870, "metainfo": ""}