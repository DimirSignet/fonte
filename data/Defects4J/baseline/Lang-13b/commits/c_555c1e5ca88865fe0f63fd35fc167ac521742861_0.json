{"sha": "555c1e5ca88865fe0f63fd35fc167ac521742861", "log": "Remove Formattable from Pair  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/tuple/Pair.java\n+++ b/src/main/java/org/apache/commons/lang3/tuple/Pair.java\n \n import java.io.Serializable;\n import java.util.Formattable;\n-import java.util.Formatter;\n import java.util.Map;\n \n import org.apache.commons.lang3.ObjectUtils;\n import org.apache.commons.lang3.builder.CompareToBuilder;\n-import org.apache.commons.lang3.text.FormattableUtils;\n \n /**\n  * <p>A pair consisting of two elements.</p>\n  * @since Lang 3.0\n  * @version $Id$\n  */\n-public abstract class Pair<L, R> implements Map.Entry<L, R>, Comparable<Pair<L, R>>, Formattable, Serializable {\n+public abstract class Pair<L, R> implements Map.Entry<L, R>, Comparable<Pair<L, R>>, Serializable {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 4954918890077093841L;\n-\n-    /**\n-     * Basic format pattern.\n-     */\n-    private static final String DEFAULT_FORMAT_STRING = \"(%1$s,%2$s)\";\n \n     /**\n      * <p>Obtains an immutable pair of from two objects inferring the generic types.</p>\n     }\n \n     /**\n-     * <p>Format this {@link Pair}.  Basic format is in the form: (L,R).</p>\n+     * <p>Formats the receiver using the given format.</p>\n      * \n-     * @param formatter  the target formatter to append to, not null\n-     * @param flags  the flags for output format, see {@code Formattable}\n-     * @param width  the width of the output, see {@code Formattable}\n-     * @param precision the precision of the output, see {@code Formattable}\n-     */\n-    public void formatTo(Formatter formatter, int flags, int width, int precision) {\n-        FormattableUtils.append(String.format(DEFAULT_FORMAT_STRING, getLeft(), getRight()),\n-                formatter, flags, width, precision);\n-    }\n-\n-    /**\n-     * Formats the receiver using the given string.\n+     * <p>This uses {@link Formattable} to perform the formatting. Two variable may\n+     * be used to embed the left and right elements. Use {@code %1$} for the left\n+     * element (key) and {@code %2$} for the right element (value).\n+     * The default format used by {@code toString()} is {@code (%1$s,%2$s)}.</p>\n      * \n-     * @param format  the {@code Formattable} format string, where {@code %1$} is\n-     *  the left element (key) and {@code %2$} is the right element (value), not null\n+     * @param format  the format string, optionally containing {@code %1$} and {@code %2$}, not null\n      * @return the formatted string, not null\n      */\n     public Object toString(String format) {\n--- a/src/test/java/org/apache/commons/lang3/text/FormattableUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/FormattableUtilsTest.java\n \n import java.util.Formatter;\n \n-import org.apache.commons.lang3.tuple.Pair;\n import org.junit.Test;\n \n /**\n         assertEquals(\"+*___\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', \"+*\").toString());\n     }\n \n-    @Test\n-    public void testToStringFormattable() {\n-        assertEquals(\"(Key,Value)\", FormattableUtils.toString(Pair.of(\"Key\", \"Value\")));\n-    }\n }", "timestamp": 1306334644, "metainfo": ""}