{"sha": "0d7e304fefd9821e13f9e2cddcee4897e64d52d1", "log": "Fix internal raw types  ", "commit": "\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n     //-----------------------------------------------------------------------\n     public void testConstructor() {\n         assertNotNull(new ArrayUtils());\n-        Constructor[] cons = ArrayUtils.class.getDeclaredConstructors();\n+        Constructor<?>[] cons = ArrayUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n         assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n         assertEquals(true, Modifier.isPublic(ArrayUtils.class.getModifiers()));\n     \n     //-----------------------------------------------------------------------\n     public void testToMap() {\n-        Map map = ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"hello\", \"world\"}});\n+        Map<?, ?> map = ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"hello\", \"world\"}});\n         \n         assertEquals(\"bar\", map.get(\"foo\"));\n         assertEquals(\"world\", map.get(\"hello\"));\n             fail(\"exception expected\");\n         } catch (IllegalArgumentException ex) {}\n         \n-        map = ArrayUtils.toMap(new Object[] {new Map.Entry() {\n+        map = ArrayUtils.toMap(new Object[] {new Map.Entry<Object, Object>() {\n             public Object getKey() {\n                 return \"foo\";\n             }\n--- a/src/test/org/apache/commons/lang/ValidateTest.java\n+++ b/src/test/org/apache/commons/lang/ValidateTest.java\n \n     //-----------------------------------------------------------------------\n     public void testNotEmptyCollection1() {\n-        Collection coll = new ArrayList();\n-        try {\n-            Validate.notEmpty((Collection) null);\n+        Collection<Integer> coll = new ArrayList<Integer>();\n+        try {\n+            Validate.notEmpty((Collection<?>) null);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated collection is empty\", ex.getMessage());\n \n     //-----------------------------------------------------------------------\n     public void testNotEmptyCollection2() {\n-        Collection coll = new ArrayList();\n-        try {\n-            Validate.notEmpty((Collection) null, \"MSG\");\n+        Collection<Integer> coll = new ArrayList<Integer>();\n+        try {\n+            Validate.notEmpty((Collection<?>) null, \"MSG\");\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n \n     //-----------------------------------------------------------------------\n     public void testNotEmptyMap1() {\n-        Map map = new HashMap();\n-        try {\n-            Validate.notEmpty((Map) null);\n+        Map<String, Integer> map = new HashMap<String, Integer>();\n+        try {\n+            Validate.notEmpty((Map<?, ?>) null);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated map is empty\", ex.getMessage());\n \n     //-----------------------------------------------------------------------\n     public void testNotEmptyMap2() {\n-        Map map = new HashMap();\n-        try {\n-            Validate.notEmpty((Map) null, \"MSG\");\n+        Map<String, Integer> map = new HashMap<String, Integer>();\n+        try {\n+            Validate.notEmpty((Map<?, ?>) null, \"MSG\");\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n \n     //-----------------------------------------------------------------------\n     public void testNoNullElementsCollection1() {\n-        List coll = new ArrayList();\n+        List<String> coll = new ArrayList<String>();\n         coll.add(\"a\");\n         coll.add(\"b\");\n         Validate.noNullElements(coll);\n         try {\n-            Validate.noNullElements((Collection) null);\n+            Validate.noNullElements((Collection<?>) null);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n \n     //-----------------------------------------------------------------------\n     public void testNoNullElementsCollection2() {\n-        List coll = new ArrayList();\n+        List<String> coll = new ArrayList<String>();\n         coll.add(\"a\");\n         coll.add(\"b\");\n         Validate.noNullElements(coll, \"MSG\");\n         try {\n-            Validate.noNullElements((Collection) null, \"MSG\");\n+            Validate.noNullElements((Collection<?>) null, \"MSG\");\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n \n     //-----------------------------------------------------------------------\n     public void testAllElementsOfType() {\n-        List coll = new ArrayList();\n+        List<Object> coll = new ArrayList<Object>();\n         coll.add(\"a\");\n         coll.add(\"b\");\n         Validate.allElementsOfType(coll, String.class, \"MSG\");\n             assertEquals(\"The validated collection contains an element not of type java.lang.String at index: 1\", ex.getMessage());\n         }\n         \n-        coll = new ArrayList();\n+        coll = new ArrayList<Object>();\n         coll.add(new Integer(5));\n         coll.add(new Double(2.0d));\n         Validate.allElementsOfType(coll, Number.class, \"MSG\");\n \n     public void testConstructor() {\n         assertNotNull(new Validate());\n-        Constructor[] cons = Validate.class.getDeclaredConstructors();\n+        Constructor<?>[] cons = Validate.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n         assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n         assertEquals(true, Modifier.isPublic(Validate.class.getModifiers()));", "timestamp": 1256400262, "metainfo": ""}