{"sha": "9a6fb2bb0d58bccb47e8e5148ea6172c40e2fa10", "log": "'stolen' is a cute word, but given it means taking without permission it's incorrect here  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n      * @param type to read\n      * @return Class<?>\n      */\n-    // original code stolen from commons [proxy]'s 2.0 branch, then kneaded until firm\n+    // original code taken from commons [proxy]'s 2.0 branch, then kneaded until firm\n     public static Class<?> getRawType(Type enclosingType, Type type) {\n         if (type instanceof Class<?>) {\n             // it is raw, no problem\n      * @param typeVar\n      * @return Type resolved\n      */\n-    // original code stolen from commons [proxy]'s 2.0 branch, then kneaded until firm\n+    // original code taken from commons [proxy]'s 2.0 branch, then kneaded until firm\n     private static Type resolveVariable(Type enclosingType, TypeVariable<?> typeVar) {\n         if (enclosingType instanceof ParameterizedType) {\n             ParameterizedType parameterizedEnclosingType = (ParameterizedType) enclosingType;", "timestamp": 1268850756, "metainfo": ""}