{"sha": "fb2df65995b87756edfaaae629337e2dc193a6a9", "log": "[LANG-713] [patch] Increase test coverage of FieldUtils read methods and tweak javadoc. Apply patch.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java\n      * @param cls  the class to reflect, must not be null\n      * @param fieldName  the field name to obtain\n      * @return the value of the field\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * @throws IllegalArgumentException if the class is null, the field name is null or if the field could not be found\n      * @throws IllegalAccessException if the field is not accessible\n      */\n     public static Object readStaticField(Class<?> cls, String fieldName) throws IllegalAccessException {\n      *  <code>setAccessible</code> method. <code>False</code> will only\n      *  match public fields.\n      * @return the Field object\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * @throws IllegalArgumentException if the class is null, the field name is null or if the field could not be found\n      * @throws IllegalAccessException if the field is not made accessible\n      */\n     public static Object readStaticField(Class<?> cls, String fieldName, boolean forceAccess)\n      * @param cls  the class to reflect, must not be null\n      * @param fieldName  the field name to obtain\n      * @return the value of the field\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * @throws IllegalArgumentException if the class is null, the field name is null or if the field could not be found\n      * @throws IllegalAccessException if the field is not accessible\n      */\n     public static Object readDeclaredStaticField(Class<?> cls, String fieldName) throws IllegalAccessException {\n      *  <code>setAccessible</code> method. <code>False</code> will only\n      *  match public fields.\n      * @return the Field object\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * @throws IllegalArgumentException if the class is null, the field name is null or if the field could not be found\n      * @throws IllegalAccessException if the field is not made accessible\n      */\n     public static Object readDeclaredStaticField(Class<?> cls, String fieldName, boolean forceAccess)\n--- a/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n  */\n package org.apache.commons.lang3.reflect;\n \n+import static org.junit.Assume.*;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n         assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"b\"));\n         assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"i\"));\n         assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"d\"));\n+        \n+        try {\n+            FieldUtils.getField(null, \"none\");\n+            fail(\"null class should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            FieldUtils.getField(PublicChild.class, null);\n+            fail(\"null field name should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n     }\n \n     public void testGetFieldForceAccess() {\n                 .getDeclaringClass());\n         assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"d\", true)\n                 .getDeclaringClass());\n+        \n+        try {\n+            FieldUtils.getField(null, \"none\", true);\n+            fail(\"null class should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            FieldUtils.getField(PublicChild.class, null, true);\n+            fail(\"null field name should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n     }\n \n     public void testGetDeclaredField() {\n         assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"b\"));\n         assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"i\"));\n         assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"d\"));\n+        \n+        try {\n+            FieldUtils.getDeclaredField(null, \"none\");\n+            fail(\"null class should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            FieldUtils.getDeclaredField(PublicChild.class, null);\n+            fail(\"null field name should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n     }\n \n     public void testGetDeclaredFieldForceAccess() {\n                 .getDeclaringClass());\n         assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"d\", true)\n                 .getDeclaringClass());\n+        \n+        try {\n+            FieldUtils.getDeclaredField(null, \"none\", true);\n+            fail(\"null class should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            FieldUtils.getDeclaredField(PublicChild.class, null, true);\n+            fail(\"null field name should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n     }\n \n     public void testReadStaticField() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\n+        \n+        try {\n+            FieldUtils.readStaticField(null);\n+            fail(\"null field should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            Field nonStaticField = FieldUtils.getField(PublicChild.class, \"s\");\n+            assumeNotNull(nonStaticField);\n+            FieldUtils.readStaticField(nonStaticField);\n+            fail(\"non-static field should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n     }\n \n     public void testReadStaticFieldForceAccess() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, \"VALUE\")));\n+        \n+        try {\n+            FieldUtils.readStaticField(null, true);\n+            fail(\"null field should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            Field nonStaticField = FieldUtils.getField(PublicChild.class, \"s\", true);\n+            assumeNotNull(nonStaticField);\n+            FieldUtils.readStaticField(nonStaticField);\n+            fail(\"non-static field should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n     }\n \n     public void testReadNamedStaticField() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, \"VALUE\"));\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, \"VALUE\"));\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, \"VALUE\"));\n+        \n+        try {\n+            FieldUtils.readStaticField(null, \"none\");\n+            fail(\"null class should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            FieldUtils.readStaticField(Foo.class, null);\n+            fail(\"null field name should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            FieldUtils.readStaticField(Foo.class, \"does_not_exist\");\n+            fail(\"a field that doesn't exist should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            FieldUtils.readStaticField(PublicChild.class, \"s\");\n+            fail(\"non-static field should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n     }\n \n     public void testReadNamedStaticFieldForceAccess() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, \"VALUE\", true));\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, \"VALUE\", true));\n         assertEquals(\"child\", FieldUtils.readStaticField(PublicChild.class, \"VALUE\", true));\n+        \n+        try {\n+            FieldUtils.readStaticField(null, \"none\", true);\n+            fail(\"null class should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            FieldUtils.readStaticField(Foo.class, null, true);\n+            fail(\"null field name should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            FieldUtils.readStaticField(Foo.class, \"does_not_exist\", true);\n+            fail(\"a field that doesn't exist should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            FieldUtils.readStaticField(PublicChild.class, \"s\", false);\n+            fail(\"non-static field should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n     }\n \n     public void testReadDeclaredNamedStaticField() throws Exception {\n         assertEquals(D0, FieldUtils.readField(parentD, publicChild));\n         assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild));\n         assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild));\n+        \n+        try {\n+            FieldUtils.readField((Field)null, publicChild);\n+            fail(\"a null field should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n     }\n \n     public void testReadFieldForceAccess() throws Exception {\n         assertEquals(D0, FieldUtils.readField(parentD, publicChild, true));\n         assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true));\n         assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true));\n+        \n+        try {\n+            FieldUtils.readField((Field)null, publicChild, true);\n+            fail(\"a null field should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n     }\n \n     public void testReadNamedField() throws Exception {\n         assertEquals(\"s\", FieldUtils.readField(publicChild, \"s\"));\n         assertEquals(\"ss\", FieldUtils.readField(publiclyShadowedChild, \"s\"));\n         assertEquals(\"s\", FieldUtils.readField(privatelyShadowedChild, \"s\"));\n+        \n+        try {\n+            FieldUtils.readField(publicChild, null);\n+            fail(\"a null field name should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            FieldUtils.readField((Object)null, \"none\");\n+            fail(\"a null target should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n         try {\n             assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, \"b\"));\n             fail(\"expected IllegalArgumentException\");\n         assertEquals(D0, FieldUtils.readField(publicChild, \"d\", true));\n         assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, \"d\", true));\n         assertEquals(D1, FieldUtils.readField(privatelyShadowedChild, \"d\", true));\n+        \n+        try {\n+            FieldUtils.readField(publicChild, null, true);\n+            fail(\"a null field name should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            FieldUtils.readField((Object)null, \"none\", true);\n+            fail(\"a null target should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n     }\n \n     public void testReadDeclaredNamedField() throws Exception {\n         try {\n+            FieldUtils.readDeclaredField(publicChild, null);\n+            fail(\"a null field name should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            FieldUtils.readDeclaredField((Object)null, \"none\");\n+            fail(\"a null target should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n             assertEquals(\"s\", FieldUtils.readDeclaredField(publicChild, \"s\"));\n             fail(\"expected IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n     }\n \n     public void testReadDeclaredNamedFieldForceAccess() throws Exception {\n+        try {\n+            FieldUtils.readDeclaredField(publicChild, null, true);\n+            fail(\"a null field name should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            FieldUtils.readDeclaredField((Object)null, \"none\", true);\n+            fail(\"a null target should cause an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n         try {\n             assertEquals(\"s\", FieldUtils.readDeclaredField(publicChild, \"s\", true));\n             fail(\"expected IllegalArgumentException\");", "timestamp": 1309760306, "metainfo": ""}