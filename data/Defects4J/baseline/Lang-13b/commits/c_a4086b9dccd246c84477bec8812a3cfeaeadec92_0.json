{"sha": "a4086b9dccd246c84477bec8812a3cfeaeadec92", "log": "More tests added to DurationFormatUtilsTest and discovered bugs fixed in the DurationFormatUtils.formatPeriod method.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n             hours += 24;\n             days -= 1;\n         }\n-        while (days < 0) {\n-            end.add(Calendar.MONTH, -1);\n-            days += end.getActualMaximum(Calendar.DAY_OF_MONTH);\n-            // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is \n+        if (days < 0) {\n+            days += start.getActualMaximum(Calendar.DAY_OF_MONTH);\n+            // It's a tricky subject. Jan 15th to March 10th. If I count days-first it is \n             // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.\n+            // Here we choose the former. \n             // Also it's contextual - if asked for no M in the format then I should probably \n             // be doing no calculating here.\n             months -= 1;\n-            end.add(Calendar.MONTH, 1);\n         }\n         while (months < 0) {\n             months += 12;\n             years -= 1;\n-        }\n-\n-        // This next block of code adds in values that \n+            start.add(Calendar.YEAR, 1);\n+        }\n+\n+        // This rest of this code adds in values that \n         // aren't requested. This allows the user to ask for the \n         // number of months and get the real count and not just 0->11.\n+        \n         if (!Token.containsTokenWithValue(tokens, y)) {\n             if (Token.containsTokenWithValue(tokens, M)) {\n                 months += 12 * years;\n                 years = 0;\n             } else {\n-                // TODO: this is a bit weak, needs work to know about leap years\n-                days += 365 * years;\n+            \twhile(start.get(Calendar.YEAR) != end.get(Calendar.YEAR)) {\n+            \t\tdays += start.getActualMaximum(Calendar.DAY_OF_YEAR);\n+            \t\tstart.add(Calendar.YEAR, 1);\n+            \t}\n                 years = 0;\n             }\n         }\n-        if (!Token.containsTokenWithValue(tokens, M)) {\n+                \n+        if (!Token.containsTokenWithValue(tokens, M) && months != 0) {\n+        \tstart.set(start.get(Calendar.YEAR), start.get(Calendar.MONTH), 0, 0, 0, 0);\n+        \tstart.add(Calendar.MONTH, 1);\n+        \tend.set(end.get(Calendar.YEAR), end.get(Calendar.MONTH), 0, 0, 0, 0);\n             days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);\n             months = 0;\n+            \n+        \t// WARNING: For performance sake the Calendar instances are not being \n+        \t// cloned but modified inline. They should not be trusted after this point\n+            start = null;\n+            end = null;\n         }\n         if (!Token.containsTokenWithValue(tokens, d)) {\n             hours += 24 * days;\n--- a/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n                              new int[] { 2006, 0, 16, 0, 0, 0 }, \"MM\");\n         assertEqualDuration( \"11\", new int[] { 2005, 0, 15, 0, 0, 0 }, \n                              new int[] { 2006, 0, 14, 0, 0, 0 }, \"MM\");\n+        \n+        assertEqualDuration( \"01 26\", new int[] { 2006, 0, 15, 0, 0, 0 },\n+                             new int[] { 2006, 2, 10, 0, 0, 0 }, \"MM dd\");\n+        assertEqualDuration( \"54\", new int[] { 2006, 0, 15, 0, 0, 0 },\n+        \t\t             new int[] { 2006, 2, 10, 0, 0, 0 }, \"dd\"); \n+        \n+        assertEqualDuration( \"09 12\", new int[] { 2006, 1, 20, 0, 0, 0 },\n+                             new int[] { 2006, 11, 4, 0, 0, 0 }, \"MM dd\");\n+        assertEqualDuration( \"287\", new int[] { 2006, 1, 20, 0, 0, 0 },\n+\t                         new int[] { 2006, 11, 4, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"11 30\", new int[] { 2006, 0, 2, 0, 0, 0 },\n+                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"MM dd\"); \n+        assertEqualDuration( \"364\", new int[] { 2006, 0, 2, 0, 0, 0 },\n+                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"12 00\", new int[] { 2006, 0, 1, 0, 0, 0 },\n+                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"MM dd\"); \n+        assertEqualDuration( \"365\", new int[] { 2006, 0, 1, 0, 0, 0 },\n+                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"dd\"); \n+    \n     }\n \n     private void assertEqualDuration(String expected, int[] start, int[] end, String format) {\n         Calendar cal2 = Calendar.getInstance();\n         cal2.set(end[0], end[1], end[2], end[3], end[4], end[5]);\n         cal2.set(Calendar.MILLISECOND, 0);\n-        String result = DurationFormatUtils.formatPeriod(cal1.getTime().getTime(), cal2.getTime().getTime(), format);\n+        long milli1 = cal1.getTime().getTime();\n+        long milli2 = cal2.getTime().getTime();\n+        String result = DurationFormatUtils.formatPeriod(milli1, milli2, format);\n         assertEquals(expected, result);\n     }\n ", "timestamp": 1165807989, "metainfo": ""}