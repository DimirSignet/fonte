{"sha": "3ef0b8848e598cf2bfa45ce844c4b46088f8420a", "log": "junit4ify ToStringBuilderTest + some generics-related fixup  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n  */\n package org.apache.commons.lang3.builder;\n \n+import static org.junit.Assert.*;\n+\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests for {@link org.apache.commons.lang3.builder.ToStringBuilder}.\n  *\n  * @version $Id$\n  */\n-public class ToStringBuilderTest extends TestCase {\n+public class ToStringBuilderTest {\n \n     private final Integer base = Integer.valueOf(5);\n     private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n \n-    public ToStringBuilderTest(String name) {\n-        super(name);\n-    }\n-\n     //-----------------------------------------------------------------------\n \n+    @Test\n     public void testConstructorEx1() {\n         assertEquals(\"<null>\", new ToStringBuilder(null).toString());\n     }\n \n+    @Test\n     public void testConstructorEx2() {\n         assertEquals(\"<null>\", new ToStringBuilder(null, null).toString());\n         new ToStringBuilder(this.base, null).toString();\n     }\n \n+    @Test\n     public void testConstructorEx3() {\n         assertEquals(\"<null>\", new ToStringBuilder(null, null, null).toString());\n         new ToStringBuilder(this.base, null, null);\n         new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null);\n     }\n \n+    @Test\n     public void testGetSetDefault() {\n         try {\n             ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);\n         }\n     }\n \n+    @Test\n     public void testSetDefaultEx() {\n         try {\n             ToStringBuilder.setDefaultStyle(null);\n         fail();\n     }\n \n+    @Test\n     public void testBlank() {\n         assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n     }\n     /**\n      * Test wrapper for int primitive.\n      */\n+    @Test\n     public void testReflectionInteger() {\n         assertEquals(baseStr + \"[value=5]\", ToStringBuilder.reflectionToString(base));\n     }\n     /**\n      * Test wrapper for char primitive.\n      */\n+    @Test\n     public void testReflectionCharacter() {\n         Character c = new Character('A');\n         assertEquals(this.toBaseString(c) + \"[value=A]\", ToStringBuilder.reflectionToString(c));\n     /**\n      * Test wrapper for char boolean.\n      */\n+    @Test\n     public void testReflectionBoolean() {\n         Boolean b;\n         b = Boolean.TRUE;\n         assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, false));\n     }\n \n+    @Test\n     public void testReflectionObjectArray() {\n         Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionLongArray() {\n         long[] array = new long[] { 1, 2, -3, 4 };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionIntArray() {\n         int[] array = new int[] { 1, 2, -3, 4 };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionShortArray() {\n         short[] array = new short[] { 1, 2, -3, 4 };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionyteArray() {\n         byte[] array = new byte[] { 1, 2, -3, 4 };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionCharArray() {\n         char[] array = new char[] { 'A', '2', '_', 'D' };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionDoubleArray() {\n         double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionFloatArray() {\n         float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionBooleanArray() {\n         boolean[] array = new boolean[] { true, false, false };\n         String baseStr = this.toBaseString(array);\n \n     // Reflection Array Array tests\n \n+    @Test\n     public void testReflectionFloatArrayArray() {\n         float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n         String baseStr = this.toBaseString(array);\n     }\n \n \n+    @Test\n     public void testReflectionLongArrayArray() {\n         long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionIntArrayArray() {\n         int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionhortArrayArray() {\n         short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionByteArrayArray() {\n         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionCharArrayArray() {\n         char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionDoubleArrayArray() {\n         double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n         String baseStr = this.toBaseString(array);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionBooleanArrayArray() {\n         boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n         String baseStr = this.toBaseString(array);\n \n     // Reflection hierarchy tests\n \n+    @Test\n     public void testReflectionHierarchyArrayList() {\n         List<Object> base = new ArrayList<Object>();\n         String baseStr = this.toBaseString(base);\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionHierarchy() {\n         ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n         String baseStr = this.toBaseString(baseA);\n         private transient char transientB='t';\n     }\n \n+    @Test\n     public void testInnerClassReflection() {\n         Outer outer = new Outer();\n         assertEquals(toBaseString(outer) + \"[inner=\" + toBaseString(outer.inner) + \"[]]\", outer.toString());\n     /**\n      * Test an array element pointing to its container.\n      */\n+    @Test\n     public void testReflectionArrayCycle() throws Exception {\n         Object[] objects = new Object[1];\n         objects[0] = objects;\n     /**\n      * Test an array element pointing to its container.\n      */\n+    @Test\n     public void testReflectionArrayCycleLevel2() throws Exception {\n         Object[] objects = new Object[1];\n         Object[] objectsLevel2 = new Object[1];\n         this.validateNullToStringStyleRegistry();\n     }\n \n+    @Test\n     public void testReflectionArrayArrayCycle() throws Exception {\n         Object[][] objects = new Object[2][2];\n         objects[0][0] = objects;\n      *\n      * @throws Exception\n      */\n+    @Test\n     public void testSimpleReflectionObjectCycle() throws Exception {\n         SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n         simple.o = simple;\n      *\n      * @throws Exception\n      */\n+    @Test\n     public void testSelfInstanceVarReflectionObjectCycle() throws Exception {\n         SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n         assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());\n      *\n      * @throws Exception\n      */\n+    @Test\n     public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception {\n         SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n         assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());\n      *\n      * @throws Exception\n      */\n+    @Test\n     public void testReflectionObjectCycle() throws Exception {\n         ReflectionTestCycleA a = new ReflectionTestCycleA();\n         ReflectionTestCycleB b = new ReflectionTestCycleB();\n      *\n      * @throws Exception\n      */\n+    @Test\n     public void testReflectionArrayAndObjectCycle() throws Exception {\n         Object[] objects = new Object[1];\n         SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n     }\n     //  End: Reflection cycle tests\n \n+    @Test\n     public void testAppendSuper() {\n         assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n         assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n     }\n \n+    @Test\n     public void testAppendToString() {\n         assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendToString(\"Integer@8888[]\").toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendToString(\"Integer@8888[<null>]\").toString());\n         assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendToString(null).append(\"a\", \"hello\").toString());\n     }\n \n+    @Test\n     public void testObject() {\n         Integer i3 = Integer.valueOf(3);\n         Integer i4 = Integer.valueOf(4);\n         assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n     }\n     \n+    @Test\n     public void testObjectBuild() {\n         Integer i3 = Integer.valueOf(3);\n         Integer i4 = Integer.valueOf(4);\n         assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).build());\n     }\n \n+    @Test\n     public void testLong() {\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n         assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n     }\n \n     @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n+    @Test\n     public void testInt() {\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((int) 3).toString());\n         assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (int) 3).toString());\n         assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (int) 3).append(\"b\", (int) 4).toString());\n     }\n \n+    @Test\n     public void testShort() {\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((short) 3).toString());\n         assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (short) 3).toString());\n         assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (short) 3).append(\"b\", (short) 4).toString());\n     }\n \n+    @Test\n     public void testChar() {\n         assertEquals(baseStr + \"[A]\", new ToStringBuilder(base).append((char) 65).toString());\n         assertEquals(baseStr + \"[a=A]\", new ToStringBuilder(base).append(\"a\", (char) 65).toString());\n         assertEquals(baseStr + \"[a=A,b=B]\", new ToStringBuilder(base).append(\"a\", (char) 65).append(\"b\", (char) 66).toString());\n     }\n \n+    @Test\n     public void testByte() {\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((byte) 3).toString());\n         assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (byte) 3).toString());\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testDouble() {\n         assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append((double) 3.2).toString());\n         assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", (double) 3.2).toString());\n         assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", (double) 3.2).append(\"b\", (double) 4.3).toString());\n     }\n \n+    @Test\n     public void testFloat() {\n         assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append((float) 3.2).toString());\n         assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).toString());\n         assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).append(\"b\", (float) 4.3).toString());\n     }\n \n+    @Test\n     public void testBoolean() {\n         assertEquals(baseStr + \"[true]\", new ToStringBuilder(base).append(true).toString());\n         assertEquals(baseStr + \"[a=true]\", new ToStringBuilder(base).append(\"a\", true).toString());\n     }\n \n \n+    @Test\n     public void testObjectArray() {\n         Object[] array = new Object[] {null, base, new int[] {3, 6}};\n         assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testLongArray() {\n         long[] array = new long[] {1, 2, -3, 4};\n         assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testIntArray() {\n         int[] array = new int[] {1, 2, -3, 4};\n         assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testShortArray() {\n         short[] array = new short[] {1, 2, -3, 4};\n         assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testByteArray() {\n         byte[] array = new byte[] {1, 2, -3, 4};\n         assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testCharArray() {\n         char[] array = new char[] {'A', '2', '_', 'D'};\n         assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testDoubleArray() {\n         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3};\n         assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testFloatArray() {\n         float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f};\n         assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testBooleanArray() {\n         boolean[] array = new boolean[] {true, false, false};\n         assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testLongArrayArray() {\n         long[][] array = new long[][] {{1, 2}, null, {5}};\n         assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testIntArrayArray() {\n         int[][] array = new int[][] {{1, 2}, null, {5}};\n         assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testShortArrayArray() {\n         short[][] array = new short[][] {{1, 2}, null, {5}};\n         assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testByteArrayArray() {\n         byte[][] array = new byte[][] {{1, 2}, null, {5}};\n         assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testCharArrayArray() {\n         char[][] array = new char[][] {{'A', 'B'}, null, {'p'}};\n         assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testDoubleArrayArray() {\n         double[][] array = new double[][] {{1.0, 2.29686}, null, {Double.NaN}};\n         assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testFloatArrayArray() {\n         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}};\n         assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testBooleanArrayArray() {\n         boolean[][] array = new boolean[][] {{true, false}, null, {false}};\n         assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testObjectCycle() {\n         ObjectCycle a = new ObjectCycle();\n         ObjectCycle b = new ObjectCycle();\n         }\n     }\n \n+    @Test\n     public void testSimpleReflectionStatics() {\n         SimpleReflectionStaticFieldsFixture instance1 = new SimpleReflectionStaticFieldsFixture();\n         assertEquals(\n     /**\n      * Tests ReflectionToStringBuilder.toString() for statics.\n      */\n+    @Test\n     public void testReflectionStatics() {\n         ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture();\n         assertEquals(\n     /**\n      * Tests ReflectionToStringBuilder.toString() for statics.\n      */\n+    @Test\n     public void testInheritedReflectionStatics() {\n         InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture();\n         assertEquals(\n     /**\n      * Tests ReflectionToStringBuilder setUpToClass().\n      */\n+    @Test\n     public void test_setUpToClass_valid() {\n         Integer val = Integer.valueOf(5);\n         ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\n     /**\n      * Tests ReflectionToStringBuilder setUpToClass().\n      */\n+    @Test\n     public void test_setUpToClass_invalid() {\n         Integer val = Integer.valueOf(5);\n         ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\n         static final int staticInt2 = 67890;\n     }\n \n+    @Test\n     public void testReflectionNull() {\n         assertEquals(\"<null>\", ReflectionToStringBuilder.toString(null));\n     }\n         }\n     }\n \n+    @Test\n     public void testAppendToStringUsingMultiLineStyle() {\n         MultiLineTestObject obj = new MultiLineTestObject();\n         ToStringBuilder testBuilder = new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)", "timestamp": 1312552732, "metainfo": ""}