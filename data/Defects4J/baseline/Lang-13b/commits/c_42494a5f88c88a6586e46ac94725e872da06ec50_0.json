{"sha": "42494a5f88c88a6586e46ac94725e872da06ec50", "log": "primitive overloads added for add(array, int index, element)   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @author Maarten Coene\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.49 2004/10/10 18:56:16 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.50 2005/01/22 04:22:12 bayard Exp $\n  */\n public class ArrayUtils {\n \n      * (index < 0 || index > array.length).\n      */\n     public static Object[] add(Object[] array, int index, Object element) {\n+        Class clss = null;\n+        if(array != null) {\n+            clss = array.getClass().getComponentType();\n+        } else\n+        if(element != null) {\n+            clss = element.getClass();\n+        } else {\n+            return new Object[] { null };\n+        }\n+        return (Object[]) add( (Object) array, index, element, clss );\n+    }\n+    \n+    /**\n+     * <p>Inserts the specified element at the specified position in the array. \n+     * Shifts the element currently at that position (if any) and any subsequent\n+     * elements to the right (adds one to their indices).</p>\n+     *\n+     * <p>This method returns a new array with the same elements of the input\n+     * array plus the given element on the specified position. The component \n+     * type of the returned array is always the same as that of the input \n+     * array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, 0, true)          = [true]\n+     * ArrayUtils.add([true], 0, false)       = [false, true]\n+     * ArrayUtils.add([false], 1, true)       = [false, true]\n+     * ArrayUtils.add([true, false], 1, true) = [true, true, false]\n+     * </pre>\n+     * \n+     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param index  the position of the new object\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @throws IndexOutOfBoundsException if the index is out of range \n+     * (index < 0 || index > array.length).\n+     */\n+    public static boolean[] add(boolean[] array, int index, boolean element) {\n+        return (boolean[]) add( (Object) array, index, new Boolean(element), Boolean.TYPE );\n+    }\n+    \n+    /**\n+     * <p>Inserts the specified element at the specified position in the array. \n+     * Shifts the element currently at that position (if any) and any subsequent\n+     * elements to the right (adds one to their indices).</p>\n+     *\n+     * <p>This method returns a new array with the same elements of the input\n+     * array plus the given element on the specified position. The component \n+     * type of the returned array is always the same as that of the input \n+     * array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, 0, 'a')            = ['a']\n+     * ArrayUtils.add(['a'], 0, 'b')           = ['b', 'a']\n+     * ArrayUtils.add(['a', 'b'], 0, 'c')      = ['c', 'a', 'b']\n+     * ArrayUtils.add(['a', 'b'], 1, 'k')      = ['a', 'k', 'b']\n+     * ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c']\n+     * </pre>\n+     * \n+     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param index  the position of the new object\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @throws IndexOutOfBoundsException if the index is out of range \n+     * (index < 0 || index > array.length).\n+     */\n+    public static char[] add(char[] array, int index, char element) {\n+        return (char[]) add( (Object) array, index, new Character(element), Character.TYPE );\n+    }\n+    \n+    /**\n+     * <p>Inserts the specified element at the specified position in the array. \n+     * Shifts the element currently at that position (if any) and any subsequent\n+     * elements to the right (adds one to their indices).</p>\n+     *\n+     * <p>This method returns a new array with the same elements of the input\n+     * array plus the given element on the specified position. The component \n+     * type of the returned array is always the same as that of the input \n+     * array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n+     * ArrayUtils.add([2, 6], 2, 3)      = [2, 6, 3]\n+     * ArrayUtils.add([2, 6], 0, 1)      = [1, 2, 6]\n+     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n+     * </pre>\n+     * \n+     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param index  the position of the new object\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @throws IndexOutOfBoundsException if the index is out of range \n+     * (index < 0 || index > array.length).\n+     */\n+    public static byte[] add(byte[] array, int index, byte element) {\n+        return (byte[]) add( (Object) array, index, new Byte(element), Byte.TYPE );\n+    }\n+    \n+    /**\n+     * <p>Inserts the specified element at the specified position in the array. \n+     * Shifts the element currently at that position (if any) and any subsequent\n+     * elements to the right (adds one to their indices).</p>\n+     *\n+     * <p>This method returns a new array with the same elements of the input\n+     * array plus the given element on the specified position. The component \n+     * type of the returned array is always the same as that of the input \n+     * array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n+     * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]\n+     * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]\n+     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n+     * </pre>\n+     * \n+     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param index  the position of the new object\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @throws IndexOutOfBoundsException if the index is out of range \n+     * (index < 0 || index > array.length).\n+     */\n+    public static short[] add(short[] array, int index, short element) {\n+        return (short[]) add( (Object) array, index, new Short(element), Short.TYPE );\n+    }\n+    \n+    /**\n+     * <p>Inserts the specified element at the specified position in the array. \n+     * Shifts the element currently at that position (if any) and any subsequent\n+     * elements to the right (adds one to their indices).</p>\n+     *\n+     * <p>This method returns a new array with the same elements of the input\n+     * array plus the given element on the specified position. The component \n+     * type of the returned array is always the same as that of the input \n+     * array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n+     * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]\n+     * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]\n+     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n+     * </pre>\n+     * \n+     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param index  the position of the new object\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @throws IndexOutOfBoundsException if the index is out of range \n+     * (index < 0 || index > array.length).\n+     */\n+    public static int[] add(int[] array, int index, int element) {\n+        return (int[]) add( (Object) array, index, new Integer(element), Integer.TYPE );\n+    }\n+    \n+    /**\n+     * <p>Inserts the specified element at the specified position in the array. \n+     * Shifts the element currently at that position (if any) and any subsequent\n+     * elements to the right (adds one to their indices).</p>\n+     *\n+     * <p>This method returns a new array with the same elements of the input\n+     * array plus the given element on the specified position. The component \n+     * type of the returned array is always the same as that of the input \n+     * array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add([1L], 0, 2L)           = [2L, 1L]\n+     * ArrayUtils.add([2L, 6L], 2, 10L)      = [2L, 6L, 10L]\n+     * ArrayUtils.add([2L, 6L], 0, -4L)      = [-4L, 2L, 6L]\n+     * ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L]\n+     * </pre>\n+     * \n+     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param index  the position of the new object\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @throws IndexOutOfBoundsException if the index is out of range \n+     * (index < 0 || index > array.length).\n+     */\n+    public static long[] add(long[] array, int index, long element) {\n+        return (long[]) add( (Object) array, index, new Long(element), Long.TYPE );\n+    }\n+    \n+    /**\n+     * <p>Inserts the specified element at the specified position in the array. \n+     * Shifts the element currently at that position (if any) and any subsequent\n+     * elements to the right (adds one to their indices).</p>\n+     *\n+     * <p>This method returns a new array with the same elements of the input\n+     * array plus the given element on the specified position. The component \n+     * type of the returned array is always the same as that of the input \n+     * array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add([1.1f], 0, 2.2f)               = [2.2f, 1.1f]\n+     * ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        = [2.3f, 6.4f, 10.5f]\n+     * ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        = [-4.8f, 2.6f, 6.7f]\n+     * ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f]\n+     * </pre>\n+     * \n+     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param index  the position of the new object\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @throws IndexOutOfBoundsException if the index is out of range \n+     * (index < 0 || index > array.length).\n+     */\n+    public static float[] add(float[] array, int index, float element) {\n+        return (float[]) add( (Object) array, index, new Float(element), Float.TYPE );\n+    }\n+    \n+    /**\n+     * <p>Inserts the specified element at the specified position in the array. \n+     * Shifts the element currently at that position (if any) and any subsequent\n+     * elements to the right (adds one to their indices).</p>\n+     *\n+     * <p>This method returns a new array with the same elements of the input\n+     * array plus the given element on the specified position. The component \n+     * type of the returned array is always the same as that of the input \n+     * array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add([1.1], 0, 2.2)              = [2.2, 1.1]\n+     * ArrayUtils.add([2.3, 6.4], 2, 10.5)        = [2.3, 6.4, 10.5]\n+     * ArrayUtils.add([2.6, 6.7], 0, -4.8)        = [-4.8, 2.6, 6.7]\n+     * ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3]\n+     * </pre>\n+     * \n+     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param index  the position of the new object\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @throws IndexOutOfBoundsException if the index is out of range \n+     * (index < 0 || index > array.length).\n+     */\n+    public static double[] add(double[] array, int index, double element) {\n+        return (double[]) add( (Object) array, index, new Double(element), Double.TYPE );\n+    }\n+    \n+    private static Object add(Object array, int index, Object element, Class clss) {\n         if (array == null) {\n             if (index != 0) {\n                 throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: 0\");\n             }\n-            Object joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);\n+            Object joinedArray = Array.newInstance(clss, 1);\n             Array.set(joinedArray, 0, element);\n-            return (Object[]) joinedArray;\n-        }\n-        int length = array.length;\n+            return joinedArray;\n+        }\n+        int length = Array.getLength(array);\n         if (index > length || index < 0) {\n             throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n         }\n-        Object result = Array.newInstance(array.getClass().getComponentType(), length + 1);\n+        Object result = Array.newInstance(clss, length + 1);\n         System.arraycopy(array, 0, result, 0, index);\n         Array.set(result, index, element);\n         if (index < length) {\n             System.arraycopy(array, index, result, index + 1, length - index);\n         }\n-        return (Object[]) result;\n+        return result;\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n  * Tests ArrayUtils add methods.\n  * \n  * @author Gary D. Gregory\n- * @version $Id: ArrayUtilsAddTest.java,v 1.4 2004/10/09 11:55:51 scolebourne Exp $\n+ * @version $Id: ArrayUtilsAddTest.java,v 1.5 2005/01/22 04:22:12 bayard Exp $\n  */\n public class ArrayUtilsAddTest extends TestCase {\n     public static void main(String[] args) {\n         assertEquals(\"2\", result2[1]);\n         assertEquals(\"4\", result2[2]);\n         assertEquals(\"5\", result2[3]);\n+\n+        // boolean tests\n+        boolean[] booleanArray = ArrayUtils.add( null, 0, true );\n+        assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) );\n+        booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false);\n+        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n+        booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true);\n+        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n+        booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true);\n+        assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) );\n+\n+        // char tests\n+        char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' );\n+        assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) );\n+        charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b');\n+        assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) );\n+        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c');\n+        assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) );\n+        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k');\n+        assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) );\n+        charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't');\n+        assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) );\n+\n+        // short tests\n+        short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2);\n+        assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) );\n+        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10);\n+        assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) );\n+        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4);\n+        assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) );\n+        shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1);\n+        assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) );\n+\n+        // byte tests\n+        byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2);\n+        assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) );\n+        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3);\n+        assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) );\n+        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1);\n+        assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) );\n+        byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1);\n+        assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) );\n+\n+        // int tests\n+        int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2);\n+        assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) );\n+        intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10);\n+        assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) );\n+        intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4);\n+        assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) );\n+        intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1);\n+        assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) );\n+\n+        // long tests\n+        long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L);\n+        assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) );\n+        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L);\n+        assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) );\n+        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L);\n+        assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) );\n+        longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L);\n+        assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) );\n+\n+        // float tests\n+        float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f);\n+        assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) );\n+        floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f);\n+        assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) );\n+        floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f);\n+        assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) );\n+        floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f);\n+        assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) );\n+\n+        // double tests\n+        double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2);\n+        assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) );\n+        doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5);\n+        assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) );\n+        doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8);\n+        assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) );\n+        doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0);\n+        assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) );\n     }\n     \n }", "timestamp": 1106367732, "metainfo": ""}