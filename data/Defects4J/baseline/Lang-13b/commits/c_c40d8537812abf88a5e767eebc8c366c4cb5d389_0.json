{"sha": "c40d8537812abf88a5e767eebc8c366c4cb5d389", "log": "LANG-667 Add a Null-safe compare() method to ObjectUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n      *  </ul>\n      */\n     public static <T extends Comparable<? super T>> T min(T c1, T c2) {\n-        if (c1 != null && c2 != null) {\n-            return c1.compareTo(c2) < 1 ? c1 : c2;\n-        } else {\n-            return c1 != null ? c1 : c2;\n-        }                              \n+        return compare(c1, c2, true) <= 0 ? c1 : c2;\n     }\n \n     /**\n      *  </ul>\n      */\n     public static <T extends Comparable<? super T>> T max(T c1, T c2) {\n-        if (c1 != null && c2 != null) {\n-            return c1.compareTo(c2) >= 0 ? c1 : c2;\n+        return compare(c1, c2, false) >= 0 ? c1 : c2;\n+    }\n+\n+    /**\n+     * Null safe comparison of Comparables.\n+     * \n+     * @param c1  the first comparable, may be null\n+     * @param c2  the second comparable, may be null\n+     * @return a negative value if c1 < c2, zero if c1 = c2\n+     * and a positive value if c1 > c2\n+     */\n+    public static <T extends Comparable<? super T>> int compare(T c1, T c2) {\n+        return compare(c1, c2, false);\n+    }\n+\n+    /**\n+     * Null safe comparison of Comparables.\n+     * \n+     * @param c1  the first comparable, may be null\n+     * @param c2  the second comparable, may be null\n+     * @param nullGreater if true <code>null</code> is considered greater\n+     * than a Non-<code>null</code> value or if false <code>null</code> is\n+     * considered less than a Non-<code>null</code> value\n+     * @return a negative value if c1 < c2, zero if c1 = c2\n+     * and a positive value if c1 > c2\n+     * @see java.lang.Comparator#compare(Object, Object)\n+     */\n+    public static <T extends Comparable<? super T>> int compare(T c1, T c2, boolean nullGreater) {\n+        int result = 0;\n+        if ((c1 == null) || (c2 == null)) {\n+            if (nullGreater) {\n+                result = (c1 == null ? 1 : 0) - (c2 == null ? 1 : 0);\n+            } else {\n+                result = (c1 == null ? -1 : 0) - (c2 == null ? -1 : 0);\n+            }\n         } else {\n-            return c1 != null ? c1 : c2;\n-        }\n+            result = c1.compareTo(c2);\n+        }\n+        return result;\n     }\n     \n     /**\n--- a/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n     }\n \n     /**\n+     * Tests {@link ObjectUtils#compare(Comparable, Comparable, boolean)}.\n+     */\n+    public void testCompare() {\n+        Integer one = Integer.valueOf(1);\n+        Integer two = Integer.valueOf(2);\n+        Integer nullValue = null;\n+\n+        assertEquals(\"Null Null false\", 0, ObjectUtils.compare(nullValue, nullValue));\n+        assertEquals(\"Null Null true\",  0, ObjectUtils.compare(nullValue, nullValue, true));\n+\n+        assertEquals(\"Null one false\", -1, ObjectUtils.compare(nullValue, one));\n+        assertEquals(\"Null one true\",   1, ObjectUtils.compare(nullValue, one, true));\n+        \n+        assertEquals(\"one Null false\", 1, ObjectUtils.compare(one, nullValue));\n+        assertEquals(\"one Null true\", -1, ObjectUtils.compare(one, nullValue, true));\n+\n+        assertEquals(\"one two false\", -1, ObjectUtils.compare(one, two));\n+        assertEquals(\"one two true\",  -1, ObjectUtils.compare(one, two, true));\n+    }\n+\n+    /**\n      * Tests {@link ObjectUtils#clone(Object)} with a cloneable object.\n      */\n     public void testCloneOfCloneable() {", "timestamp": 1294357749, "metainfo": ""}