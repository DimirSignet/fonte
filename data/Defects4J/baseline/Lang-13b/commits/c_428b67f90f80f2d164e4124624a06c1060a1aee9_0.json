{"sha": "428b67f90f80f2d164e4124624a06c1060a1aee9", "log": "Pair implements java.util.Formattable and defers toString() handling thereto.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/tuple/Pair.java\n+++ b/src/main/java/org/apache/commons/lang3/tuple/Pair.java\n package org.apache.commons.lang3.tuple;\n \n import java.io.Serializable;\n+import java.util.Formattable;\n import java.util.Formatter;\n import java.util.Map;\n \n import org.apache.commons.lang3.ObjectUtils;\n import org.apache.commons.lang3.builder.CompareToBuilder;\n+import org.apache.commons.lang3.util.FormattableUtils;\n \n /**\n  * <p>A pair consisting of two elements.</p>\n  * @since Lang 3.0\n  * @version $Id$\n  */\n-public abstract class Pair<L, R> implements Map.Entry<L, R>, Comparable<Pair<L, R>>, Serializable {\n+public abstract class Pair<L, R> implements Map.Entry<L, R>, Comparable<Pair<L, R>>, Formattable, Serializable {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 4954918890077093841L;\n+\n     /**\n-     * The default format for the toString method.\n+     * Basic format pattern.\n      */\n-    private static final String DEFAULT_FORMAT_STRING = \"(%2$s,%3$s)\";\n+    private static final String DEFAULT_FORMAT_STRING = \"(%1$s,%2$s)\";\n \n     /**\n      * <p>Obtains an immutable pair of from two objects inferring the generic types.</p>\n     }\n \n     /**\n-     * <p>Returns a String representation of the Pair in the form: (L,R).</p>\n+     * <p>Returns a String representation of this Pair as completed by\n+     * {@link #formatTo(Formatter, int, int, int)}.</p>\n      * \n      * @return a string describing this object, not null\n      */\n     @Override\n     public String toString() {\n-        return toString(DEFAULT_FORMAT_STRING);\n+        return FormattableUtils.toString(this);\n     }\n \n     /**\n-     * <p>Returns a String representation in the given format.</p>\n+     * <p>Format this {@link Pair}.  Basic format is in the form: (L,R).</p>\n      * \n-     * <p>The format specified uses the syntax from {@link Formatter}.\n-     * There are three arguments available:</p>\n-     * <ol>\n-     * <li>The simple class name</li>\n-     * <li>The left object</li>\n-     * <li>The right object</li>\n-     * </ol>\n-     * \n-     * @param format  the format suitable for use with {@code Formatter}, not null\n-     * @return a string describing for this object, not null\n+     * @param formatter target\n+     * @param flags for output format\n+     * @param width of output\n+     * @param precision of output\n      */\n-    public String toString(String format) {\n-        return String.format(format, getClass().getSimpleName(), getLeft(), getRight());\n+    public void formatTo(Formatter formatter, int flags, int width, int precision) {\n+        FormattableUtils.append(String.format(DEFAULT_FORMAT_STRING, getLeft(), getRight()),\n+                formatter, flags, width, precision);\n     }\n \n }\n--- a/src/test/java/org/apache/commons/lang3/tuple/PairTest.java\n+++ b/src/test/java/org/apache/commons/lang3/tuple/PairTest.java\n         assertEquals(\"(Key,Value)\", pair.toString());\n     }\n \n-    @Test\n-    public void testToStringFormat() throws Exception {\n-        Pair<String, String> pair = Pair.of(\"Key\", \"Value\");\n-        assertEquals(\"ImmutablePair\", pair.toString(\"%1$s\"));\n-        assertEquals(\"Key\", pair.toString(\"%2$s\"));\n-        assertEquals(\"Value\", pair.toString(\"%3$s\"));\n-        assertEquals(\"Key: Value\", pair.toString(\"%2$s: %3$s\"));\n-        pair = Pair.of(null, null);\n-        assertEquals(\"null: null\", pair.toString(\"%2$s: %3$s\"));\n-    }\n-\n }", "timestamp": 1303424700, "metainfo": ""}