{"sha": "6148260c89f82f6cb482cff37c19d60cf7a68c52", "log": "Changing Range.containsRange to containsAll and Range.overlapsRange to overlapsWith  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Range.java\n+++ b/src/main/java/org/apache/commons/lang3/Range.java\n      *  this range; otherwise, <code>false</code>\n      * @throws IllegalArgumentException if the <code>Range</code> cannot be compared\n      */\n-    public boolean containsRange(Range<T> range) {\n+    public boolean containsAll(Range<T> range) {\n         if (range == null) {\n             return false;\n         }\n      *  range; otherwise, <code>false</code>\n      * @throws IllegalArgumentException if the <code>Range</code> cannot be compared\n      */\n-    public boolean overlapsRange(Range<T> range) {\n+    public boolean overlapsWith(Range<T> range) {\n         if (range == null) {\n             return false;\n         }\n--- a/src/test/java/org/apache/commons/lang3/RangeTest.java\n+++ b/src/test/java/org/apache/commons/lang3/RangeTest.java\n \n     // --------------------------------------------------------------------------\n \n-    public void testContainsRange() {\n+    public void testContainsAll() {\n \n         // null handling\n-        assertFalse(intRange.containsRange(null));\n+        assertFalse(intRange.containsAll(null));\n \n         // easy inside range\n-        assertTrue(intRange.containsRange(Range.between(12, 18)));\n+        assertTrue(intRange.containsAll(Range.between(12, 18)));\n \n         // outside range on each side\n-        assertFalse(intRange.containsRange(Range.between(32, 45)));\n-        assertFalse(intRange.containsRange(Range.between(2, 8)));\n+        assertFalse(intRange.containsAll(Range.between(32, 45)));\n+        assertFalse(intRange.containsAll(Range.between(2, 8)));\n \n         // equals range\n-        assertTrue(intRange.containsRange(Range.between(10, 20)));\n+        assertTrue(intRange.containsAll(Range.between(10, 20)));\n \n         // overlaps\n-        assertFalse(intRange.containsRange(Range.between(9, 14)));\n-        assertFalse(intRange.containsRange(Range.between(16, 21)));\n+        assertFalse(intRange.containsAll(Range.between(9, 14)));\n+        assertFalse(intRange.containsAll(Range.between(16, 21)));\n \n         // touches lower boundary\n-        assertTrue(intRange.containsRange(Range.between(10, 19)));\n-        assertFalse(intRange.containsRange(Range.between(10, 21)));\n+        assertTrue(intRange.containsAll(Range.between(10, 19)));\n+        assertFalse(intRange.containsAll(Range.between(10, 21)));\n \n         // touches upper boundary\n-        assertTrue(intRange.containsRange(Range.between(11, 20)));\n-        assertFalse(intRange.containsRange(Range.between(9, 20)));\n+        assertTrue(intRange.containsAll(Range.between(11, 20)));\n+        assertFalse(intRange.containsAll(Range.between(9, 20)));\n         \n         // negative\n-        assertFalse(intRange.containsRange(Range.between(-11, -18)));\n-\n-    }\n-\n-    public void testOverlapsRange() {\n+        assertFalse(intRange.containsAll(Range.between(-11, -18)));\n+\n+    }\n+\n+    public void testOverlapsWith() {\n \n         // null handling\n-        assertFalse(intRange.overlapsRange(null));\n+        assertFalse(intRange.overlapsWith(null));\n \n         // easy inside range\n-        assertTrue(intRange.overlapsRange(Range.between(12, 18)));\n+        assertTrue(intRange.overlapsWith(Range.between(12, 18)));\n \n         // outside range on each side\n-        assertFalse(intRange.overlapsRange(Range.between(32, 45)));\n-        assertFalse(intRange.overlapsRange(Range.between(2, 8)));\n+        assertFalse(intRange.overlapsWith(Range.between(32, 45)));\n+        assertFalse(intRange.overlapsWith(Range.between(2, 8)));\n \n         // equals range\n-        assertTrue(intRange.overlapsRange(Range.between(10, 20)));\n+        assertTrue(intRange.overlapsWith(Range.between(10, 20)));\n \n         // overlaps\n-        assertTrue(intRange.overlapsRange(Range.between(9, 14)));\n-        assertTrue(intRange.overlapsRange(Range.between(16, 21)));\n+        assertTrue(intRange.overlapsWith(Range.between(9, 14)));\n+        assertTrue(intRange.overlapsWith(Range.between(16, 21)));\n \n         // touches lower boundary\n-        assertTrue(intRange.overlapsRange(Range.between(10, 19)));\n-        assertTrue(intRange.overlapsRange(Range.between(10, 21)));\n+        assertTrue(intRange.overlapsWith(Range.between(10, 19)));\n+        assertTrue(intRange.overlapsWith(Range.between(10, 21)));\n \n         // touches upper boundary\n-        assertTrue(intRange.overlapsRange(Range.between(11, 20)));\n-        assertTrue(intRange.overlapsRange(Range.between(9, 20)));\n+        assertTrue(intRange.overlapsWith(Range.between(11, 20)));\n+        assertTrue(intRange.overlapsWith(Range.between(9, 20)));\n         \n         // negative\n-        assertFalse(intRange.overlapsRange(Range.between(-11, -18)));\n+        assertFalse(intRange.overlapsWith(Range.between(-11, -18)));\n \n     }\n ", "timestamp": 1299219176, "metainfo": ""}