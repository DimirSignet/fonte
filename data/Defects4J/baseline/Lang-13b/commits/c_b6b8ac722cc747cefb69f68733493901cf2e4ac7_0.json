{"sha": "b6b8ac722cc747cefb69f68733493901cf2e4ac7", "log": "merge CharSetUtils String[] and String method forms to String...  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharSetUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/CharSetUtils.java\n      * @param set  the character set to use for manipulation, may be null\n      * @return the modified String, {@code null} if null string input\n      */\n-    public static String squeeze(String str, String set) {\n-        if (StringUtils.isEmpty(str) || StringUtils.isEmpty(set)) {\n-            return str;\n-        }\n-        String[] strs = new String[1];\n-        strs[0] = set;\n-        return squeeze(str, strs);\n-    }\n-\n-    /**\n-     * <p>Squeezes any repetitions of a character that is mentioned in the\n-     * supplied set.</p>\n-     *\n-     * <p>An example is:</p>\n-     * <ul>\n-     *   <li>squeeze(&quot;hello&quot;, {&quot;el&quot;}) => &quot;helo&quot;</li>\n-     * </ul>\n-     * \n-     * @see CharSet#getInstance(java.lang.String) for set-syntax.\n-     * @param str  the string to squeeze, may be null\n-     * @param set  the character set to use for manipulation, may be null\n-     * @return the modified String, {@code null} if null string input\n-     */\n-    public static String squeeze(String str, String[] set) {\n-        if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {\n+    public static String squeeze(String str, String... set) {\n+        if (StringUtils.isEmpty(str) || deepEmpty(set)) {\n             return str;\n         }\n         CharSet chars = CharSet.getInstance(set);\n      *\n      * @see CharSet#getInstance(java.lang.String) for set-syntax.\n      * @param str  String to count characters in, may be null\n-     * @param set  String set of characters to count, may be null\n-     * @return the character count, zero if null string input\n-     */\n-    public static int count(String str, String set) {\n-        if (StringUtils.isEmpty(str) || StringUtils.isEmpty(set)) {\n-            return 0;\n-        }\n-        String[] strs = new String[1];\n-        strs[0] = set;\n-        return count(str, strs);\n-    }\n-    \n-    /**\n-     * <p>Takes an argument in set-syntax, see evaluateSet,\n-     * and returns the number of characters present in the specified string.</p>\n-     *\n-     * <p>An example would be:</p>\n-     * <ul>\n-     *  <li>count(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns 2.</li>\n-     * </ul>\n-     *\n-     * @see CharSet#getInstance(java.lang.String) for set-syntax.\n-     * @param str  String to count characters in, may be null\n      * @param set  String[] set of characters to count, may be null\n      * @return the character count, zero if null string input\n      */\n-    public static int count(String str, String[] set) {\n-        if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {\n+    public static int count(String str, String... set) {\n+        if (StringUtils.isEmpty(str) || deepEmpty(set)) {\n             return 0;\n         }\n         CharSet chars = CharSet.getInstance(set);\n         int count = 0;\n-        char[] chrs = str.toCharArray();\n-        int sz = chrs.length;\n-        for(int i=0; i<sz; i++) {\n-            if(chars.contains(chrs[i])) {\n+        for (char c : str.toCharArray()) {\n+            if (chars.contains(c)) {\n                 count++;\n             }\n         }\n      *\n      * @see CharSet#getInstance(java.lang.String) for set-syntax.\n      * @param str  String to keep characters from, may be null\n-     * @param set  String set of characters to keep, may be null\n-     * @return the modified String, {@code null} if null string input\n-     * @since 2.0\n-     */\n-    public static String keep(String str, String set) {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0 || StringUtils.isEmpty(set)) {\n-            return \"\";\n-        }\n-        String[] strs = new String[1];\n-        strs[0] = set;\n-        return keep(str, strs);\n-    }\n-    \n-    /**\n-     * <p>Takes an argument in set-syntax, see evaluateSet,\n-     * and keeps any of characters present in the specified string.</p>\n-     *\n-     * <p>An example would be:</p>\n-     * <ul>\n-     *  <li>keep(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;})\n-     *   returns &quot;eo&quot;</li>\n-     * </ul>\n-     *\n-     * @see CharSet#getInstance(java.lang.String) for set-syntax.\n-     * @param str  String to keep characters from, may be null\n      * @param set  String[] set of characters to keep, may be null\n      * @return the modified String, {@code null} if null string input\n      * @since 2.0\n      */\n-    public static String keep(String str, String[] set) {\n+    public static String keep(String str, String... set) {\n         if (str == null) {\n             return null;\n         }\n-        if (str.length() == 0 || ArrayUtils.isEmpty(set)) {\n+        if (str.length() == 0 || deepEmpty(set)) {\n             return \"\";\n         }\n         return modify(str, set, true);\n      *\n      * @see CharSet#getInstance(java.lang.String) for set-syntax.\n      * @param str  String to delete characters from, may be null\n-     * @param set  String set of characters to delete, may be null\n-     * @return the modified String, {@code null} if null string input\n-     */\n-    public static String delete(String str, String set) {\n-        if (StringUtils.isEmpty(str) || StringUtils.isEmpty(set)) {\n-            return str;\n-        }\n-        String[] strs = new String[1];\n-        strs[0] = set;\n-        return delete(str, strs);\n-    }\n-    \n-    /**\n-     * <p>Takes an argument in set-syntax, see evaluateSet,\n-     * and deletes any of characters present in the specified string.</p>\n-     *\n-     * <p>An example would be:</p>\n-     * <ul>\n-     *  <li>delete(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns\n-     *   &quot;hll&quot;</li>\n-     * </ul>\n-     *\n-     * @see CharSet#getInstance(java.lang.String) for set-syntax.\n-     * @param str  String to delete characters from, may be null\n      * @param set  String[] set of characters to delete, may be null\n      * @return the modified String, {@code null} if null string input\n      */\n-    public static String delete(String str, String[] set) {\n-        if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {\n+    public static String delete(String str, String... set) {\n+        if (StringUtils.isEmpty(str) || deepEmpty(set)) {\n             return str;\n         }\n         return modify(str, set, false);\n         return buffer.toString();\n     }\n \n+    private static boolean deepEmpty(String[] strings) {\n+        if (strings != null) {\n+            for (String s : strings) {\n+                if (StringUtils.isNotEmpty(s)) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n }", "timestamp": 1301851171, "metainfo": ""}