{"sha": "943a9ba994b3688d3d9c847f98cdedf0fc7136ad", "log": "Typos.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java\n      * When a public class has a default access superclass with public members,\n      * these members are accessible. Calling them from compiled code works fine.\n      * Unfortunately, on some JVMs, using reflection to invoke these members\n-     * seems to (wrongly) to prevent access even when the modifer is public.\n+     * seems to (wrongly) prevent access even when the modifier is public.\n      * Calling setAccessible(true) solves the problem but will only work from\n      * sufficiently privileged code. Better workarounds would be gratefully\n      * accepted.", "timestamp": 1309980622, "metainfo": ""}