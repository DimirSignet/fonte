{"sha": "e4a88f548da9c63dc9d57b42ecd9c8462ece985d", "log": "Adding lots of @since 3.0s  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n      * @param values  the values to test, may be {@code null} or empty\n      * @return the first value from {@code values} which is not {@code null},\n      *  or {@code null} if there are no non-null values\n+     * @since 3.0\n      */\n     public static <T> T firstNonNull(T... values) {\n         if (values != null) {\n--- a/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n      * While {@link #escapeJava(String)} is the expected method of use, this \n      * object allows the Java escaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     public static final CharSequenceTranslator ESCAPE_JAVA = \n           new LookupTranslator(\n      * While {@link #escapeEcmaScript(String)} is the expected method of use, this \n      * object allows the EcmaScript escaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     public static final CharSequenceTranslator ESCAPE_ECMASCRIPT = \n         new AggregateTranslator(\n      * While {@link #escapeXml(String)} is the expected method of use, this \n      * object allows the XML escaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     public static final CharSequenceTranslator ESCAPE_XML = \n         new AggregateTranslator(\n      * While {@link #escapeHtml3(String)} is the expected method of use, this \n      * object allows the HTML escaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     public static final CharSequenceTranslator ESCAPE_HTML3 = \n         new AggregateTranslator(\n      * While {@link #escapeHtml4(String)} is the expected method of use, this \n      * object allows the HTML escaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     public static final CharSequenceTranslator ESCAPE_HTML4 = \n         new AggregateTranslator(\n      * While {@link #escapeCsv(String)} is the expected method of use, this \n      * object allows the CSV escaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     public static final CharSequenceTranslator ESCAPE_CSV = new CsvEscaper();\n \n      * While {@link #unescapeJava(String)} is the expected method of use, this \n      * object allows the Java unescaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     // TODO: throw \"illegal character: \\92\" as an Exception if a \\ on the end of the Java (as per the compiler)?\n     public static final CharSequenceTranslator UNESCAPE_JAVA = \n      * While {@link #unescapeEcmaScript(String)} is the expected method of use, this \n      * object allows the EcmaScript unescaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     public static final CharSequenceTranslator UNESCAPE_ECMASCRIPT = UNESCAPE_JAVA;\n \n      * While {@link #unescapeHtml3(String)} is the expected method of use, this \n      * object allows the HTML unescaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     public static final CharSequenceTranslator UNESCAPE_HTML3 = \n         new AggregateTranslator(\n      * While {@link #unescapeHtml4(String)} is the expected method of use, this \n      * object allows the HTML unescaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     public static final CharSequenceTranslator UNESCAPE_HTML4 = \n         new AggregateTranslator(\n      * While {@link #unescapeXml(String)} is the expected method of use, this \n      * object allows the XML unescaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     public static final CharSequenceTranslator UNESCAPE_XML = \n         new AggregateTranslator(\n      * While {@link #unescapeCsv(String)} is the expected method of use, this \n      * object allows the CSV unescaping functionality to be used \n      * as the foundation for a custom translator. \n+     *\n+     * @since 3.0\n      */\n     public static final CharSequenceTranslator UNESCAPE_CSV = new CsvUnescaper();\n \n      *\n      * @param input  String to escape values in, may be null\n      * @return String with escaped values, {@code null} if null string input\n+     *\n+     * @since 3.0\n      */\n     public static final String escapeEcmaScript(String input) {\n         return ESCAPE_ECMASCRIPT.translate(input);\n      * @see #unescapeJava(String)\n      * @param input  the {@code String} to unescape, may be null\n      * @return A new unescaped {@code String}, {@code null} if null string input\n+     *\n+     * @since 3.0\n      */\n     public static final String unescapeEcmaScript(String input) {\n         return UNESCAPE_ECMASCRIPT.translate(input);\n      * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n      * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n      * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n+     * \n+     * @since 3.0\n      */\n     public static final String escapeHtml4(String input) {\n         return ESCAPE_HTML4.translate(input);\n      * @param input  the {@code String} to escape, may be null\n      * @return a new escaped {@code String}, {@code null} if null string input\n      * \n+     * @since 3.0\n      */\n     public static final String escapeHtml3(String input) {\n         return ESCAPE_HTML3.translate(input);\n      *\n      * @param input  the {@code String} to unescape, may be null\n      * @return a new unescaped {@code String}, {@code null} if null string input\n+     * \n+     * @since 3.0\n      */\n     public static final String unescapeHtml4(String input) {\n         return UNESCAPE_HTML4.translate(input);\n      *\n      * @param input  the {@code String} to unescape, may be null\n      * @return a new unescaped {@code String}, {@code null} if null string input\n+     * \n+     * @since 3.0\n      */\n     public static final String unescapeHtml3(String input) {\n         return UNESCAPE_HTML3.translate(input);\n--- a/src/main/java/org/apache/commons/lang3/Validate.java\n+++ b/src/main/java/org/apache/commons/lang3/Validate.java\n      * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IllegalArgumentException if the character sequence is blank\n      * @see #notBlank(CharSequence)\n+     * \n+     * @since 3.0\n      */\n     public static <T extends CharSequence> T notBlank(T chars, String message, Object... values) {\n         if (chars == null) {\n      * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IllegalArgumentException if the character sequence is blank\n      * @see #notBlank(CharSequence, String, Object...)\n+     * \n+     * @since 3.0\n      */\n     public static <T extends CharSequence> T notBlank(T chars) {\n         return notBlank(chars, DEFAULT_NOT_BLANK_EX_MESSAGE);\n      * @throws NullPointerException if the array is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Object[], int)\n+     * \n+     * @since 3.0\n      */\n     public static <T> T[] validIndex(T[] array, int index, String message, Object... values) {\n         Validate.notNull(array);\n      * @throws NullPointerException if the array is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Object[], int, String, Object...)\n+     * \n+     * @since 3.0\n      */\n     public static <T> T[] validIndex(T[] array, int index) {\n         return validIndex(array, index, DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE, Integer.valueOf(index));\n      * @throws NullPointerException if the collection is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Collection, int)\n+     * \n+     * @since 3.0\n      */\n     public static <T extends Collection<?>> T validIndex(T collection, int index, String message, Object... values) {\n         Validate.notNull(collection);\n      * @throws NullPointerException if the collection is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Collection, int, String, Object...)\n+     * \n+     * @since 3.0\n      */\n     public static <T extends Collection<?>> T validIndex(T collection, int index) {\n         return validIndex(collection, index, DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE, Integer.valueOf(index));\n      * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(CharSequence, int)\n+     * \n+     * @since 3.0\n      */\n     public static <T extends CharSequence> T validIndex(T chars, int index, String message, Object... values) {\n         Validate.notNull(chars);\n      * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(CharSequence, int, String, Object...)\n+     * \n+     * @since 3.0\n      */\n     public static <T extends CharSequence> T validIndex(T chars, int index) {\n         return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, Integer.valueOf(index));\n      * @param expression  the boolean expression to check \n      * @throws IllegalStateException if expression is {@code false}\n      * @see #validState(boolean, String, Object...)\n+     * \n+     * @since 3.0\n      */\n     public static void validState(boolean expression) {\n         if (expression == false) {\n      * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalStateException if expression is {@code false}\n      * @see #validState(boolean)\n+     * \n+     * @since 3.0\n      */\n     public static void validState(boolean expression, String message, Object... values) {\n         if (expression == false) {\n      * @param pattern  the regular expression pattern, not null\n      * @throws IllegalArgumentException if the character sequence does not match the pattern\n      * @see #matchesPattern(CharSequence, String, String, Object...)\n+     * \n+     * @since 3.0\n      */\n     public static void matchesPattern(CharSequence input, String pattern) {\n         if (Pattern.matches(pattern, input) == false) {\n      * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if the character sequence does not match the pattern\n      * @see #matchesPattern(CharSequence, String)\n+     * \n+     * @since 3.0\n      */\n     public static void matchesPattern(CharSequence input, String pattern, String message, Object... values) {\n         if (Pattern.matches(pattern, input) == false) {\n      * @param value  the object to validate, not null\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #inclusiveBetween(Object, Object, Comparable, String, Object...)\n+     * \n+     * @since 3.0\n      */\n     public static <T> void inclusiveBetween(T start, T end, Comparable<T> value) {\n         if (value.compareTo(start) < 0 || value.compareTo(end) > 0) {\n      * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #inclusiveBetween(Object, Object, Comparable)\n+     * \n+     * @since 3.0\n      */\n     public static <T> void inclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values) {\n         if (value.compareTo(start) < 0 || value.compareTo(end) > 0) {\n      * @param value  the object to validate, not null\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #exclusiveBetween(Object, Object, Comparable, String, Object...)\n+     * \n+     * @since 3.0\n      */\n     public static <T> void exclusiveBetween(T start, T end, Comparable<T> value) {\n         if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0) {\n      * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if the value falls out of the boundaries\n      * @see #exclusiveBetween(Object, Object, Comparable)\n+     * \n+     * @since 3.0\n      */\n     public static <T> void exclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values) {\n         if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0) {\n      * @param obj  the object to check, null throws an exception\n      * @throws IllegalArgumentException if argument is not of specified class\n      * @see #isInstanceOf(Class, Object, String, Object...)\n+     * \n+     * @since 3.0\n      */\n     public static void isInstanceOf(Class<?> type, Object obj) {\n         if (type.isInstance(obj) == false) {\n      * @param values  the optional values for the formatted exception message, null array not recommended\n      * @throws IllegalArgumentException if argument is not of specified class\n      * @see #isInstanceOf(Class, Object)\n+     * \n+     * @since 3.0\n      */\n     public static void isInstanceOf(Class<?> type, Object obj, String message, Object... values) {\n         if (type.isInstance(obj) == false) {\n      * @param type  the class to check, not null\n      * @throws IllegalArgumentException if argument can not be converted to the specified class\n      * @see #isAssignableFrom(Class, Class, String, Object...)\n+     * \n+     * @since 3.0\n      */\n     public static void isAssignableFrom(Class<?> superType, Class<?> type) {\n         if (superType.isAssignableFrom(type) == false) {\n--- a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java\n \n     /**\n      * Which field names to exclude from output. Intended for fields like <code>\"password\"</code>.\n+     *\n+     * @since 3.0 this is protected instead of private\n      */\n     protected String[] excludeFieldNames;\n \n--- a/src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java\n  * </p>\n  *\n  * @author Apache Software Foundation\n+ * @since 3.0\n  * @version $Id$\n  * @param <T> the type of the object managed by this initializer class\n  */\n--- a/src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java\n  * </p>\n  *\n  * @author Apache Software Foundation\n+ * @since 3.0\n  * @version $Id$\n  * @param <T> the type of the object managed by this initializer class\n  */\n--- a/src/main/java/org/apache/commons/lang3/concurrent/BackgroundInitializer.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/BackgroundInitializer.java\n  * operation is complete or to cancel the operation.\n  * </p>\n  *\n+ * @since 3.0\n  * @version $Id$\n  * @param <T> the type of the object managed by this initializer class\n  */\n--- a/src/main/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializer.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializer.java\n  *\n  * </p>\n  *\n+ * @since 3.0\n  * @version $Id$\n  * @param <T> the type of the object managed by this initializer class\n  */\n--- a/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentException.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentException.java\n  * </p>\n  *\n  * @author Apache Software Foundation\n+ * @since 3.0\n  * @version $Id$\n  */\n public class ConcurrentException extends Exception {\n--- a/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java\n  * </p>\n  *\n  * @author Apache Software Foundation\n+ * @since 3.0\n  * @version $Id$\n  * @param <T> the type of the object managed by this initializer class\n  */\n--- a/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java\n  * </p>\n  *\n  * @author Apache Software Foundation\n+ * @since 3.0\n  * @version $Id$\n  */\n public class ConcurrentRuntimeException extends RuntimeException {\n--- a/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java\n  * </p>\n  *\n  * @author Apache Software Foundation\n+ * @since 3.0\n  * @version $Id$\n  */\n public class ConcurrentUtils {\n--- a/src/main/java/org/apache/commons/lang3/concurrent/ConstantInitializer.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/ConstantInitializer.java\n  * </p>\n  *\n  * @author Apache Software Foundation\n+ * @since 3.0\n  * @version $Id$\n  * @param <T> the type of the object managed by this initializer\n  */\n--- a/src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java\n  * </p>\n  *\n  * @author Apache Software Foundation\n+ * @since 3.0\n  * @version $Id$\n  * @param <T> the type of the object managed by this initializer class\n  */\n--- a/src/main/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.java\n  * by {@code MultiBackgroundInitializer} waits forever.\n  * </p>\n  *\n+ * @since 3.0\n  * @version $Id$\n  */\n public class MultiBackgroundInitializer\n--- a/src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java\n  * resources. After that {@link #acquire()} must not be called any more.\n  * </p>\n  *\n- * @version $Id:$\n+ * @since 3.0\n+ * @version $Id$\n  */\n public class TimedSemaphore {\n     /**\n--- a/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n      *\n      * @param seq  the CharSequence to append\n      * @return this, to enable chaining\n+     * @since 3.0\n      */\n     public StrBuilder append(CharSequence seq) {\n         if (seq == null) {\n      * @param startIndex  the start index, inclusive, must be valid\n      * @param length  the length to append, must be valid\n      * @return this, to enable chaining\n+     * @since 3.0\n      */\n     public StrBuilder append(CharSequence seq, int startIndex, int length) {\n         if (seq == null) {\n      *\n      * @param ch  the value to append\n      * @return this, to enable chaining\n+     * @since 3.0\n      */\n     public StrBuilder append(char ch) {\n         int len = length();\n     //-----------------------------------------------------------------------\n     /**\n      * {@inheritDoc}\n+     * @since 3.0\n      */\n     public CharSequence subSequence(int startIndex, int endIndex) {\n       if (startIndex < 0) {", "timestamp": 1300249618, "metainfo": ""}