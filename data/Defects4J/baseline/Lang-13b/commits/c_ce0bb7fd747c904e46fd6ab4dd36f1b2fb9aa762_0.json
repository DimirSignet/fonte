{"sha": "ce0bb7fd747c904e46fd6ab4dd36f1b2fb9aa762", "log": "added test code for serialization / deserialization   ", "commit": "\n--- a/src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java\n  */\n \n import java.io.ByteArrayOutputStream;\n+import java.io.ByteArrayInputStream;\n import java.io.PrintStream;\n import java.io.PrintWriter;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.Serializable;\n \n import junit.framework.*;\n import junit.textui.TestRunner;\n  * Tests the org.apache.commons.lang.exception.NestableException class.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableExceptionTestCase.java,v 1.5 2002/09/11 19:00:52 stevencaswell Exp $\n+ * @version $Id: NestableExceptionTestCase.java,v 1.6 2002/10/09 05:28:53 sullis Exp $\n  */\n public class NestableExceptionTestCase extends AbstractNestableTestCase\n {\n         return Exception.class;\n     }\n     \n+    public void testSerialization()\n+    {\n+    \tRuntimeException nestedEx = new RuntimeException(\"nested exception message\");\n+    \tNestableExceptionTester1 ex = new NestableExceptionTester1(\"serialization test\", nestedEx);\n+\n+\t\tassertTrue( \"implements java.io.Serializable\", nestedEx instanceof java.io.Serializable);\n+\t\t\n+\t\tassertTrue( \"implements java.io.Serializable\", ex instanceof java.io.Serializable);\n+\t\t\n+\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\t\tByteArrayInputStream bais = null;\n+\t\tObjectOutputStream oos = null;\n+\t\tObjectInputStream ois = null;\n+\t\t\n+\t\ttry\n+\t\t{\n+\t\t\toos = new ObjectOutputStream(baos);\n+\t\t\toos.writeObject(ex);\n+\t\t\toos.flush();\n+\t\t\tbais = new ByteArrayInputStream(baos.toByteArray());\n+\t\t\tois = new ObjectInputStream(bais);\n+\t\t\tNestableExceptionTester1 deserializedEx = (NestableExceptionTester1) ois.readObject();\n+\t\t\tassertEquals( \n+\t\t\t\t\t\"getThrowableCount() return value\",\n+\t\t\t\t\t\tex.getThrowableCount(),\n+\t\t\t\t\t\tdeserializedEx.getThrowableCount());\n+\t\t\t\n+\t\t\tfor (int i = 0; i < ex.getThrowableCount(); i++)\n+\t\t\t{\n+\t\t\t\tThrowable t = ex.getThrowable(i);\n+\t\t\t\tThrowable deserializedThrowable = deserializedEx.getThrowable(i);\n+\t\t\t\t\n+\t\t\t\tassertEquals( t.getClass(),\n+\t\t\t\t\t\tdeserializedThrowable.getClass());\n+\t\t\t\t\t\t\n+\t\t\t\tassertEquals(\n+\t\t\t\t\tt.getMessage(),\n+\t\t\t\t\tdeserializedThrowable.getMessage());\n+\t\t\t}\n+\t\t}\n+\t\tcatch (Exception caughtEx)\n+\t\t{\n+\t\t\tfail(\"an unexpected exception occurred: \"\n+\t\t\t\t\t+ caughtEx.toString());\n+\t\t}\n+\t\tfinally\n+\t\t{\n+\t\t\tif (null != oos)\n+\t\t\t{\n+\t\t\t\ttry\n+\t\t\t\t{\n+\t\t\t\t\toos.close();\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ignored)\n+\t\t\t\t{\n+\t\t\t\t\t// intentionally empty\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t\n+    }\n }\n \n /**", "timestamp": 1034141333, "metainfo": ""}