{"sha": "c61d9e7379dfa114fe113de86eb871428e2da2e2", "log": "Fix wrong cast.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n         }\n         Constructor<T> result = null;\n         /*\n-         * Class.getConstructors() is documented to return Constructor<T> so as\n-         * long as the array is not subsequently modified, everything's fine:\n+         * (1) Class.getConstructors() is documented to return Constructor<T> so as\n+         * long as the array is not subsequently modified, everything's fine.\n          */\n-        @SuppressWarnings(\"unchecked\") // cls is of type T\n-        Constructor<T>[] ctors = cls.getConstructors();\n+        Constructor<?>[] ctors = cls.getConstructors();\n \n         // return best match:\n-        for (Constructor<T> ctor : ctors) {\n+        for (Constructor<?> ctor : ctors) {\n             // compare parameters\n             if (ClassUtils.isAssignable(parameterTypes, ctor.getParameterTypes(), true)) {\n                 // get accessible version of constructor\n                     if (result == null\n                             || MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result\n                                     .getParameterTypes(), parameterTypes) < 0) {\n-                        result = ctor;\n+                        // temporary variable for annotation, see comment above (1)\n+                        @SuppressWarnings(\"unchecked\") \n+                        Constructor<T> constructor = (Constructor<T>)ctor;\n+                        result = constructor;\n                     }\n                 }\n             }", "timestamp": 1281595663, "metainfo": ""}