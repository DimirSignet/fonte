{"sha": "a3cabe238c4fe7e5f2781bfad8ea92aeea5a5710", "log": "Patch from Michael Rudolf in LANG-522 applied with additional String constructor tests added  ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n         this.value = value.byteValue();\n     }\n \n+    /**\n+     * Constructs a new MutableByte parsing the given string.\n+     * \n+     * @param value\n+     *                  the string to parse.\n+     * @throws NumberFormatException\n+     *                  if the string cannot be parsed into a byte\n+     */\n+    public MutableByte(String value) throws NumberFormatException {\n+        super();\n+        this.value = Byte.parseByte(value);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the value as a Byte instance.\n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n         this.value = value.doubleValue();\n     }\n \n+    /**\n+     * Constructs a new MutableDouble parsing the given string.\n+     * \n+     * @param value\n+     *                  the string to parse.\n+     * @throws NumberFormatException\n+     *                  if the string cannot be parsed into a double\n+     */\n+    public MutableDouble(String value) throws NumberFormatException {\n+        super();\n+        this.value = Double.parseDouble(value);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the value as a Double instance.\n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n         this.value = value.floatValue();\n     }\n \n+    /**\n+     * Constructs a new MutableFloat parsing the given string.\n+     * \n+     * @param value\n+     *                  the string to parse.\n+     * @throws NumberFormatException\n+     *                  if the string cannot be parsed into a float\n+     */\n+    public MutableFloat(String value) throws NumberFormatException {\n+        super();\n+        this.value = Float.parseFloat(value);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the value as a Float instance.\n--- a/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n         this.value = value.intValue();\n     }\n \n+    /**\n+     * Constructs a new MutableInt parsing the given string.\n+     * \n+     * @param value\n+     *                  the string to parse.\n+     * @throws NumberFormatException\n+     *                  if the string cannot be parsed into an int\n+     */\n+    public MutableInt(String value) throws NumberFormatException {\n+        super();\n+        this.value = Integer.parseInt(value);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the value as a Integer instance.\n--- a/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n         this.value = value.longValue();\n     }\n \n+    /**\n+     * Constructs a new MutableLong parsing the given string.\n+     * \n+     * @param value\n+     *                  the string to parse.\n+     * @throws NumberFormatException\n+     *                  if the string cannot be parsed into a long\n+     */\n+    public MutableLong(String value) throws NumberFormatException {\n+        super();\n+        this.value = Long.parseLong(value);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the value as a Long instance.\n--- a/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n         this.value = value.shortValue();\n     }\n \n+    /**\n+     * Constructs a new MutableShort parsing the given string.\n+     * \n+     * @param value\n+     *                  the string to parse.\n+     * @throws NumberFormatException\n+     *                  if the string cannot be parsed into a short\n+     */\n+    public MutableShort(String value) throws NumberFormatException {\n+        super();\n+        this.value = Short.parseShort(value);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the value as a Short instance.\n--- a/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n         \n         assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue());\n         assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue());\n+\n+        assertEquals((byte) 2, new MutableByte(\"2\").byteValue());\n+\n         try {\n-            new MutableByte(null);\n+            new MutableByte((Number)null);\n             fail();\n         } catch (NullPointerException ex) {}\n     }\n--- a/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n         \n         assertEquals(2d, new MutableDouble(new Double(2d)).doubleValue(), 0.0001d);\n         assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d);\n+        \n+        assertEquals(2d, new MutableDouble(\"2.0\").doubleValue(), 0.0001d);\n+\n         try {\n-            new MutableDouble(null);\n+            new MutableDouble((Number)null);\n             fail();\n         } catch (NullPointerException ex) {}\n     }\n--- a/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n         \n         assertEquals(2f, new MutableFloat(new Float(2f)).floatValue(), 0.0001f);\n         assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f);\n+\n+        assertEquals(2f, new MutableDouble(\"2.0\").floatValue(), 0.0001f);\n+\n         try {\n-            new MutableFloat(null);\n+            new MutableFloat((Number)null);\n             fail();\n         } catch (NullPointerException ex) {}\n     }\n--- a/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n         \n         assertEquals(2, new MutableInt(new Integer(2)).intValue());\n         assertEquals(3, new MutableInt(new MutableLong(3)).intValue());\n+\n+        assertEquals(2, new MutableInt(\"2\").intValue());\n+\n         try {\n-            new MutableInt(null);\n+            new MutableInt((Number)null);\n             fail();\n         } catch (NullPointerException ex) {}\n     }\n--- a/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n         \n         assertEquals(2, new MutableLong(new Long(2)).longValue());\n         assertEquals(3, new MutableLong(new MutableLong(3)).longValue());\n+\n+        assertEquals(2, new MutableLong(\"2\").longValue());\n+\n         try {\n-            new MutableLong(null);\n+            new MutableLong((Number)null);\n             fail();\n         } catch (NullPointerException ex) {}\n     }\n--- a/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n         \n         assertEquals((short) 2, new MutableShort(new Short((short) 2)).shortValue());\n         assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue());\n+\n+        assertEquals((short) 2, new MutableShort(\"2\").shortValue());\n+\n         try {\n-            new MutableShort(null);\n+            new MutableShort((Number)null);\n             fail();\n         } catch (NullPointerException ex) {}\n     }", "timestamp": 1256342447, "metainfo": ""}