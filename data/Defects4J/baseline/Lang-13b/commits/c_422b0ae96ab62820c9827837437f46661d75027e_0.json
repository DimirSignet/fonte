{"sha": "422b0ae96ab62820c9827837437f46661d75027e", "log": "Fixed checkstyle warnings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java\n      * A constant future can also be useful in testing.\n      * </p>\n      *\n+     * @param <T> the type of the value used by this {@code Future} object\n      * @param value  the constant value to return, may be null\n      * @return an instance of Future that will return the value, never null\n      */\n         return new ConstantFuture<T>(value);\n     }\n \n+    /**\n+     * A specialized {@code Future} implementation which wraps a constant value.\n+     * @param <T> the type of the value wrapped by this class\n+     */\n     static final class ConstantFuture<T> implements Future<T> {\n         /** The constant value. */\n         private final T value;\n \n+        /**\n+         * Creates a new instance of {@code ConstantFuture} and initializes it\n+         * with the constant value.\n+         *\n+         * @param value the value (may be <b>null</b>)\n+         */\n         ConstantFuture(T value) {\n             this.value = value;\n         }\n \n+        /**\n+         * {@inheritDoc} This implementation always returns <b>true</b> because\n+         * the constant object managed by this {@code Future} implementation is\n+         * always available.\n+         */\n         public boolean isDone() {\n             return true;\n         }\n \n+        /**\n+         * {@inheritDoc} This implementation just returns the constant value.\n+         */\n         public T get() {\n             return value;\n         }\n \n+        /**\n+         * {@inheritDoc} This implementation just returns the constant value; it\n+         * does not block, therefore the timeout has no meaning.\n+         */\n         public T get(long timeout, TimeUnit unit) {\n             return value;\n         }\n \n+        /**\n+         * {@inheritDoc} This implementation always returns <b>false</b>; there\n+         * is no background process which could be cancelled.\n+         */\n         public boolean isCancelled() {\n             return false;\n         }\n \n+        /**\n+         * {@inheritDoc} The cancel operation is not supported. This\n+         * implementation always returns <b>false</b>.\n+         */\n         public boolean cancel(boolean mayInterruptIfRunning) {\n             return false;\n         }", "timestamp": 1300309118, "metainfo": ""}