{"sha": "703f966c5b4c156b8f62c002c4c0667d3830968c", "log": "Javadoc changes bug 22480, from Pete Gieser   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n  * @author Tim O'Brien\n+ * @author Pete Gieser\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.22 2003/08/03 23:29:19 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.23 2003/08/16 11:04:46 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n+     * @param tolerance  search for value within plus/minus this amount\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n      * <p>The method returns <code>false</code> if a <code>null</code> array\n      * is passed in.</p>\n      *\n-     * @param array the array to search\n-     * @param valueToFind the value to find\n-     * @param tolerance the array contains the tolerance of the search.\n+     * @param array  the array to search\n+     * @param valueToFind  the value to find\n+     * @param tolerance  the array contains the tolerance of the search\n+     * @return true if value falling within tolerance is in array\n      */\n     public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {\n         return (indexOf(array, valueToFind, 0, tolerance) != -1);\n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n \n /**\n  * <p>A set of characters.</p>\n- * \n+ *\n  * <p>This class is immutable, but subclasses may not be.</p>\n  *\n  * @author Henri Yandell\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n+ * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: CharSet.java,v 1.14 2003/08/07 21:12:19 bayard Exp $\n+ * @version $Id: CharSet.java,v 1.15 2003/08/16 11:04:46 scolebourne Exp $\n  */\n public class CharSet implements Serializable {\n \n     /** Serialization lock, Lang version 2.0. */\n     private static final long serialVersionUID = 5947847346149275958L;\n-    \n+\n     /** A CharSet defining no characters. */\n     public static final CharSet EMPTY = new CharSet((String) null);\n     /** A CharSet defining ASCII alphabetic characters \"a-zA-Z\". */\n     public static final CharSet ASCII_ALPHA_UPPER = new CharSet(\"A-Z\");\n     /** A CharSet defining ASCII alphabetic characters \"0-9\". */\n     public static final CharSet ASCII_NUMERIC = new CharSet(\"0-9\");\n-    \n+\n     /**\n      * A Map of the common cases used in the factory.\n      * Subclasses can add more common patterns if desired.\n         COMMON.put(\"A-Z\", ASCII_ALPHA_UPPER);\n         COMMON.put(\"0-9\", ASCII_NUMERIC);\n     }\n-    \n+\n     /** The set of CharRange objects. */\n     private Set set = new HashSet();\n \n     //-----------------------------------------------------------------------\n     /**\n      * <p>Factory method to create a new CharSet using a special syntax.</p>\n-     * \n+     *\n      * <ul>\n      *  <li><code>null</code> or empty string (\"\")\n      * - set containing no characters</li>\n      *  <li>Combinations, such as \"abe-g\"\n      *  - set containing all the characters from the individual sets</li>\n      * </ul>\n-     * \n+     *\n      * <p>The matching order is:</p>\n      * <ol\n      *  <li>Negated multi character range, such as \"^a-e\"\n      * </ol>\n      * <p>Matching works left to right. Once a match is found the\n      * search starts again from the next character.</p>\n-     * \n+     *\n      * <p>If the same range is defined twice using the same syntax, only\n      * one range will be kept.\n      * Thus, \"a-ca-c\" creates only one range of \"a-c\".</p>\n      * <p>The set of characters represented is the union of the specified ranges.</p>\n      *\n      * <p>All CharSet objects returned by this method will be immutable.</p>\n-     * \n+     *\n      * @param setStr  the String describing the set, may be null\n+     * @return a CharSet instance\n      */\n     public static CharSet getInstance(String setStr) {\n         Object set = COMMON.get(setStr);\n      * <p>Constructs a new CharSet using the set syntax.\n      * Each string is merged in with the set.</p>\n      *\n+     * @param set  Strings to merge into the initial set\n      * @throws NullPointerException if set is <code>null</code>\n      */\n     protected CharSet(String[] set) {\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Add a set definition string to the <code>CharSet</code>.</p>\n-     * \n+     *\n      * @param str  set definition string\n      */\n     protected void add(String str) {\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Gets the internal set as an array of CharRange objects.</p>\n-     * \n+     *\n      * @return an array of immutable CharRange objects\n      */\n     public CharRange[] getCharRanges() {\n         return (CharRange[]) set.toArray(new CharRange[set.size()]);\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Does the <code>CharSet</code> contain the specified\n      * character <code>ch</code>.</p>\n-     * \n+     *\n      * @param ch  the character to check for\n      * @return <code>true</code> if the set contains the characters\n      */\n     /**\n      * <p>Compares two CharSet objects, returning true if they represent\n      * exactly the same set of characters defined in the same way.</p>\n-     * \n+     *\n      * <p>The two sets <code>abc</code> and <code>a-c</code> are <i>not</i>\n      * equal according to this method.</p>\n-     * \n-     * \n+     *\n      * @param obj  the object to compare to\n      * @return true if equal\n      */\n \n     /**\n      * <p>Gets a hashCode compatable with the equals method.</p>\n-     * \n+     *\n      * @return a suitable hashCode\n      */\n     public int hashCode() {\n         return 89 + set.hashCode();\n     }\n-    \n+\n     /**\n      * <p>Gets a string representation of the set.</p>\n-     * \n+     *\n      * @return string representation of the set\n      */\n     public String toString() {\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n  * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n+ * @author Pete Gieser\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.23 2003/08/01 20:45:17 scolebourne Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.24 2003/08/16 11:04:46 scolebourne Exp $\n  */\n public class StringEscapeUtils {\n \n      * @param out  the <code>Writer</code> used to output unescaped characters\n      * @param str  the <code>String</code> to unescape, may be null\n      * @throws IllegalArgumentException if the Writer is <code>null</code>\n+     * @throws IOException if error occurs on undelying Writer\n      */\n     public static void unescapeJava(Writer out, String str) throws IOException {\n         if (out == null) {\n      * @param out  the <code>Writer</code> used to output unescaped characters\n      * @param str  the <code>String</code> to unescape, may be null\n      * @throws IllegalArgumentException if the Writer is <code>null</code>\n+     * @throws IOException if error occurs on undelying Writer\n      */\n     public static void unescapeJavaScript(Writer out, String str) throws IOException {\n         unescapeJava(out, str);\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n  * @author Dmitri Plotnikov\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ExceptionUtils.java,v 1.31 2003/07/31 23:45:28 scolebourne Exp $\n+ * @version $Id: ExceptionUtils.java,v 1.32 2003/08/16 11:15:20 scolebourne Exp $\n  */\n public class ExceptionUtils {\n     \n      * <p>Introspects the <code>Throwable</code> to obtain the cause.</p>\n      * \n      * <ol>\n-     * <li>Try known exception types.</p>\n-     * <li>Try the supplied array of method names.</p>\n-     * <li>Try the field 'detail'.</p>\n+     * <li>Try known exception types.</li>\n+     * <li>Try the supplied array of method names.</li>\n+     * <li>Try the field 'detail'.</li>\n      * </ol>\n      * \n      * <p>A <code>null</code> set of method names means use the default set.\n--- a/src/java/org/apache/commons/lang/exception/Nestable.java\n+++ b/src/java/org/apache/commons/lang/exception/Nestable.java\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: Nestable.java,v 1.7 2003/07/26 13:00:36 scolebourne Exp $\n+ * @version $Id: Nestable.java,v 1.8 2003/08/16 11:15:20 scolebourne Exp $\n  */\n public interface Nestable {\n     \n     /**\n      * Returns the reference to the exception or error that caused the\n      * exception implementing the <code>Nestable</code> to be thrown.\n+     *\n+     * @return throwable that caused the original exception\n      */\n     public Throwable getCause();\n \n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n  * @author Travis Reeder\n  * @author Stephen Colebourne\n  * @author Tim O'Brien\n+ * @author Pete Gieser\n  * @since 2.0\n- * @version $Id: Fraction.java,v 1.9 2003/08/13 23:42:17 scolebourne Exp $\n+ * @version $Id: Fraction.java,v 1.10 2003/08/16 11:14:01 scolebourne Exp $\n  */\n public final class Fraction extends Number implements Serializable, Comparable {\n \n     /** Serialization lock, Lang version 2.0 */\n     private static final long serialVersionUID = 65382027393090L;\n \n+    /**\n+     * <code>Fraction</code> representation of 0.\n+     */\n     public static final Fraction ZERO = new Fraction(0, 1);\n+    /**\n+     * <code>Fraction</code> representation of 1.\n+     */\n     public static final Fraction ONE = new Fraction(1, 1);\n-\n+    /**\n+     * <code>Fraction</code> representation of 1/2.\n+     */\n     public static final Fraction ONE_HALF = new Fraction(1, 2);\n-\n+    /**\n+     * <code>Fraction</code> representation of 1/3.\n+     */\n     public static final Fraction ONE_THIRD = new Fraction(1, 3);\n+    /**\n+     * <code>Fraction</code> representation of 2/3.\n+     */\n     public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n-\n+    /**\n+     * <code>Fraction</code> representation of 1/4.\n+     */\n     public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n+    /**\n+     * <code>Fraction</code> representation of 2/4.\n+     */\n     public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n+    /**\n+     * <code>Fraction</code> representation of 3/4.\n+     */\n     public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n-\n+    /**\n+     * <code>Fraction</code> representation of 1/5.\n+     */\n     public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n+    /**\n+     * <code>Fraction</code> representation of 2/5.\n+     */\n     public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n+    /**\n+     * <code>Fraction</code> representation of 3/5.\n+     */\n     public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n+    /**\n+     * <code>Fraction</code> representation of 4/5.\n+     */\n     public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n \n \n--- a/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n  * @author Based on code from <code>BeanUtils</code> by: Craig R. McClanahan\n  * @author Ralph Schaer\n  * @author Chris Audley\n- * @author Rey Franois\n- * @author Gregor Raman\n+ * @author Rey Fran\ufffdois\n+ * @author Gregor Ra\ufffdman\n  * @author Jan Sorensen\n  * @author Robert Burrell Donkin\n  * @author Gary Gregory\n- * @version $Id: MethodUtils.java,v 1.13 2003/07/20 01:13:54 ggregory Exp $\n+ * @version $Id: MethodUtils.java,v 1.14 2003/08/16 11:10:23 scolebourne Exp $\n  */\n public class MethodUtils {\n-    \n+\n+    /**\n+     * Debug flag.\n+     */\n     public static final boolean debug = false;\n     \n     /**\n      *\n      * @param cls  the class to reflect, must not be <code>null</code>\n      * @param methodName  the field name to obtain\n+     * @param paramType  the class of the parameter\n      * @return the Method object\n      * @throws IllegalArgumentException if the class or method name\n      *  is <code>null</code>\n     }\n     \n     /**\n-     * <p>Gets a <code>Method</code> by name.</p> The method must be public.\n-     * Superclasses will be considered.</p>\n+     * <p>Gets a <code>Method</code> by name.</p>\n+     *\n+     * <p>The method must be public.  Superclasses will be considered.</p>\n      *\n      * @param cls  the class to reflect, must not be <code>null</code>\n      * @param methodName  the field name to obtain\n+     * @param paramTypes  the classes of the parameters\n      * @return the Method object\n      * @throws IllegalArgumentException if the class or method name\n      *  is <code>null</code>\n      *\n      * @param cls  the class to reflect, must not be <code>null</code>\n      * @param methodName  the method name to obtain\n+     * @param paramTypes  the classes of the parameters\n      * @param breakScope  whether to break scope restrictions using the\n      *  <code>setAccessible</code> method. <code>False</code> will only\n      *  match public fields.\n      * no such method can be found, return <code>null</code>.</p>\n      *\n      * @param method The method that we wish to call\n+     * @return Method\n      */\n     public static Method getMethod(Method method) {\n         \n      * @param methodName  get method with this name, must not\n      *  be <code>null</code>\n      * @param arg  use this argument, must not be <code>null</code>\n+     * @return Object\n      * @throws ReflectionException if an error occurs during reflection\n      * @throws IllegalArgumentException if any parameter is\n      *  <code>null</code>\n      *  be <code>null</code>\n      * @param args  use these arguments - treat <code>null</code>\n      *  as empty array\n+     * @return Object\n      * @throws ReflectionException if an error occurs during reflection\n      * @throws IllegalArgumentException if the objectToInvoke, methodName\n      *  or any argument is <code>null</code>\n      * @param args  use these arguments - treat null as empty array\n      * @param parameterTypes  match these parameters - treat\n      *  <code>null</code> as empty array\n+     * @return Object\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object invokeMethod(\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n  * @author Janek Bogucki\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: DateUtils.java,v 1.12 2003/08/15 16:14:35 bayard Exp $\n+ * @version $Id: DateUtils.java,v 1.13 2003/08/16 11:09:26 scolebourne Exp $\n  */\n public class DateUtils {\n     \n     public final static int RANGE_MONTH_MONDAY = 6;\n \n     /**\n-     * <p><code>DateUtils<code> instances should NOT be constructed in\n+     * <p><code>DateUtils</code> instances should NOT be constructed in\n      * standard programming. Instead, the class should be used as\n      * <code>DateUtils.parse(str);</code>.</p>\n      *\n--- a/src/java/org/apache/commons/lang/util/BitField.java\n+++ b/src/java/org/apache/commons/lang/util/BitField.java\n /**\n  * <p>Manage operations dealing with bit-mapped fields.</p>\n  *\n- * <p>Code originated from the POI project.</p>\n- *\n+ * @author Apache Jakarta POI\n  * @author Scott Sanders (sanders at apache dot org)\n  * @author Marc Johnson (mjohnson at apache dot org)\n  * @author Andrew C. Oliver (acoliver at apache dot org)\n  * @author Stephen Colebourne\n+ * @author Pete Gieser\n  * @since 2.0\n- * @version $Id: BitField.java,v 1.6 2003/07/14 22:25:06 bayard Exp $\n+ * @version $Id: BitField.java,v 1.7 2003/08/16 11:08:49 scolebourne Exp $\n  */\n public class BitField {\n     \n      * value is stored as a BitField (and so shifted left so many\n      * bits).</p>\n      *\n+     * @see #setValue\n      * @param holder the int data containing the bits we're interested\n      *  in\n      * @return the selected bits, shifted right appropriately\n      * value is stored as a BitField (and so shifted left so many\n      * bits).</p>\n      *\n+     * @see #setShortValue\n      * @param holder the short data containing the bits we're\n      *  interested in\n      * @return the selected bits, shifted right appropriately\n     /**\n      * <p>Replace the bits with new values.</p>\n      *\n+     * @see #getValue\n      * @param holder the int data containint the bits we're\n      *  interested in\n      * @param value the new value for the specified bits\n     /**\n      * <p>Replace the bits with new values.</p>\n      *\n+     * @see #getShortValue\n      * @param holder the short data containing the bits we're\n      *  interested in\n      * @param value the new value for the specified bits", "timestamp": 1061032542, "metainfo": ""}