{"sha": "4106d9d040a3d3f07a47ad8f8332e173cdd5b1c0", "log": "Suppress boxing warnings that are deliberate  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n             List<? super String>[] list13) {\n     }\n \n+    @SuppressWarnings(\"boxing\") // deliberately used here\n     @Test\n     public void testIsAssignable() throws SecurityException, NoSuchMethodException,\n             NoSuchFieldException {\n         delegateBooleanAssertion(types, 9, 8, false);\n         list10 = list8;\n         delegateBooleanAssertion(types, 8, 10, true);\n-        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Jave, but not by Eclipse\n+        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse\n         delegateBooleanAssertion(types, 10, 8, false);\n         // list11 = list8;\n         delegateBooleanAssertion(types, 8, 11, false);\n         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));\n         du = fl;\n         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));\n-        // du = bo;\n+        lo = in;\n         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));\n         lo = new Integer(0);\n         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));\n         }\n     }\n \n+    @SuppressWarnings(\"boxing\") // boxing is deliberate here\n     @Test\n     public void testIsInstance() throws SecurityException, NoSuchFieldException {\n         Type intComparableType = getClass().getField(\"intComparable\").getGenericType();", "timestamp": 1304509481, "metainfo": ""}