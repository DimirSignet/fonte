{"sha": "6170f073f134ae400f0cbfbb7f90572e430ed00a", "log": "Add missing @Override markers  ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharRange.java\n+++ b/src/java/org/apache/commons/lang/CharRange.java\n      * @param obj  the object to compare to\n      * @return true if equal\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n      * \n      * @return a suitable hashCode\n      */\n+    @Override\n     public int hashCode() {\n         return 83 + start + 7 * end + (negated ? 1 : 0);\n     }\n      * \n      * @return string representation of this range\n      */\n+    @Override\n     public String toString() {\n         if (iToString == null) {\n             StringBuffer buf = new StringBuffer(4);\n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n      * @return true if equal\n      * @since 2.0\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n      * @return a suitable hashCode\n      * @since 2.0\n      */\n+    @Override\n     public int hashCode() {\n         return 89 + set.hashCode();\n     }\n      *\n      * @return string representation of the set\n      */\n+    @Override\n     public String toString() {\n         return set.toString();\n     }\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n         /**\n          * {@inheritDoc}\n          */\n+        @Override\n         public String name(int value) {\n             if (value < LOOKUP_TABLE_SIZE) {\n                 return lookupTable()[value];\n         /**\n          * {@inheritDoc}\n          */\n+        @Override\n         public void add(String name, int value) {\n             ensureCapacity(size + 1);\n             int insertAt = binarySearch(value);\n         /**\n          * {@inheritDoc}\n          */\n+        @Override\n         public String name(int value) {\n             int index = binarySearch(value);\n             if (index < 0) {\n--- a/src/java/org/apache/commons/lang/NotImplementedException.java\n+++ b/src/java/org/apache/commons/lang/NotImplementedException.java\n      * \n      * @since 2.1\n      */\n+    @Override\n     public Throwable getCause() {\n         return cause;\n     }\n      * @return the error message\n      * @since 2.1\n      */\n+    @Override\n     public String getMessage() {\n         if (super.getMessage() != null) {\n             return super.getMessage();\n      * \n      * @since 2.1\n      */\n+    @Override\n     public void printStackTrace() {\n         delegate.printStackTrace();\n     }\n      * @param out  the stream to write to\n      * @since 2.1\n      */\n+    @Override\n     public void printStackTrace(PrintStream out) {\n         delegate.printStackTrace(out);\n     }\n      * @param out  the writer to write to\n      * @since 2.1\n      */\n+    @Override\n     public void printStackTrace(PrintWriter out) {\n         delegate.printStackTrace(out);\n     }\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n      * @since 2.3\n      */\n     private static ThreadLocal registry = new ThreadLocal() {\n+        @Override\n         protected Object initialValue() {\n             // The HashSet implementation is not synchronized,\n             // which is just what we need here.\n--- a/src/java/org/apache/commons/lang/builder/IDKey.java\n+++ b/src/java/org/apache/commons/lang/builder/IDKey.java\n          * returns hashcode - i.e. the system identity hashcode.\n          * @return the hashcode\n          */ \n+        @Override\n         public int hashCode() {\n            return id;\n         }\n          * @param other\n          * @return if the instances are for the same object\n          */ \n+        @Override\n         public boolean equals(Object other) {\n             if (!(other instanceof IDKey)) {\n                 return false;\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n      * \n      * @return the built string\n      */\n+    @Override\n     public String toString() {\n         if (this.getObject() == null) {\n             return this.getStyle().getNullText();\n--- a/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n      *\n      * @return the current useClassName flag\n      */\n+    @Override\n     public boolean isUseClassName() {\n         return super.isUseClassName();\n     }\n      *\n      * @param useClassName  the new useClassName flag\n      */\n+    @Override\n     public void setUseClassName(boolean useClassName) {\n         super.setUseClassName(useClassName);\n     }\n      * @return the current useShortClassName flag\n      * @since 2.0\n      */\n+    @Override\n     public boolean isUseShortClassName() {\n         return super.isUseShortClassName();\n     }\n      * @deprecated Use {@link #isUseShortClassName()}\n      *             Method will be removed in Commons Lang 3.0.\n      */\n+    @Override\n     public boolean isShortClassName() {\n         return super.isUseShortClassName();\n     }\n      * @param useShortClassName  the new useShortClassName flag\n      * @since 2.0\n      */\n+    @Override\n     public void setUseShortClassName(boolean useShortClassName) {\n         super.setUseShortClassName(useShortClassName);\n     }\n      * @deprecated Use {@link #setUseShortClassName(boolean)}\n      *             Method will be removed in Commons Lang 3.0.\n      */\n+    @Override\n     public void setShortClassName(boolean shortClassName) {\n         super.setUseShortClassName(shortClassName);\n     }\n      * <p>Gets whether to use the identity hash code.</p>\n      * @return the current useIdentityHashCode flag\n      */\n+    @Override\n     public boolean isUseIdentityHashCode() {\n         return super.isUseIdentityHashCode();\n     }\n      *\n      * @param useIdentityHashCode  the new useIdentityHashCode flag\n      */\n+    @Override\n     public void setUseIdentityHashCode(boolean useIdentityHashCode) {\n         super.setUseIdentityHashCode(useIdentityHashCode);\n     }\n      *\n      * @return the current useFieldNames flag\n      */\n+    @Override\n     public boolean isUseFieldNames() {\n         return super.isUseFieldNames();\n     }\n      *\n      * @param useFieldNames  the new useFieldNames flag\n      */\n+    @Override\n     public void setUseFieldNames(boolean useFieldNames) {\n         super.setUseFieldNames(useFieldNames);\n     }\n      *\n      * @return the current defaultFullDetail flag\n      */\n+    @Override\n     public boolean isDefaultFullDetail() {\n         return super.isDefaultFullDetail();\n     }\n      *\n      * @param defaultFullDetail  the new defaultFullDetail flag\n      */\n+    @Override\n     public void setDefaultFullDetail(boolean defaultFullDetail) {\n         super.setDefaultFullDetail(defaultFullDetail);\n     }\n      *\n      * @return the current array content detail setting\n      */\n+    @Override\n     public boolean isArrayContentDetail() {\n         return super.isArrayContentDetail();\n     }\n      *\n      * @param arrayContentDetail  the new arrayContentDetail flag\n      */\n+    @Override\n     public void setArrayContentDetail(boolean arrayContentDetail) {\n         super.setArrayContentDetail(arrayContentDetail);\n     }\n      *\n      * @return the current array start text\n      */\n+    @Override\n     public String getArrayStart() {\n         return super.getArrayStart();\n     }\n      *\n      * @param arrayStart  the new array start text\n      */\n+    @Override\n     public void setArrayStart(String arrayStart) {\n         super.setArrayStart(arrayStart);\n     }\n      *\n      * @return the current array end text\n      */\n+    @Override\n     public String getArrayEnd() {\n         return super.getArrayEnd();\n     }\n      *\n      * @param arrayEnd  the new array end text\n      */\n+    @Override\n     public void setArrayEnd(String arrayEnd) {\n         super.setArrayEnd(arrayEnd);\n     }\n      *\n      * @return the current array separator text\n      */\n+    @Override\n     public String getArraySeparator() {\n         return super.getArraySeparator();\n     }\n      *\n      * @param arraySeparator  the new array separator text\n      */\n+    @Override\n     public void setArraySeparator(String arraySeparator) {\n         super.setArraySeparator(arraySeparator);\n     }\n      *\n      * @return the current content start text\n      */\n+    @Override\n     public String getContentStart() {\n         return super.getContentStart();\n     }\n      *\n      * @param contentStart  the new content start text\n      */\n+    @Override\n     public void setContentStart(String contentStart) {\n         super.setContentStart(contentStart);\n     }\n      *\n      * @return the current content end text\n      */\n+    @Override\n     public String getContentEnd() {\n         return super.getContentEnd();\n     }\n      *\n      * @param contentEnd  the new content end text\n      */\n+    @Override\n     public void setContentEnd(String contentEnd) {\n         super.setContentEnd(contentEnd);\n     }\n      *\n      * @return the current field name value separator text\n      */\n+    @Override\n     public String getFieldNameValueSeparator() {\n         return super.getFieldNameValueSeparator();\n     }\n      *\n      * @param fieldNameValueSeparator  the new field name value separator text\n      */\n+    @Override\n     public void setFieldNameValueSeparator(String fieldNameValueSeparator) {\n         super.setFieldNameValueSeparator(fieldNameValueSeparator);\n     }\n      *\n      * @return the current field separator text\n      */\n+    @Override\n     public String getFieldSeparator() {\n         return super.getFieldSeparator();\n     }\n      *\n      * @param fieldSeparator  the new field separator text\n      */\n+    @Override\n     public void setFieldSeparator(String fieldSeparator) {\n         super.setFieldSeparator(fieldSeparator);\n     }\n      * @return the fieldSeparatorAtStart flag\n      * @since 2.0\n      */\n+    @Override\n     public boolean isFieldSeparatorAtStart() {\n         return super.isFieldSeparatorAtStart();\n     }\n      * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\n      * @since 2.0\n      */\n+    @Override\n     public void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n         super.setFieldSeparatorAtStart(fieldSeparatorAtStart);\n     }\n      * @return fieldSeparatorAtEnd flag\n      * @since 2.0\n      */\n+    @Override\n     public boolean isFieldSeparatorAtEnd() {\n         return super.isFieldSeparatorAtEnd();\n     }\n      * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\n      * @since 2.0\n      */\n+    @Override\n     public void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\n         super.setFieldSeparatorAtEnd(fieldSeparatorAtEnd);\n     }\n      *\n      * @return the current text to output when <code>null</code> found\n      */\n+    @Override\n     public String getNullText() {\n         return super.getNullText();\n     }\n      *\n      * @param nullText  the new text to output when <code>null</code> found\n      */\n+    @Override\n     public void setNullText(String nullText) {\n         super.setNullText(nullText);\n     }\n      *\n      * @return the current start of size text\n      */\n+    @Override\n     public String getSizeStartText() {\n         return super.getSizeStartText();\n     }\n      *\n      * @param sizeStartText  the new start of size text\n      */\n+    @Override\n     public void setSizeStartText(String sizeStartText) {\n         super.setSizeStartText(sizeStartText);\n     }\n      *\n      * @return the current end of size text\n      */\n+    @Override\n     public String getSizeEndText() {\n         return super.getSizeEndText();\n     }\n      *\n      * @param sizeEndText  the new end of size text\n      */\n+    @Override\n     public void setSizeEndText(String sizeEndText) {\n         super.setSizeEndText(sizeEndText);\n     }\n      *\n      * @return the current start of summary text\n      */\n+    @Override\n     public String getSummaryObjectStartText() {\n         return super.getSummaryObjectStartText();\n     }\n      *\n      * @param summaryObjectStartText  the new start of summary text\n      */\n+    @Override\n     public void setSummaryObjectStartText(String summaryObjectStartText) {\n         super.setSummaryObjectStartText(summaryObjectStartText);\n     }\n      *\n      * @return the current end of summary text\n      */\n+    @Override\n     public String getSummaryObjectEndText() {\n         return super.getSummaryObjectEndText();\n     }\n      *\n      * @param summaryObjectEndText  the new end of summary text\n      */\n+    @Override\n     public void setSummaryObjectEndText(String summaryObjectEndText) {\n         super.setSummaryObjectEndText(summaryObjectEndText);\n     }\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n      * \n      * @return the String <code>toString</code>\n      */\n+    @Override\n     public String toString() {\n         if (this.getObject() == null) {\n             this.getStringBuffer().append(this.getStyle().getNullText());\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n      * </p>\n      */\n     private static ThreadLocal registry = new ThreadLocal() {\n+        @Override\n         protected Object initialValue() {\n             // The HashSet implementation is not synchronized,\n             // which is just what we need here.", "timestamp": 1237035255, "metainfo": ""}