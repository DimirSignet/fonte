{"sha": "81da9efdadbed13c11c78ad3d9289f6f722aab4f", "log": "Review and cleanup Javadoc in ConstructorUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n     }\n \n     /**\n-     * <p>Returns a new instance of <code>cls</code> created using the actual\n-     * arguments <code>args</code>. The formal parameter types are inferred from\n-     * the actual values of <code>args</code>. See\n-     * {@link #invokeExactConstructor(Class, Object[], Class[])} for more\n-     * details.</p>\n-     *\n-     * <p>The signatures should be assignment compatible.</p>\n-     *\n-     * @param <T> the type to be constructed\n-     * @param cls the class to be constructed.\n-     * @param args actual argument array\n-     * @return new instance of <code>cls</code>\n-     *\n-     * @throws NoSuchMethodException If the constructor cannot be found\n-     * @throws IllegalAccessException If an error occurs accessing the\n-     * constructor\n-     * @throws InvocationTargetException If an error occurs invoking the\n-     * constructor\n-     * @throws InstantiationException If an error occurs instantiating the class\n-     *\n-     * @see #invokeConstructor(java.lang.Class, java.lang.Object[],\n-     * java.lang.Class[])\n+     * <p>Returns a new instance of the specified class inferring the right constructor\n+     * from the types of the arguments.</p>\n+     * \n+     * <p>This locates and calls a constructor.\n+     * The constructor signature must match the argument types by assignment compatibility.</p>\n+     *\n+     * @param <T> the type to be constructed\n+     * @param cls  the class to be constructed, not null\n+     * @param args  the array of arguments, null treated as empty\n+     * @return new instance of <code>cls</code>, not null\n+     *\n+     * @throws NoSuchMethodException if a matching constructor cannot be found\n+     * @throws IllegalAccessException if invocation is not permitted by security\n+     * @throws InvocationTargetException if an error occurs on invocation\n+     * @throws InstantiationException if an error occurs on instantiation\n+     * @see #invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n      */\n     public static <T> T invokeConstructor(Class<T> cls, Object... args)\n             throws NoSuchMethodException, IllegalAccessException, InvocationTargetException,\n             InstantiationException {\n-        if (null == args) {\n+        if (args == null) {\n             args = ArrayUtils.EMPTY_OBJECT_ARRAY;\n         }\n         Class<?> parameterTypes[] = new Class[args.length];\n     }\n \n     /**\n-     * <p>Returns a new instance of <code>cls</code> created using constructor\n-     * with signature <code>parameterTypes</code> and actual arguments\n-     * <code>args</code>.</p>\n-     *\n-     * <p>The signatures should be assignment compatible.</p>\n-     *\n-     * @param <T> the type to be constructed\n-     * @param cls the class to be constructed.\n-     * @param args actual argument array\n-     * @param parameterTypes parameter types array\n-     * @return new instance of <code>cls</code>\n-     *\n-     * @throws NoSuchMethodException if matching constructor cannot be found\n-     * @throws IllegalAccessException thrown on the constructor's invocation\n-     * @throws InvocationTargetException thrown on the constructor's invocation\n-     * @throws InstantiationException thrown on the constructor's invocation\n+     * <p>Returns a new instance of the specified class choosing the right constructor\n+     * from the list of parameter types.</p>\n+     * \n+     * <p>This locates and calls a constructor.\n+     * The constructor signature must match the parameter types by assignment compatibility.</p>\n+     *\n+     * @param <T> the type to be constructed\n+     * @param cls  the class to be constructed, not null\n+     * @param args  the array of arguments, null treated as empty\n+     * @param parameterTypes  the array of parameter types, null treated as empty\n+     * @return new instance of <code>cls</code>, not null\n+     *\n+     * @throws NoSuchMethodException if a matching constructor cannot be found\n+     * @throws IllegalAccessException if invocation is not permitted by security\n+     * @throws InvocationTargetException if an error occurs on invocation\n+     * @throws InstantiationException if an error occurs on instantiation\n      * @see Constructor#newInstance\n      */\n     public static <T> T invokeConstructor(Class<T> cls, Object[] args, Class<?>[] parameterTypes)\n             args = ArrayUtils.EMPTY_OBJECT_ARRAY;\n         }\n         Constructor<T> ctor = getMatchingAccessibleConstructor(cls, parameterTypes);\n-        if (null == ctor) {\n-            throw new NoSuchMethodException(\"No such accessible constructor on object: \"\n-                    + cls.getName());\n+        if (ctor == null) {\n+            throw new NoSuchMethodException(\n+                \"No such accessible constructor on object: \" + cls.getName());\n         }\n         return ctor.newInstance(args);\n     }\n \n     /**\n-     * <p>Returns a new instance of <code>cls</code> created using the actual\n-     * arguments <code>args</code>. The formal parameter types are inferred from\n-     * the actual values of <code>args</code>. See\n-     * {@link #invokeExactConstructor(Class, Object[], Class[])} for more\n-     * details.</p>\n-     *\n-     * <p>The signatures should match exactly.</p>\n-     *\n-     * @param <T> the type to be constructed\n-     * @param cls the class to be constructed.\n-     * @param args actual argument array\n-     * @return new instance of <code>cls</code>\n-     *\n-     * @throws NoSuchMethodException If the constructor cannot be found\n-     * @throws IllegalAccessException If an error occurs accessing the\n-     * constructor\n-     * @throws InvocationTargetException If an error occurs invoking the\n-     * constructor\n-     * @throws InstantiationException If an error occurs instantiating the class\n-     *\n-     * @see #invokeExactConstructor(java.lang.Class, java.lang.Object[],\n-     * java.lang.Class[])\n+     * <p>Returns a new instance of the specified class inferring the right constructor\n+     * from the types of the arguments.</p>\n+     *\n+     * <p>This locates and calls a constructor.\n+     * The constructor signature must match the argument types exactly.</p>\n+     *\n+     * @param <T> the type to be constructed\n+     * @param cls  the class to be constructed, not null\n+     * @param args  the array of arguments, null treated as empty\n+     * @return new instance of <code>cls</code>, not null\n+     *\n+     * @throws NoSuchMethodException if a matching constructor cannot be found\n+     * @throws IllegalAccessException if invocation is not permitted by security\n+     * @throws InvocationTargetException if an error occurs on invocation\n+     * @throws InstantiationException if an error occurs on instantiation\n+     * @see #invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n      */\n     public static <T> T invokeExactConstructor(Class<T> cls, Object... args)\n             throws NoSuchMethodException, IllegalAccessException, InvocationTargetException,\n             InstantiationException {\n-        if (null == args) {\n+        if (args == null) {\n             args = ArrayUtils.EMPTY_OBJECT_ARRAY;\n         }\n         int arguments = args.length;\n     }\n \n     /**\n-     * <p>Returns a new instance of <code>cls</code> created using constructor\n-     * with signature <code>parameterTypes</code> and actual arguments\n-     * <code>args</code>.</p>\n-     *\n-     * <p>The signatures should match exactly.</p>\n-     *\n-     * @param <T> the type to be constructed\n-     * @param cls the class to be constructed.\n-     * @param args actual argument array\n-     * @param parameterTypes parameter types array\n-     * @return new instance of <code>cls</code>\n-     *\n-     * @throws NoSuchMethodException if matching constructor cannot be found\n-     * @throws IllegalAccessException thrown on the constructor's invocation\n-     * @throws InvocationTargetException thrown on the constructor's invocation\n-     * @throws InstantiationException thrown on the constructor's invocation\n+     * <p>Returns a new instance of the specified class choosing the right constructor\n+     * from the list of parameter types.</p>\n+     *\n+     * <p>This locates and calls a constructor.\n+     * The constructor signature must match the parameter types exactly.</p>\n+     *\n+     * @param <T> the type to be constructed\n+     * @param cls  the class to be constructed, not null\n+     * @param args  the array of arguments, null treated as empty\n+     * @param parameterTypes  the array of parameter types, null treated as empty\n+     * @return new instance of <code>cls</code>, not null\n+     *\n+     * @throws NoSuchMethodException if a matching constructor cannot be found\n+     * @throws IllegalAccessException if invocation is not permitted by security\n+     * @throws InvocationTargetException if an error occurs on invocation\n+     * @throws InstantiationException if an error occurs on instantiation\n      * @see Constructor#newInstance\n      */\n     public static <T> T invokeExactConstructor(Class<T> cls, Object[] args,\n             parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;\n         }\n         Constructor<T> ctor = getAccessibleConstructor(cls, parameterTypes);\n-        if (null == ctor) {\n-            throw new NoSuchMethodException(\"No such accessible constructor on object: \"\n-                    + cls.getName());\n+        if (ctor == null) {\n+            throw new NoSuchMethodException(\n+                \"No such accessible constructor on object: \"+ cls.getName());\n         }\n         return ctor.newInstance(args);\n     }\n \n-    /**\n-     * Returns a constructor given a class and signature.\n-     *\n-     * @param <T> the type to be constructed\n-     * @param cls the class to be constructed\n-     * @param parameterTypes the parameter array\n-     * @return null if matching accessible constructor can not be found\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Finds a constructor given a class and signature, checking accessibiilty.</p>\n+     * \n+     * <p>This finds the constructor and ensures that it is accessible.\n+     * The constructor signature must match the parameter types exactly.</p>\n+     *\n+     * @param <T> the constructor type\n+     * @param cls  the class to find a constructor for, not null\n+     * @param parameterTypes  the array of parameter types, null treated as empty\n+     * @return the constructor, null if no matching accessible constructor found\n      * @see Class#getConstructor\n      * @see #getAccessibleConstructor(java.lang.reflect.Constructor)\n      */\n     }\n \n     /**\n-     * Returns accessible version of the given constructor.\n-     *\n-     * @param <T> the type to be constructed\n-     * @param ctor prototype constructor object.\n-     * @return <code>null</code> if accessible constructor can not be found.\n+     * <p>Checks if the specified constructor is accessible.</p>\n+     * \n+     * <p>This simply ensures that the constructor is accessible.</p>\n+     *\n+     * @param <T> the constructor type\n+     * @param ctor  the prototype constructor object, not null\n+     * @return the constructor, null if no matching accessible constructor found\n      * @see java.lang.SecurityManager\n      */\n     public static <T> Constructor<T> getAccessibleConstructor(Constructor<T> ctor) {\n     }\n \n     /**\n-     * <p>Finds an accessible constructor with compatible parameters. Compatible\n-     * parameters mean that every method parameter is assignable from the given\n-     * parameters. In other words, it finds constructor that will take the\n-     * parameters given.</p>\n-     *\n-     * <p>First it checks if there is constructor matching the exact signature.\n-     * If no such, all the constructors of the class are tested if their\n-     * signatures are assignment compatible with the parameter types. The first\n-     * matching constructor is returned.</p>\n-     *\n-     * @param <T> the type to be constructed\n-     * @param cls find constructor for this class\n+     * <p>Finds an accessible constructor with compatible parameters.</p>\n+     * \n+     * <p>This checks all the constructor and finds one with compatible parameters\n+     * This requires that every parameter is assignable from the given parameter types.\n+     * This is a more flexible search than the normal exact matching algorithm.</p>\n+     *\n+     * <p>First it checks if there is a constructor matching the exact signature.\n+     * If not then all the constructors of the class are checked to see if their\n+     * signatures are assignment compatible with the parameter types.\n+     * The first assignment compatible matching constructor is returned.</p>\n+     *\n+     * @param <T> the constructor type\n+     * @param cls  the class to find a constructor for, not null\n      * @param parameterTypes find method with compatible parameters\n-     * @return a valid Constructor object. If there's no matching constructor,\n-     * returns <code>null</code>.\n+     * @return the constructor, null if no matching accessible constructor found\n      */\n     public static <T> Constructor<T> getMatchingAccessibleConstructor(Class<T> cls,\n             Class<?>... parameterTypes) {", "timestamp": 1310032320, "metainfo": ""}