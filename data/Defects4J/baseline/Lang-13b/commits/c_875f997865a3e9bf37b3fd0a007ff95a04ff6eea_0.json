{"sha": "875f997865a3e9bf37b3fd0a007ff95a04ff6eea", "log": "Removing most of the ComparatorUtils code. Need to figure out how to get rid of the last attribute.   ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/compare/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/compare/ComparatorUtils.java\n  */\n package org.apache.commons.lang3.compare;\n \n-import java.util.Collection;\n import java.util.Comparator;\n \n /**\n  * Provides convenient static utility methods for <Code>Comparator</Code>\n  * objects.\n- * <p>\n- * Most of the functionality in this class can also be found in the \n- * <code>comparators</code> package. This class merely provides a \n- * convenient central place if you have use for more than one class\n- * in the <code>comparators</code> subpackage.\n  *\n  * @since Commons Collections 2.1\n  * @version $Revision$ $Date$\n     /**\n      * Comparator for natural sort order.\n      *\n-     * @see ComparableComparator#getInstance\n+     * @see ComparableComparator#INSTANCE\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();\n \n-    /**\n-     * Gets a comparator that uses the natural order of the objects.\n-     *\n-     * @return  a comparator which uses natural order\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <E extends Comparable<? super E>> Comparator<E> naturalComparator() {\n-        return NATURAL_COMPARATOR;\n-    }\n-\n-    /**\n-     * Gets a comparator that compares using two {@link Comparator}s.\n-     * <p>\n-     * The second comparator is used if the first comparator returns equal.\n-     *\n-     * @param comparator1  the first comparator to use, not null\n-     * @param comparator2  the first comparator to use, not null\n-     * @return a {@link ComparatorChain} formed from the two comparators\n-     * @throws NullPointerException if either comparator is null\n-     * @see ComparatorChain\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <E extends Comparable<? super E>> Comparator<E> chainedComparator(Comparator<E> comparator1, Comparator<E> comparator2) {\n-        return chainedComparator(new Comparator[] {comparator1, comparator2});\n-    }\n-\n-    /**\n-     * Gets a comparator that compares using an array of {@link Comparator}s, applied\n-     * in sequence until one returns not equal or the array is exhausted.\n-     *\n-     * @param comparators  the comparators to use, not null or empty or containing nulls\n-     * @return a {@link ComparatorChain} formed from the input comparators\n-     * @throws NullPointerException if comparators array is null or contains a null\n-     * @see ComparatorChain\n-     */\n-    public static <E extends Comparable<? super E>> Comparator<E> chainedComparator(Comparator<E>[] comparators) {\n-        ComparatorChain<E> chain = new ComparatorChain<E>();\n-        for (int i = 0; i < comparators.length; i++) {\n-            if (comparators[i] == null) {\n-                throw new NullPointerException(\"Comparator cannot be null\");\n-            }\n-            chain.addComparator(comparators[i]);\n-        }\n-        return chain;\n-    }\n-\n-    /**\n-     * Gets a comparator that compares using a collection of {@link Comparator}s,\n-     * applied in (default iterator) sequence until one returns not equal or the \n-     * collection is exhausted.\n-     *\n-     * @param comparators  the comparators to use, not null or empty or containing nulls\n-     * @return a {@link ComparatorChain} formed from the input comparators\n-     * @throws NullPointerException if comparators collection is null or contains a null\n-     * @throws ClassCastException if the comparators collection contains the wrong object type\n-     * @see ComparatorChain\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <E extends Comparable<? super E>> Comparator<E> chainedComparator(Collection<Comparator<E>> comparators) {\n-        return chainedComparator(\n-            (Comparator<E>[]) comparators.toArray(new Comparator[comparators.size()])\n-        );\n-    }\n-\n-    /**\n-     * Gets a comparator that reverses the order of the given comparator.\n-     *\n-     * @param comparator  the comparator to reverse\n-     * @return  a comparator that reverses the order of the input comparator\n-     * @see ReverseComparator\n-     */\n-    public static <E> Comparator<E> reversedComparator(Comparator<E> comparator) {\n-        return new ReverseComparator<E>(comparator);\n-    }\n-\n-    /**\n-     * Gets a Comparator that controls the comparison of <code>null</code> values.\n-     * <p>\n-     * The returned comparator will consider a null value to be less than\n-     * any nonnull value, and equal to any other null value.  Two nonnull\n-     * values will be evaluated with the given comparator.\n-     *\n-     * @param comparator the comparator that wants to allow nulls\n-     * @return  a version of that comparator that allows nulls\n-     * @see NullComparator\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator) {\n-        if (comparator == null) {\n-            comparator = NATURAL_COMPARATOR;\n-        }\n-        return new NullComparator<E>(comparator, false);\n-    }\n-\n-    /**\n-     * Gets a Comparator that controls the comparison of <code>null</code> values.\n-     * <p>\n-     * The returned comparator will consider a null value to be greater than\n-     * any nonnull value, and equal to any other null value.  Two nonnull\n-     * values will be evaluated with the given comparator.\n-     *\n-     * @param comparator the comparator that wants to allow nulls\n-     * @return  a version of that comparator that allows nulls\n-     * @see NullComparator\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator) {\n-        if (comparator == null) {\n-            comparator = NATURAL_COMPARATOR;\n-        }\n-        return new NullComparator<E>(comparator, true);\n-    }\n-\n-    /**\n-     *  Returns the smaller of the given objects according to the given \n-     *  comparator, returning the second object if the comparator\n-     *  returns equal.\n-     * \n-     *  @param o1  the first object to compare\n-     *  @param o2  the second object to compare\n-     *  @param comparator  the sort order to use\n-     *  @return  the smaller of the two objects\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <E> E min(E o1, E o2, Comparator<E> comparator) {\n-        if (comparator == null) {\n-            comparator = NATURAL_COMPARATOR;\n-        }\n-        int c = comparator.compare(o1, o2);\n-        return (c < 0) ? o1 : o2;\n-    }\n-\n-    /**\n-     *  Returns the larger of the given objects according to the given \n-     *  comparator, returning the second object if the comparator \n-     *  returns equal.\n-     * \n-     *  @param o1  the first object to compare\n-     *  @param o2  the second object to compare\n-     *  @param comparator  the sort order to use\n-     *  @return  the larger of the two objects\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <E> E max(E o1, E o2, Comparator<E> comparator) {\n-        if (comparator == null) {\n-            comparator = NATURAL_COMPARATOR;\n-        }\n-        int c = comparator.compare(o1, o2);\n-        return (c > 0) ? o1 : o2;\n-    }\n-    \n }", "timestamp": 1314346920, "metainfo": ""}