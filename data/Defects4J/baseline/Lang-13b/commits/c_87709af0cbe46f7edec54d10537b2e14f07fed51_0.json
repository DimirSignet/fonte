{"sha": "87709af0cbe46f7edec54d10537b2e14f07fed51", "log": "Adding missing private method javadoc and removing 'unused' import in favour of fully qualified javadoc link  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Range.java\n+++ b/src/main/java/org/apache/commons/lang3/Range.java\n \n import java.io.Serializable;\n import java.util.Comparator;\n-import java.util.Formattable;\n \n /**\n  * <p>An immutable range of objects from a minimum to maximum point inclusive.</p>\n     /**\n      * <p>Formats the receiver using the given format.</p>\n      * \n-     * <p>This uses {@link Formattable} to perform the formatting. Three variables may\n+     * <p>This uses {@link java.util.Formattable} to perform the formatting. Three variables may\n      * be used to embed the minimum, maximum and comparator.\n      * Use {@code %1$s} for the minimum element, {@code %2$s} for the maximum element\n      * and {@code %3$s} for the comparator.\n     @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n     private enum ComparableComparator implements Comparator {\n         INSTANCE;\n+        /**\n+         * Comparable based compare implementation. \n+         *\n+         * @param obj1 left hand side of comparison\n+         * @param obj2 right hand side of comparison\n+         * @return negative, 0, positive comparison value\n+         */\n         public int compare(Object obj1, Object obj2) {\n             return ((Comparable) obj1).compareTo(obj2);\n         }\n--- a/src/main/java/org/apache/commons/lang3/tuple/Pair.java\n+++ b/src/main/java/org/apache/commons/lang3/tuple/Pair.java\n package org.apache.commons.lang3.tuple;\n \n import java.io.Serializable;\n-import java.util.Formattable;\n import java.util.Map;\n \n import org.apache.commons.lang3.ObjectUtils;\n     /**\n      * <p>Formats the receiver using the given format.</p>\n      * \n-     * <p>This uses {@link Formattable} to perform the formatting. Two variables may\n+     * <p>This uses {@link java.util.Formattable} to perform the formatting. Two variables may\n      * be used to embed the left and right elements. Use {@code %1$s} for the left\n      * element (key) and {@code %2$s} for the right element (value).\n      * The default format used by {@code toString()} is {@code (%1$s,%2$s)}.</p>", "timestamp": 1309681812, "metainfo": ""}