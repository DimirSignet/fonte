{"sha": "c5283881e4ff7c040d5ca31a852bc89f2bcf2eef", "log": "Making unescapeHtml _NOT_ escape unfinished numeric entities by default (it ignores them); however adding options that will fire an exception or unescape the numeric entity. LANG-710  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n \n import java.io.IOException;\n import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.EnumSet;\n \n /**\n  * Translate XML numeric entities of the form &#[xX]?\\d+;? to \n  * @version $Id$\n  */\n public class NumericEntityUnescaper extends CharSequenceTranslator {\n+\n+    public static enum OPTION { semiColonRequired, semiColonOptional, errorIfNoSemiColon }\n+\n+    // TODO?: Create an OptionsSet class to hide some of the conditional logic below\n+    private final EnumSet<OPTION> options;\n+\n+    /**\n+     * Create a UnicodeUnescaper.\n+     *\n+     * The constructor takes a list of options, only one of which is currently \n+     * available (whether to allow the semi-colon on the end of a numeric entity to \n+     * be optional. \n+     *\n+     * For example, to support numeric entities without a ';':\n+     *    new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional)\n+     *\n+     * @param options to apply to this unescaper\n+     */\n+    public NumericEntityUnescaper(OPTION... options) {\n+        if(options.length > 0) {\n+            this.options = EnumSet.copyOf(Arrays.asList(options));\n+        } else {\n+            this.options = EnumSet.copyOf(Arrays.asList(new OPTION[] { OPTION.semiColonRequired }));\n+        }\n+    }\n+\n+    /**\n+     * Whether the passed in option is currently set.\n+     *\n+     * @param option to check state of\n+     * @return whether the option is set\n+     */\n+    public boolean isSet(OPTION option) { \n+        return (options == null) ? false : options.contains(option);\n+    }\n \n     /**\n      * {@inheritDoc}\n                 end++;\n             }\n \n+            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n+\n+            if(!semiNext) {\n+                if(isSet(OPTION.semiColonRequired)) {\n+                    return 0;\n+                } else\n+                if(isSet(OPTION.errorIfNoSemiColon)) {\n+                    throw new RuntimeException(\"Semi-colon required at end of numeric entity\");\n+                }\n+            }\n+\n             int entityValue;\n             try {\n                 if(isHex) {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n-\n             return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n         }\n         return 0;\n--- a/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java\n     }\n \n     public void testUnfinishedEntity() {\n-        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n+        // parse it\n+        NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional);\n         String input = \"Test &#x30 not test\";\n         String expected = \"Test \\u0030 not test\";\n \n         String result = neu.translate(input);\n-        assertEquals(\"Failed to support unfinished entities (i.e. missing semi-colon\", expected, result);\n+        assertEquals(\"Failed to support unfinished entities (i.e. missing semi-colon)\", expected, result);\n+\n+        // ignore it\n+        neu = new NumericEntityUnescaper();\n+        input = \"Test &#x30 not test\";\n+        expected = input;\n+\n+        result = neu.translate(input);\n+        assertEquals(\"Failed to ignore unfinished entities (i.e. missing semi-colon)\", expected, result);\n+\n+        // fail it\n+        neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon);\n+        input = \"Test &#x30 not test\";\n+\n+        try {\n+            result = neu.translate(input);\n+            fail(\"RuntimeException expected\");\n+        } catch(RuntimeException re) {\n+            // expected\n+        }\n     }\n \n }", "timestamp": 1310010262, "metainfo": ""}