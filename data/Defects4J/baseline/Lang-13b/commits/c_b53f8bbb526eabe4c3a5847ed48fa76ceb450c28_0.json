{"sha": "b53f8bbb526eabe4c3a5847ed48fa76ceb450c28", "log": "Removing CharSequenceUtils in favour of putting the code in StringUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n         }\n         return new StringBuilder(strLen)\n             .append(Character.toTitleCase(cs.charAt(0)))\n-            .append(CharSequenceUtils.subSequence(cs, 1))\n+            .append(StringUtils.subSequence(cs, 1))\n             .toString();\n     }\n \n         }\n         return new StringBuilder(strLen)\n             .append(Character.toLowerCase(cs.charAt(0)))\n-            .append(CharSequenceUtils.subSequence(cs, 1))\n+            .append(StringUtils.subSequence(cs, 1))\n             .toString();\n     }\n \n         }\n         return false;\n     }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Returns a new {@code CharSequence} that is a subsequence of this\n+     * sequence starting with the {@code char} value at the specified index.</p>\n+     * \n+     * <p>This provides the {@code CharSequence} equivalent to {@link String#substring(int)}.\n+     * The length (in {@code char}) of the returned sequence is {@code length() - start},\n+     * so if {@code start == end} then an empty sequence is returned.</p>\n+     *\n+     * @param cs  the specified subsequence, null returns null\n+     * @param start  the start index, inclusive, valid\n+     * @return a new subsequence, may be null\n+     * @throws IndexOutOfBoundsException if {@code start} is negative or if \n+     *  {@code start} is greater than {@code length()}\n+     */\n+    public static CharSequence subSequence(CharSequence cs, int start) {\n+        return cs == null ? null : cs.subSequence(start, cs.length());\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java\n package org.apache.commons.lang3;\n \n import junit.framework.TestCase;\n+import org.junit.Assert;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.StringUtils} - Substring methods\n         assertEquals(4, \n              StringUtils.countMatches(\"oooooooooooo\", \"ooo\"));\n     }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSubSequence() {\n+        //\n+        // null input\n+        //\n+        Assert.assertEquals(null, StringUtils.subSequence(null, -1));\n+        Assert.assertEquals(null, StringUtils.subSequence(null, 0));\n+        Assert.assertEquals(null, StringUtils.subSequence(null, 1));\n+        //\n+        // non-null input\n+        //\n+        Assert.assertEquals(StringUtils.EMPTY, StringUtils.subSequence(StringUtils.EMPTY, 0));\n+        Assert.assertEquals(\"012\", StringUtils.subSequence(\"012\", 0));\n+        Assert.assertEquals(\"12\", StringUtils.subSequence(\"012\", 1));\n+        Assert.assertEquals(\"2\", StringUtils.subSequence(\"012\", 2));\n+        Assert.assertEquals(StringUtils.EMPTY, StringUtils.subSequence(\"012\", 3));\n+        //\n+        // Exception expected\n+        //\n+        try {\n+            Assert.assertEquals(null, StringUtils.subSequence(StringUtils.EMPTY, -1));\n+            Assert.fail(\"Expected \" + IndexOutOfBoundsException.class.getName());\n+        } catch (IndexOutOfBoundsException e) {\n+            // Expected\n+        }\n+        try {\n+            Assert.assertEquals(null, StringUtils.subSequence(StringUtils.EMPTY, 1));\n+            Assert.fail(\"Expected \" + IndexOutOfBoundsException.class.getName());\n+        } catch (IndexOutOfBoundsException e) {\n+            // Expected\n+        }\n+    }\n+\n }", "timestamp": 1300250357, "metainfo": ""}