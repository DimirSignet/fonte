{"sha": "9b42b084cfa5bf577838697823c203471a60dece", "log": "Applied the optimisations to the join(Iterator, x) methods that Stepan Koltsov included in his patch for #LANG-266.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n      * @since 2.0\n      */\n     public static String join(Iterator iterator, char separator) {\n+\n+        // handle null, zero and one elements before building a buffer\n         if (iterator == null) {\n             return null;\n         }\n+        if (!iterator.hasNext()) {\n+            return EMPTY;\n+        }\n+        Object first = iterator.next();\n+        if (!iterator.hasNext()) {\n+            return ObjectUtils.toString(first);\n+        }\n+\n+        // two or more elements\n         StringBuffer buf = new StringBuffer(256); // Java default is 16, probably too small\n+        if (first != null) {\n+            buf.append(first);\n+        }\n+\n         while (iterator.hasNext()) {\n+            buf.append(separator);\n             Object obj = iterator.next();\n             if (obj != null) {\n                 buf.append(obj);\n             }\n-            if (iterator.hasNext()) {\n-                buf.append(separator);\n-            }\n-        }\n+        }\n+\n         return buf.toString();\n     }\n \n      * @return the joined String, <code>null</code> if null iterator input\n      */\n     public static String join(Iterator iterator, String separator) {\n+\n+        // handle null, zero and one elements before building a buffer\n         if (iterator == null) {\n             return null;\n         }\n+        if (!iterator.hasNext()) {\n+            return EMPTY;\n+        }\n+        Object first = iterator.next();\n+        if (!iterator.hasNext()) {\n+            return ObjectUtils.toString(first);\n+        }\n+\n+        // two or more elements\n         StringBuffer buf = new StringBuffer(256); // Java default is 16, probably too small\n+        if (first != null) {\n+            buf.append(first);\n+        }\n+\n         while (iterator.hasNext()) {\n+            if (separator != null) {\n+                buf.append(separator);\n+            }\n             Object obj = iterator.next();\n             if (obj != null) {\n                 buf.append(obj);\n-            }\n-            if ((separator != null) && iterator.hasNext()) {\n-                buf.append(separator);\n             }\n         }\n         return buf.toString();", "timestamp": 1158709514, "metainfo": ""}