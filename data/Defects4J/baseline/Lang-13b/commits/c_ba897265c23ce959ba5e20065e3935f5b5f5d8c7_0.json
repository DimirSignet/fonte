{"sha": "ba897265c23ce959ba5e20065e3935f5b5f5d8c7", "log": "Extra tests and optimisations suggested by Clover   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.commons.lang.ClassUtils;\n import org.apache.commons.lang.StringUtils;\n \n /**\n  * @author Chris Webb\n  * @author Mike Bowler\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.15 2003/07/20 15:49:58 scolebourne Exp $\n+ * @version $Id: Enum.java,v 1.16 2003/07/30 23:13:09 scolebourne Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n+\n+    /** Serialization id */    \n+    static final long serialVersionUID = -487045951170455942L;\n+    \n     // After discussion, the default size for HashMaps is used, as the\n     // sizing algorithm changes across the JDK versions\n-    \n     /**\n      * An empty <code>Map</code>, as JDK1.2 didn't have an empty map.\n      */\n      * The string representation of the Enum.\n      */\n     private final String iName;\n+    /**\n+     * The hashcode representation of the Enum.\n+     */\n+    private transient final int iHashCode;\n+    /**\n+     * The toString representation of the Enum.\n+     */\n+    protected transient String iToString = null;\n \n     /**\n      * <p>Enable the iterator to retain the source code order.</p>\n         }\n         entry.map.put(name, this);\n         entry.list.add(this);\n+        \n+        iHashCode = 7 + enumClass.hashCode() + 3 * name.hashCode();\n+        // cannot create toString here as subclasses may want to include other data\n     }\n \n     /**\n      * @return a hashcode based on the name\n      */\n     public final int hashCode() {\n-        return 7 + iName.hashCode();\n+        return iHashCode;\n     }\n \n     /**\n      * @throws NullPointerException if other is <code>null</code>\n      */\n     public int compareTo(Object other) {\n+        if (other == this) {\n+            return 0;\n+        }\n         return iName.compareTo(((Enum) other).iName);\n     }\n \n     /**\n      * <p>Human readable description of this Enum item.</p>\n-     *\n-     * <p>For use when debugging.</p>\n      * \n      * @return String in the form <code>type[name]</code>, for example:\n      * <code>Color[Red]</code>. Note that the package name is stripped from\n      * the type name.\n      */\n     public String toString() {\n-        String shortName = Enum.getEnumClass(getClass()).getName();\n-        int pos = shortName.lastIndexOf('.');\n-        if (pos != -1) {\n-            shortName = shortName.substring(pos + 1);\n-        }\n-        shortName = shortName.replace('$', '.');\n-        return shortName + \"[\" + getName() + \"]\";\n-    }\n+        if (iToString == null) {\n+            Class cls = Enum.getEnumClass(getClass());\n+            String shortName = ClassUtils.getShortClassName(cls);\n+            iToString = shortName + \"[\" + getName() + \"]\";\n+        }\n+        return iToString;\n+    }\n+    \n }\n--- a/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n import java.util.Iterator;\n import java.util.List;\n \n+import org.apache.commons.lang.ClassUtils;\n+\n /**\n  * <p>Abstract superclass for type-safe enums with integer values suitable\n  * for use in <code>switch</code> statements.</p>\n  * @author Apache Avalon project\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ValuedEnum.java,v 1.8 2003/07/20 15:49:58 scolebourne Exp $\n+ * @version $Id: ValuedEnum.java,v 1.9 2003/07/30 23:13:09 scolebourne Exp $\n  */\n public abstract class ValuedEnum extends Enum {\n     /**\n     /**\n      * <p>Human readable description of this <code>Enum</code> item.</p>\n      *\n-     * <p>For use when debugging.</p>\n-     * \n      * @return String in the form <code>type[name=value]</code>, for example:\n      *  <code>JavaVersion[Java 1.0=100]</code>. Note that the package name is\n      *  stripped from the type name.\n      */\n     public String toString() {\n-        String shortName = Enum.getEnumClass(getClass()).getName();\n-        int pos = shortName.lastIndexOf('.');\n-        if (pos != -1) {\n-            shortName = shortName.substring(pos + 1);\n+        if (iToString == null) {\n+            Class cls = Enum.getEnumClass(getClass());\n+            String shortName = ClassUtils.getShortClassName(cls);\n+            iToString = shortName + \"[\" + getName() + \"=\" + getValue() + \"]\";\n         }\n-        shortName = shortName.replace('$', '.');\n-        return shortName + \"[\" + getName() + \"=\" + getValue() + \"]\";\n+        return iToString;\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/DummyEnum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+/**\n+ * Dummy enumeration - no values.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: DummyEnum.java,v 1.1 2003/07/30 23:13:09 scolebourne Exp $\n+ */\n+public abstract class DummyEnum extends Enum {\n+\n+    private DummyEnum(String name) {\n+        super(name);\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/enum/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumTest.java\n  * Test cases for the {@link Enum} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: EnumTest.java,v 1.7 2003/05/22 22:00:06 scolebourne Exp $\n+ * @version $Id: EnumTest.java,v 1.8 2003/07/30 23:13:09 scolebourne Exp $\n  */\n \n public final class EnumTest extends TestCase {\n         assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.BLUE) == 0);\n         assertTrue(ColorEnum.RED.compareTo(ColorEnum.BLUE) > 0);\n         assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.RED) < 0);\n+        try {\n+            ColorEnum.RED.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            ColorEnum.RED.compareTo(new Object());\n+            fail();\n+        } catch (ClassCastException ex) {}\n     }\n \n     public void testEquals() {\n         assertSame(ColorEnum.RED, ColorEnum.RED);\n         assertSame(ColorEnum.getEnum(\"Red\"), ColorEnum.RED);\n+        assertEquals(false, ColorEnum.RED.equals(null));\n+        assertEquals(true, ColorEnum.RED.equals(ColorEnum.RED));\n+        assertEquals(true, ColorEnum.RED.equals(ColorEnum.getEnum(\"Red\")));\n+    }\n+\n+    public void testHashCode() {\n+        assertEquals(ColorEnum.RED.hashCode(), ColorEnum.RED.hashCode());\n+        assertEquals(7 + ColorEnum.class.hashCode() + 3 * \"Red\".hashCode(), ColorEnum.RED.hashCode());\n     }\n \n     public void testToString() {\n     }\n \n     public void testSerialization() {\n+        int hashCode = ColorEnum.RED.hashCode();\n         assertSame(ColorEnum.RED, SerializationUtils.clone(ColorEnum.RED));\n+        assertEquals(hashCode, SerializationUtils.clone(ColorEnum.RED).hashCode());\n         assertSame(ColorEnum.GREEN, SerializationUtils.clone(ColorEnum.GREEN));\n         assertSame(ColorEnum.BLUE, SerializationUtils.clone(ColorEnum.BLUE));\n     }\n--- a/src/test/org/apache/commons/lang/enum/EnumUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumUtilsTest.java\n  * Test cases for the {@link Enum} class.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EnumUtilsTest.java,v 1.3 2003/05/22 22:00:06 scolebourne Exp $\n+ * @version $Id: EnumUtilsTest.java,v 1.4 2003/07/30 23:13:09 scolebourne Exp $\n  */\n \n public final class EnumUtilsTest extends TestCase {\n         assertSame(ColorEnum.RED, it.next());\n         assertSame(ColorEnum.GREEN, it.next());\n         assertSame(ColorEnum.BLUE, it.next());\n+        it = EnumUtils.iterator(DummyEnum.class);\n+        assertEquals(false, it.hasNext());\n     }\n \n     public void testIteratorEx() {\n         try {\n             EnumUtils.iterator(null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            EnumUtils.iterator(Object.class);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testList() {\n         assertSame(ColorEnum.RED, it.next());\n         assertSame(ColorEnum.GREEN, it.next());\n         assertSame(ColorEnum.BLUE, it.next());\n+        list = EnumUtils.getEnumList(DummyEnum.class);\n+        assertEquals(0, list.size());\n     }\n \n     public void testListEx() {\n         try {\n             EnumUtils.getEnumList(null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            EnumUtils.getEnumList(Object.class);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testMap() {\n         assertSame(ColorEnum.RED, map.get(\"Red\"));\n         assertSame(ColorEnum.GREEN, map.get(\"Green\"));\n         assertSame(ColorEnum.BLUE, map.get(\"Blue\"));\n+        map = EnumUtils.getEnumMap(DummyEnum.class);\n+        assertEquals(0, map.size());\n     }\n \n     public void testMapEx() {\n         try {\n             EnumUtils.getEnumMap(null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            EnumUtils.getEnumMap(Object.class);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testGet() {\n         assertSame(ColorEnum.GREEN, EnumUtils.getEnum(ColorEnum.class, \"Green\"));\n         assertSame(ColorEnum.BLUE, EnumUtils.getEnum(ColorEnum.class, \"Blue\"));\n         assertSame(null, EnumUtils.getEnum(ColorEnum.class, \"Pink\"));\n+        assertSame(null, EnumUtils.getEnum(DummyEnum.class, \"Pink\"));\n     }\n \n     public void testGetEx() {\n         try {\n             EnumUtils.getEnum(null, \"\");\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            EnumUtils.getEnum(Object.class, \"Red\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testGetValue() {\n         assertSame(ValuedColorEnum.GREEN, EnumUtils.getEnum(ValuedColorEnum.class, 2));\n         assertSame(ValuedColorEnum.BLUE, EnumUtils.getEnum(ValuedColorEnum.class, 3));\n         assertSame(null, EnumUtils.getEnum(ValuedColorEnum.class, 4));\n+        assertSame(null, EnumUtils.getEnum(DummyEnum.class, 5));\n     }\n \n     public void testGetValueEx() {\n         try {\n             EnumUtils.getEnum(null, 0);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            EnumUtils.getEnum(Object.class, 2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n }", "timestamp": 1059606789, "metainfo": ""}