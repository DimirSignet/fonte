{"sha": "2aa9dca994b006ccbfcb528de5ff0da6a5578411", "log": "Adjust FastDateFormat for Java 7 behavior regarding format of the year pattern (LANG-719).  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n  * </p>\n  *\n  * <p>Only formatting is supported, but all patterns are compatible with\n- * SimpleDateFormat (except time zones - see below).</p>\n+ * SimpleDateFormat (except time zones and some year patterns - see below).</p>\n  *\n  * <p>Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent\n  * time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).\n  * ISO8601 full format time zones (eg. {@code +08:00} or {@code -11:00}).\n  * This introduces a minor incompatibility with Java 1.4, but at a gain of\n  * useful functionality.</p>\n+ *\n+ * <p>Javadoc cites for the year pattern: <i>For formatting, if the number of\n+ * pattern letters is 2, the year is truncated to 2 digits; otherwise it is\n+ * interpreted as a number.</i> Starting with Java 1.7 a pattern of 'Y' or\n+ * 'YYY' will be formatted as '2003', while it was '03' in former Java\n+ * versions. FastDateFormat implements the behavior of Java 7.</p>\n  *\n  * @since 2.0\n  * @version $Id$\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n-                if (tokenLen >= 4) {\n-                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n+                if (tokenLen == 2) {\n+                    rule = TwoDigitYearField.INSTANCE;\n                 } else {\n-                    rule = TwoDigitYearField.INSTANCE;\n+                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n--- a/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java\n                 \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n             fdf = FastDateFormat.getInstance(pattern);\n             sdf = new SimpleDateFormat(pattern);\n-            assertEquals(sdf.format(date1), fdf.format(date1));\n-            assertEquals(sdf.format(date2), fdf.format(date2));\n+            // SDF bug fix starting with Java 7\n+            assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));\n+            assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));\n         } finally {\n             Locale.setDefault(realDefaultLocale);\n             TimeZone.setDefault(realDefaultZone);", "timestamp": 1310576497, "metainfo": ""}