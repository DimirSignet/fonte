{"sha": "f48486083f5c26084fb7431f239440caa186dd06", "log": "CAUSE_METHOD_NAMES: Repurposed CAUSE_METHOD_NAME to be a list of method names which may yield a wrapped exception.  getCause(Throwable): Now just wraps getCause(Throwable, String[]), passing in CAUSE_METHOD_NAMES as its list of method names.  getCause(Throwable, String[]): Refactored code extracted from getCause(Throwable) which looks at a list of method names, plus a \"detail\" field.  getCauseUsingMethodName(): Swapped parameter order for consistency.  getCauseUsingFieldName(): New method which introspects fields instead of methods.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n  * <http://www.apache.org/>.\n  */\n \n+import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.sql.SQLException;\n     /**\n      * The name of the <code>getCause()</code> method.\n      */\n-    protected static final String CAUSE_METHOD_NAME = \"getCause\";\n+    protected static final String[] CAUSE_METHOD_NAMES =\n+    {\n+        \"getCause\",\n+        \"getNextException\",\n+        \"getTargetException\",\n+        \"getException\"\n+    };\n \n     /**\n      * The parameters of the <code>getCause()</code> method.\n     \n     /**\n      * Introspects the specified <code>Throwable</code> for a\n-     * <code>getCause()</code> method which returns a\n+     * <code>getCause()</code>, <code>getNextException()</code>,\n+     * <code>getTargetException()</code>, or\n+     * <code>getException()</code> method which returns a\n      * <code>Throwable</code> object (standard as of JDK 1.4, and part\n      * of the {@link\n      * org.apache.commons.lang.exception.NestableException} API),\n-     * extracting and returning the cause of the exception.\n-     * Otherwise, returns <code>null</code>.\n-     *\n-     * <p>TODO: Examine for a \"detail\" public member attribute from\n-     * java.rmi.RemoteException.\n+     * extracting and returning the cause of the exception.  In the\n+     * absence of any such method, the object is inspected for a\n+     * <code>detail</code> field assignable to a\n+     * <code>Throwable</code>.  If none of the above is found, returns\n+     * <code>null</code>.\n      *\n      * @param t The exception to introspect for a cause.\n      * @return The cause of the <code>Throwable</code>.\n      */\n     public static Throwable getCause(Throwable t)\n     {\n+        return getCause(t, CAUSE_METHOD_NAMES);\n+    }\n+    \n+    /**\n+     * Extends the API of {@link #getCause(Throwable)} by\n+     * introspecting for only user-specified method names.\n+     *\n+     * @see #getCause(Throwable)\n+     */\n+    public static Throwable getCause(Throwable t, String[] methodNames)\n+    {\n         Throwable cause = getCauseUsingWellKnownTypes(t);\n         if (cause == null)\n         {\n-            cause = getCauseUsingMethodName(CAUSE_METHOD_NAME, t);\n+            for (int i = 0; i < methodNames.length; i++)\n+            {\n+                cause = getCauseUsingMethodName(t, methodNames[i]);\n+                if (cause != null)\n+                {\n+                    break;\n+                }\n+            }\n+\n+            if (cause == null)\n+            {\n+                cause = getCauseUsingFieldName(t, \"detail\");\n+            }\n         }\n         return cause;\n     }\n     }\n \n     /**\n+     * @param t The exception to examine.\n      * @param methodName The name of the method to find and invoke.\n-     * @param t The exception to examine.\n      * @return The wrapped exception, or <code>null</code> if not\n      * found.\n      */\n-    private static Throwable getCauseUsingMethodName(String methodName,\n-                                                     Throwable t)\n+    private static Throwable getCauseUsingMethodName(Throwable t,\n+                                                     String methodName)\n     {\n         Method method = null;\n         try\n         }\n         return null;\n     }\n+\n+    /**\n+     * @param t The exception to examine.\n+     * @param fieldName The name of the attribute to examine.\n+     * @return The wrapped exception, or <code>null</code> if not\n+     * found.\n+     */\n+    private static Throwable getCauseUsingFieldName(Throwable t,\n+                                                    String fieldName)\n+    {\n+        Field field = null;\n+        try\n+        {\n+            field = t.getClass().getField(fieldName);\n+        }\n+        catch (NoSuchFieldException ignored)\n+        {\n+        }\n+        catch (SecurityException ignored)\n+        {\n+        }\n+\n+        if (field != null &&\n+            Throwable.class.isAssignableFrom(field.getType()))\n+        {\n+            try\n+            {\n+                return (Throwable) field.get(t);\n+            }\n+            catch (IllegalAccessException ignored)\n+            {\n+            }\n+            catch (IllegalArgumentException ignored)\n+            {\n+            }\n+        }\n+        return null;\n+    }\n }", "timestamp": 1029366508, "metainfo": ""}