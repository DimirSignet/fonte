{"sha": "7c7d0ddee9c90d9a9b930fea45b4d71770ca099a", "log": "Added new class CompositeFormat, as per issue #30184 (http://issues.apache.org/bugzilla/show_bug.cgi?id=30184)  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/text/CompositeFormat.java\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.text;\n+\n+import java.text.Format;\n+import java.text.FieldPosition;\n+import java.text.ParsePosition;\n+\n+/**\n+ * Formats using one formatter and parses using a different formatter.\n+ * An example of use for this would be a webapp where data is taken in one way\n+ * and stored in a database another way.\n+ *\n+ * @author Archimedes Trajano\n+ */\n+public class CompositeFormat extends Format {\n+\n+    private final Format parser;\n+    private final Format formatter;\n+\n+    /**\n+     * Create a format that points its parseObject method to one implementation \n+     * and its format method to another. \n+     *\n+     * @param Format parser implementation\n+     * @param Format formatter implementation\n+     */\n+    public CompositeFormat(Format parser, Format formatter) {\n+        this.parser = parser;\n+        this.formatter = formatter;\n+    }\n+\n+    /**\n+     * Uses the formatter Format instance. \n+     *\n+     * @see Format.format(Object, StringBuffer, FieldPosition)\n+     */\n+    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n+        return formatter.format(obj,toAppendTo,pos);\n+    }\n+\n+    /**\n+     * Uses the parser Format instance. \n+     *\n+     * @see Format.parseObject(String, ParsePosition)\n+     */\n+    public Object parseObject(String source, ParsePosition pos) {\n+        return parser.parseObject(source,pos);\n+    }\n+\n+    /**\n+     * Provides access to the parser Format implementation. \n+     *\n+     * @return Parser Format implementation\n+     */\n+    public Format getParser() {\n+        return this.parser;\n+    }\n+\n+    /**\n+     * Provides access to the parser Format implementation. \n+     *\n+     * @return Formatter Format implementation\n+     */\n+    public Format getFormatter() {\n+        return this.formatter;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/text/CompositeFormatTest.java\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang.text;\n+\n+import java.text.Format;\n+import java.text.FieldPosition;\n+import java.text.ParsePosition;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang.text.CompositeFormat}.\n+ */\n+public class CompositeFormatTest extends TestCase {\n+\n+    /**\n+     * Main method.\n+     * \n+     * @param args  command line arguments, ignored\n+     */\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Return a new test suite containing this test case.\n+     * \n+     * @return a new test suite containing this test case\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(CompositeFormatTest.class);\n+        suite.setName(\"CompositeFormat Tests\");\n+        return suite;\n+    }\n+\n+    /**\n+     * Create a new test case with the specified name.\n+     * \n+     * @param name\n+     *            name\n+     */\n+    public CompositeFormatTest(String name) {\n+        super(name);\n+    }\n+\n+\n+    /**\n+     * Ensures that the parse/format separation is correctly maintained. \n+     */\n+    public void testCompositeFormat() {\n+\n+        Format parser = new Format() {\n+            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n+                throw new UnsupportedOperationException(\"Not implemented\");\n+            }\n+\n+            public Object parseObject(String source, ParsePosition pos) {\n+                return null;    // do nothing\n+            }\n+        };\n+\n+        Format formatter = new Format() {\n+            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n+                return null;    // do nothing\n+            }\n+\n+            public Object parseObject(String source, ParsePosition pos) {\n+                throw new UnsupportedOperationException(\"Not implemented\");\n+            }\n+        };\n+\n+        Format composite = new CompositeFormat(parser, formatter);\n+\n+        composite.parseObject(\"\", null);\n+        composite.format(new Object(), new StringBuffer(), null);\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/text/TextTestSuite.java\n+++ b/src/test/org/apache/commons/lang/text/TextTestSuite.java\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         suite.setName(\"Commons-Lang-Text Tests\");\n+        suite.addTest(CompositeFormatTest.suite());\n         suite.addTest(StrBuilderTest.suite());\n         suite.addTest(StrBuilderAppendInsertTest.suite());\n         suite.addTest(StrMatcherTest.suite());", "timestamp": 1145257190, "metainfo": ""}