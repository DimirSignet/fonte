{"sha": "80f76eea33bd05c8d8ee3b7c823b5ae9a4f9b651", "log": "Committing work in progress version of a new Range class to replace the math.*Range classes as discussed in LANG-551  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/Range.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * <p><code>Range</code> represents a range of numbers of the same type.</p>\n+ * \n+ * @author Apache Software Foundation\n+ * @since 3.0\n+ * @version $Id: Range.java 830032 2009-10-27 00:15:00Z scolebourne $\n+ */\n+// TODO: Serializable?\n+public class Range<T> {\n+\n+    private final Comparator comparator;\n+    private final T minimum;\n+    private final T maximum;\n+\n+    /**\n+     * <p>Constructs a new <code>Range</code> using the specified\n+     * element as both the minimum and maximum in this range.</p>\n+     * <p>The range uses the natural ordering of the elements to \n+     * determine where values lie in the range.</p>\n+     *\n+     * @param element  the value to use for this range, must not be <code>null</code>\n+     * @throws IllegalArgumentException if the value is <code>null</code>\n+     */\n+// TODO: Ideally this would only support <T extends Comparable<? super T>>\n+    public Range(T element) {\n+        this(element, element);\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>Range</code> with the specified\n+     * minimum and maximum values (both inclusive).</p>\n+     * <p>The range uses the natural ordering of the elements to \n+     * determine where values lie in the range.</p>\n+     *\n+     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n+     * getMinimum and getMaximum methods will return the correct values.</p>\n+     *\n+     * @param element1  first value that defines the edge of the range, inclusive\n+     * @param element2  second value that defines the edge of the range, inclusive\n+     * @throws IllegalArgumentException if either value is <code>null</code>\n+     */\n+// TODO: Ideally this would only support <T extends Comparable<? super T>>\n+    public Range(T element1, T element2) {\n+        this(element1, element2, ComparableComparator.INSTANCE);\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>Range</code> using the specified\n+     * element as both the minimum and maximum in this range.</p>\n+     * <p>The range uses the passed in <code>Comparator</code> to \n+     * determine where values lie in the range.</p>\n+     *\n+     * @param element  the value to use for this range, must not be <code>null</code>\n+     * @throws IllegalArgumentException if the value is <code>null</code>\n+     */\n+    public Range(T element, Comparator c) {\n+        this(element, element, c);\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>Range</code> with the specified\n+     * minimum and maximum values (both inclusive).</p>\n+     * <p>The range uses the passed in <code>Comparator</code> to \n+     * determine where values lie in the range.</p>\n+     *\n+     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n+     * getMinimum and getMaximum methods will return the correct values.</p>\n+     *\n+     * @param element1  first value that defines the edge of the range, inclusive\n+     * @param element2  second value that defines the edge of the range, inclusive\n+     * @throws IllegalArgumentException if either value is <code>null</code>\n+     */\n+    public Range(T element1, T element2, Comparator c) {\n+        if(element1 == null || element2 == null) {\n+            throw new IllegalArgumentException(\"Elements in a range must not be null: element1=\" + \n+                                               element1 + \", element2=\" + element2);\n+        }\n+\n+        if(c == null) {\n+            throw new IllegalArgumentException(\"Comparator must not be null\");\n+        }\n+\n+        if(c.compare(element1, element2) < 1) {\n+            this.minimum = element1;\n+            this.maximum = element2;\n+        } else {\n+            this.minimum = element2;\n+            this.maximum = element1;\n+        }\n+        this.comparator = c;\n+    }\n+\n+    // Accessors\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the minimum value in this range.</p>\n+     *\n+     * @return the minimum value in this range\n+     */\n+    public T getMinimum() {\n+        return this.minimum;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum value in this range.</p>\n+     *\n+     * @return the maximum value in this range\n+     */\n+    public T getMaximum() {\n+        return this.maximum;\n+    }\n+\n+    /**\n+     * <p>Gets the comparator being used to determine if objects are within the range. </p>\n+     *\n+     * @return the comparator being used\n+     */\n+    public Comparator getComparator() {\n+        return this.comparator;\n+    }\n+\n+    /**\n+     * <p>Whether or not the Range is using the default natural comparison method \n+     * to compare elements. </p>\n+     *\n+     * @return whether or not the default Comparator is in use\n+     */\n+    public boolean isDefaultNaturalOrdering() {\n+        return this.comparator == ComparableComparator.INSTANCE;\n+    }\n+\n+    // Include tests\n+    //--------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Tests whether the specified <code>Number</code> occurs within\n+     * this range.</p>\n+     * \n+     * <p>The exact comparison implementation varies by subclass. It is\n+     * intended that an <code>int</code> specific subclass will compare using\n+     * <code>int</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param number  the number to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified number occurs within this range\n+     * @throws IllegalArgumentException if the <code>Number</code> cannot be compared\n+     */\n+    public boolean contains(T t) {\n+// TODO: Rewrite in terms of !lessThan and !greaterThan?\n+        return (comparator.compare(t, getMinimum()) > -1) && (comparator.compare(t, getMaximum()) < 1);\n+    }\n+\n+    public boolean lessThan(T element) {\n+        if (element == null) {\n+            return false;\n+        }\n+        \n+        return this.comparator.compare(this.getMinimum(), element) < 1;\n+    }\n+\n+    public boolean greaterThan(T element) {\n+        if (element == null) {\n+            return false;\n+        }\n+        \n+        return this.comparator.compare(getMaximum(), element) > -1;\n+    }\n+\n+    // Range tests\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Tests whether the specified range occurs entirely within this range.</p>\n+     * \n+     * <p>The exact comparison implementation varies by subclass. It is\n+     * intended that an <code>int</code> specific subclass will compare using\n+     * <code>int</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #containsNumber(Number)} method.\n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range occurs entirely within\n+     *  this range; otherwise, <code>false</code>\n+     * @throws IllegalArgumentException if the <code>Range</code> cannot be compared\n+     */\n+    public boolean containsRange(Range<T> range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return contains(range.getMinimum()) \n+            && contains(range.getMaximum());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified range overlaps with this range.</p>\n+     * \n+     * <p>The exact comparison implementation varies by subclass. It is\n+     * intended that an <code>int</code> specific subclass will compare using\n+     * <code>int</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #containsNumber(Number)} and\n+     * {@link #containsRange(Range)} methods.\n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range overlaps with this\n+     *  range; otherwise, <code>false</code>\n+     * @throws IllegalArgumentException if the <code>Range</code> cannot be compared\n+     */\n+    public boolean overlapsRange(Range<T> range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return range.contains(getMinimum())\n+            || range.contains(getMaximum())\n+            || contains(range.getMinimum());\n+    }\n+\n+    // Basics\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Compares this range to another object to test if they are equal.</p>.\n+     * \n+     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumNumber()} and \n+     * {@link #getMaximumNumber()} methods. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @param obj the reference object with which to compare\n+     * @return <code>true</code> if this object is equal\n+     */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        } else if (obj == null || obj.getClass() != getClass()) {\n+            return false;\n+        } else {\n+            Range range = (Range) obj;\n+            return getMinimum().equals(range.getMinimum()) &&\n+                   getMaximum().equals(range.getMaximum());\n+        }\n+    }\n+\n+    /**\n+     * <p>Gets a hashCode for the range.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumNumber()} and \n+     * {@link #getMaximumNumber()} methods. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return a hash code value for this object\n+     */\n+    @Override\n+    public int hashCode() {\n+        int result = 17;\n+        result = 37 * result + getClass().hashCode();\n+        result = 37 * result + getMinimum().hashCode();\n+        result = 37 * result + getMaximum().hashCode();\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Gets the range as a <code>String</code>.</p>\n+     *\n+     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumNumber()} and \n+     * {@link #getMaximumNumber()} methods. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return the <code>String</code> representation of this range\n+     */\n+    @Override\n+    public String toString() {\n+        StringBuilder buf = new StringBuilder(32);\n+        buf.append(\"Range[\");\n+        buf.append(getMinimum());\n+        buf.append(',');\n+        buf.append(getMaximum());\n+        buf.append(']');\n+        return buf.toString();\n+    }\n+\n+\n+    // Taken from Commons Collections - documentation removed as not a public class\n+    private static class ComparableComparator<E extends Comparable<? super E>> implements Comparator<E> {\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static final ComparableComparator<?> INSTANCE = new ComparableComparator();\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static <E extends Comparable<? super E>> ComparableComparator<E> getInstance() {\n+            return (ComparableComparator<E>) INSTANCE;\n+        }\n+\n+        public ComparableComparator() {\n+            super();\n+        }\n+\n+        public int compare(E obj1, E obj2) {\n+            return obj1.compareTo(obj2);\n+        }\n+\n+        public int hashCode() {\n+            return \"ComparableComparator\".hashCode();\n+        }\n+\n+        public boolean equals(Object object) {\n+            return (this == object) || \n+                   ((null != object) && (object.getClass().equals(this.getClass())));\n+        }\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/RangeTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * <p>\n+ * Tests the methods in the {@link org.apache.commons.lang.Range} class.\n+ * </p>\n+ * \n+ * @version $Id: RangeTest.java 754804 2009-03-16 02:06:18Z sebb $\n+ */\n+public class RangeTest extends TestCase {\n+\n+    private Range byteRange;\n+    private Range byteRange2;\n+    private Range byteRange3;\n+\n+    private Range<Integer> intRange;\n+    private Range<Long> longRange;\n+    private Range<Float> floatRange;\n+    private Range<Double> doubleRange;\n+\n+    @Override\n+    public void setUp() {\n+        byteRange   = new Range((byte) 0, (byte) 5);\n+        byteRange2  = new Range((byte) 0, (byte) 5);\n+        byteRange3  = new Range((byte) 0, (byte) 10);\n+\n+        intRange    = new Range<Integer>((int) 10, (int) 20);\n+        longRange   = new Range<Long>((long) 10, (long) 20);\n+        floatRange  = new Range<Float>((float) 10, (float) 20);\n+        doubleRange = new Range<Double>((double) 10, (double) 20);\n+    }\n+\n+    /**\n+     * Test method for 'org.apache.commons.lang.Range.equals(Object)'\n+     */\n+    public void testEqualsObject() {\n+        assertEquals(byteRange, byteRange);\n+        assertEquals(byteRange, byteRange2);\n+        assertEquals(byteRange2, byteRange2);\n+        assertTrue(byteRange.equals(byteRange));\n+        assertTrue(byteRange2.equals(byteRange2));\n+        assertTrue(byteRange3.equals(byteRange3));\n+        assertFalse(byteRange2.equals(byteRange3));\n+        assertFalse(byteRange2.equals(null));\n+        assertFalse(byteRange2.equals(\"Ni!\"));\n+    }\n+\n+    /**\n+     * Test method for 'org.apache.commons.lang.Range.hashCode()'\n+     */\n+    public void testHashCode() {\n+        assertEquals(byteRange.hashCode(), byteRange2.hashCode());\n+        assertFalse(byteRange.hashCode() == byteRange3.hashCode());\n+    }\n+\n+    /**\n+     * Test method for 'org.apache.commons.lang.Range.toString()'\n+     */\n+    public void testToString() {\n+        assertNotNull(byteRange.toString());\n+    }\n+\n+    // --------------------------------------------------------------------------\n+    public void testGetMinimum() {\n+        assertEquals(10, (int) intRange.getMinimum());\n+        assertEquals(10L, (long) longRange.getMinimum());\n+        assertEquals(10f, floatRange.getMinimum(), 0.00001f);\n+        assertEquals(10d, doubleRange.getMinimum(), 0.00001d);\n+    }\n+    \n+    public void testGetMaximum() {\n+        assertEquals(20, (int) intRange.getMaximum());\n+        assertEquals(20L, (long) longRange.getMaximum());\n+        assertEquals(20f, floatRange.getMaximum(), 0.00001f);\n+        assertEquals(20d, doubleRange.getMaximum(), 0.00001d);\n+    }\n+}", "timestamp": 1257494182, "metainfo": ""}