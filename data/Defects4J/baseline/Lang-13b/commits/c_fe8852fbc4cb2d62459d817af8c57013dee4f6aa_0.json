{"sha": "fe8852fbc4cb2d62459d817af8c57013dee4f6aa", "log": "Moving equalsIgnoreCase, indexOfIgnoreCase, lastIndexOfIgnoreCase and containsIgnoreCase to the CharSequence API. LANG-687  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n     }\n \n     /**\n-     * <p>Compares two Strings, returning {@code true} if they are equal ignoring\n+     * <p>Compares two CharSequences, returning {@code true} if they are equal ignoring\n      * the case.</p>\n      *\n      * <p>{@code null}s are handled without exceptions. Two {@code null}\n      * StringUtils.equalsIgnoreCase(\"abc\", \"ABC\") = true\n      * </pre>\n      *\n-     * @see java.lang.String#equalsIgnoreCase(String)\n-     * @param str1  the first String, may be null\n-     * @param str2  the second String, may be null\n-     * @return {@code true} if the Strings are equal, case insensitive, or\n+     * @param str1  the first CharSequence, may be null\n+     * @param str2  the second CharSequence, may be null\n+     * @return {@code true} if the CharSequence are equal, case insensitive, or\n      *  both {@code null}\n      */\n-    public static boolean equalsIgnoreCase(String str1, String str2) {\n-        return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);\n+    public static boolean equalsIgnoreCase(CharSequence str1, CharSequence str2) {\n+        if (str1 == null || str2 == null) {\n+            return str1 == str2;\n+        } else {\n+            return regionMatchesSequence(str1, true, 0, str2, 0, Math.max(str1.length(), str2.length()));\n+        }\n     }\n \n     // IndexOf\n     }\n \n     /**\n-     * <p>Case in-sensitive find of the first index within a String.</p>\n-     *\n-     * <p>A {@code null} String will return {@code -1}.\n+     * <p>Case in-sensitive find of the first index within a CharSequence.</p>\n+     *\n+     * <p>A {@code null} CharSequence will return {@code -1}.\n      * A negative start position is treated as zero.\n-     * An empty (\"\") search String always matches.\n+     * An empty (\"\") search CharSequence always matches.\n      * A start position greater than the string length only matches\n-     * an empty search String.</p>\n+     * an empty search CharSequence.</p>\n      *\n      * <pre>\n      * StringUtils.indexOfIgnoreCase(null, *)          = -1\n      * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"ab\") = 1\n      * </pre>\n      *\n-     * @param str  the String to check, may be null\n-     * @param searchStr  the String to find, may be null\n-     * @return the first index of the search String,\n+     * @param str  the CharSequence to check, may be null\n+     * @param searchStr  the CharSequence to find, may be null\n+     * @return the first index of the search CharSequence,\n      *  -1 if no match or {@code null} string input\n      * @since 2.5\n      */\n-    public static int indexOfIgnoreCase(String str, String searchStr) {\n+    public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr) {\n         return indexOfIgnoreCase(str, searchStr, 0);\n     }\n \n     /**\n-     * <p>Case in-sensitive find of the first index within a String\n+     * <p>Case in-sensitive find of the first index within a CharSequence\n      * from the specified position.</p>\n      *\n-     * <p>A {@code null} String will return {@code -1}.\n+     * <p>A {@code null} CharSequence will return {@code -1}.\n      * A negative start position is treated as zero.\n-     * An empty (\"\") search String always matches.\n+     * An empty (\"\") search CharSequence always matches.\n      * A start position greater than the string length only matches\n-     * an empty search String.</p>\n+     * an empty search CharSequence.</p>\n      *\n      * <pre>\n      * StringUtils.indexOfIgnoreCase(null, *, *)          = -1\n      * StringUtils.indexOfIgnoreCase(\"abc\", \"\", 9)        = 3\n      * </pre>\n      *\n-     * @param str  the String to check, may be null\n-     * @param searchStr  the String to find, may be null\n+     * @param str  the CharSequence to check, may be null\n+     * @param searchStr  the CharSequence to find, may be null\n      * @param startPos  the start position, negative treated as zero\n-     * @return the first index of the search String,\n+     * @return the first index of the search CharSequence,\n      *  -1 if no match or {@code null} string input\n      * @since 2.5\n      */\n-    public static int indexOfIgnoreCase(String str, String searchStr, int startPos) {\n+    public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos) {\n         if (str == null || searchStr == null) {\n             return INDEX_NOT_FOUND;\n         }\n             return startPos;\n         }\n         for (int i = startPos; i < endLimit; i++) {\n-            if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {\n+            if (regionMatchesSequence(str, true, i, searchStr, 0, searchStr.length())) {\n                 return i;\n             }\n         }\n     }\n \n     /**\n-     * <p>Case in-sensitive find of the last index within a String.</p>\n-     *\n-     * <p>A {@code null} String will return {@code -1}.\n+     * <p>Case in-sensitive find of the last index within a CharSequence.</p>\n+     *\n+     * <p>A {@code null} CharSequence will return {@code -1}.\n      * A negative start position returns {@code -1}.\n-     * An empty (\"\") search String always matches unless the start position is negative.\n+     * An empty (\"\") search CharSequence always matches unless the start position is negative.\n      * A start position greater than the string length searches the whole string.</p>\n      *\n      * <pre>\n      * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\") = 4\n      * </pre>\n      *\n-     * @param str  the String to check, may be null\n-     * @param searchStr  the String to find, may be null\n-     * @return the first index of the search String,\n+     * @param str  the CharSequence to check, may be null\n+     * @param searchStr  the CharSequence to find, may be null\n+     * @return the first index of the search CharSequence,\n      *  -1 if no match or {@code null} string input\n      * @since 2.5\n      */\n-    public static int lastIndexOfIgnoreCase(String str, String searchStr) {\n+    public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr) {\n         if (str == null || searchStr == null) {\n             return INDEX_NOT_FOUND;\n         }\n     }\n \n     /**\n-     * <p>Case in-sensitive find of the last index within a String\n+     * <p>Case in-sensitive find of the last index within a CharSequence\n      * from the specified position.</p>\n      *\n-     * <p>A {@code null} String will return {@code -1}.\n+     * <p>A {@code null} CharSequence will return {@code -1}.\n      * A negative start position returns {@code -1}.\n-     * An empty (\"\") search String always matches unless the start position is negative.\n+     * An empty (\"\") search CharSequence always matches unless the start position is negative.\n      * A start position greater than the string length searches the whole string.</p>\n      *\n      * <pre>\n      * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 0)  = -1\n      * </pre>\n      *\n-     * @param str  the String to check, may be null\n-     * @param searchStr  the String to find, may be null\n+     * @param str  the CharSequence to check, may be null\n+     * @param searchStr  the CharSequence to find, may be null\n      * @param startPos  the start position\n-     * @return the first index of the search String,\n-     *  -1 if no match or {@code null} string input\n+     * @return the first index of the search CharSequence,\n+     *  -1 if no match or {@code null} input\n      * @since 2.5\n      */\n-    public static int lastIndexOfIgnoreCase(String str, String searchStr, int startPos) {\n+    public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos) {\n         if (str == null || searchStr == null) {\n             return INDEX_NOT_FOUND;\n         }\n         }\n \n         for (int i = startPos; i >= 0; i--) {\n-            if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {\n+            if (regionMatchesSequence(str, true, i, searchStr, 0, searchStr.length())) {\n                 return i;\n             }\n         }\n     }\n \n     /**\n-     * <p>Checks if String contains a search String irrespective of case,\n+     * <p>Checks if CharSequence contains a search CharSequence irrespective of case,\n      * handling {@code null}. Case-insensitivity is defined as by\n      * {@link String#equalsIgnoreCase(String)}.\n      *\n-     * <p>A {@code null} String will return {@code false}.</p>\n+     * <p>A {@code null} CharSequence will return {@code false}.</p>\n      *\n      * <pre>\n      * StringUtils.contains(null, *) = false\n      * StringUtils.contains(\"abc\", \"Z\") = false\n      * </pre>\n      *\n-     * @param str  the String to check, may be null\n-     * @param searchStr  the String to find, may be null\n-     * @return true if the String contains the search String irrespective of\n+     * @param str  the CharSequence to check, may be null\n+     * @param searchStr  the CharSequence to find, may be null\n+     * @return true if the CharSequence contains the search CharSequence irrespective of\n      * case or false if not or {@code null} string input\n      */\n-    public static boolean containsIgnoreCase(String str, String searchStr) {\n+    public static boolean containsIgnoreCase(CharSequence str, CharSequence searchStr) {\n         if (str == null || searchStr == null) {\n             return false;\n         }\n         int len = searchStr.length();\n         int max = str.length() - len;\n         for (int i = 0; i <= max; i++) {\n-            if (str.regionMatches(true, i, searchStr, 0, len)) {\n+            if (regionMatchesSequence(str, true, i, searchStr, 0, len)) {\n                 return true;\n             }\n         }", "timestamp": 1302135890, "metainfo": ""}