{"sha": "bbf4b7204c23b503bf71900859bba5be9dd6662b", "log": "Port to JUnit 4.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java\n  */\n package org.apache.commons.lang3.builder;\n \n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.math.BigInteger;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.builder.CompareToBuilder}.\n  *\n  * @version $Id$\n  */\n-public class CompareToBuilderTest extends TestCase {\n-\n-    public CompareToBuilderTest(String name) {\n-        super(name);\n-    }\n+public class CompareToBuilderTest {\n \n     //-----------------------------------------------------------------------\n \n         }\n     }\n     \n+    @Test\n     public void testReflectionCompare() {\n         TestObject o1 = new TestObject(4);\n         TestObject o2 = new TestObject(4);\n         assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0);\n     }\n \n+    @Test\n     public void testReflectionCompareEx1() {\n         TestObject o1 = new TestObject(4);\n         try {\n         fail();\n     }\n \n+    @Test\n     public void testReflectionCompareEx2() {\n         TestObject o1 = new TestObject(4);\n         Object o2 = new Object();\n         } catch (ClassCastException ex) {}\n     }\n \n+    @Test\n     public void testReflectionHierarchyCompare() {\n         testReflectionHierarchyCompare(false, null);\n     }\n     \n+    @Test\n     public void testReflectionHierarchyCompareExcludeFields() {\n         String[] excludeFields = new String[] { \"b\" };\n         testReflectionHierarchyCompare(true, excludeFields);\n         assertXYZCompareOrder(x, y, z, true, excludeFields);\n     }\n     \n+    @Test\n     public void testReflectionHierarchyCompareTransients() {\n         testReflectionHierarchyCompare(true, null);\n \n         assertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients, null, excludeFields));\n     }\n     \n-    public void testReflectionHierarchyCompare(boolean testTransients, String[] excludeFields) {\n+    private void testReflectionHierarchyCompare(boolean testTransients, String[] excludeFields) {\n         TestObject to1 = new TestObject(1);\n         TestObject to2 = new TestObject(2);\n         TestObject to3 = new TestObject(3);\n      * @param testTransients Whether to include transients in the comparison\n      * @param excludeFields fields to exclude\n      */\n-    public void assertReflectionCompareContract(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {\n+    private void assertReflectionCompareContract(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {\n \n         // signum\n         assertTrue(reflectionCompareSignum(x, y, testTransients, excludeFields) == -reflectionCompareSignum(y, x, testTransients, excludeFields));\n         return BigInteger.valueOf(CompareToBuilder.reflectionCompare(lhs, rhs, testTransients)).signum();\n     }\n     \n+    @Test\n     public void testAppendSuper() {\n         TestObject o1 = new TestObject(4);\n         TestObject o2 = new TestObject(5);\n         assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0);\n     }\n     \n+    @Test\n     public void testObject() {\n         TestObject o1 = new TestObject(4);\n         TestObject o2 = new TestObject(4);\n         assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0);\n     }\n     \n+    @Test\n     public void testObjectBuild() {\n         TestObject o1 = new TestObject(4);\n         TestObject o2 = new TestObject(4);\n         assertTrue(new CompareToBuilder().append(null, o1).build() < 0);\n     }\n \n+    @Test\n     public void testObjectEx2() {\n         TestObject o1 = new TestObject(4);\n         Object o2 = new Object();\n         } catch (ClassCastException ex) {}\n     }\n \n+    @Test\n     public void testObjectComparator() {\n         String o1 = \"Fred\";\n         String o2 = \"Fred\";\n         assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);\n     }\n     \n+    @Test\n     public void testObjectComparatorNull() {\n         String o1 = \"Fred\";\n         String o2 = \"Fred\";\n         assertTrue(new CompareToBuilder().append(null, o1, null).toComparison() < 0);\n     }\n \n+    @Test\n     public void testLong() {\n         long o1 = 1L;\n         long o2 = 2L;\n         assertTrue(new CompareToBuilder().append(Long.MIN_VALUE, o1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testInt() {\n         int o1 = 1;\n         int o2 = 2;\n         assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE, o1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testShort() {\n         short o1 = 1;\n         short o2 = 2;\n         assertTrue(new CompareToBuilder().append(Short.MIN_VALUE, o1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testChar() {\n         char o1 = 1;\n         char o2 = 2;\n         assertTrue(new CompareToBuilder().append(Character.MIN_VALUE, o1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testByte() {\n         byte o1 = 1;\n         byte o2 = 2;\n         assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE, o1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testDouble() {\n         double o1 = 1;\n         double o2 = 2;\n         assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);\n     }\n \n+    @Test\n     public void testFloat() {\n         float o1 = 1;\n         float o2 = 2;\n         assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);\n     }\n \n+    @Test\n     public void testBoolean() {\n         boolean o1 = true;\n         boolean o2 = false;\n         assertTrue(new CompareToBuilder().append(o2, o1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testObjectArray() {\n         TestObject[] obj1 = new TestObject[2];\n         obj1[0] = new TestObject(4);\n         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testLongArray() {\n         long[] obj1 = new long[2];\n         obj1[0] = 5L;\n         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testIntArray() {\n         int[] obj1 = new int[2];\n         obj1[0] = 5;\n         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testShortArray() {\n         short[] obj1 = new short[2];\n         obj1[0] = 5;\n         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testCharArray() {\n         char[] obj1 = new char[2];\n         obj1[0] = 5;\n         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testByteArray() {\n         byte[] obj1 = new byte[2];\n         obj1[0] = 5;\n         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testDoubleArray() {\n         double[] obj1 = new double[2];\n         obj1[0] = 5;\n         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testFloatArray() {\n         float[] obj1 = new float[2];\n         obj1[0] = 5;\n         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testBooleanArray() {\n         boolean[] obj1 = new boolean[2];\n         obj1[0] = true;\n         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testMultiLongArray() {\n         long[][] array1 = new long[2][2];\n         long[][] array2 = new long[2][2];\n         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testMultiIntArray() {\n         int[][] array1 = new int[2][2];\n         int[][] array2 = new int[2][2];\n         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testMultiShortArray() {\n         short[][] array1 = new short[2][2];\n         short[][] array2 = new short[2][2];\n         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testMultiCharArray() {\n         char[][] array1 = new char[2][2];\n         char[][] array2 = new char[2][2];\n         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testMultiByteArray() {\n         byte[][] array1 = new byte[2][2];\n         byte[][] array2 = new byte[2][2];\n         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n     }\n     \n+    @Test\n     public void testMultiFloatArray() {\n         float[][] array1 = new float[2][2];\n         float[][] array2 = new float[2][2];\n         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testMultiDoubleArray() {\n         double[][] array1 = new double[2][2];\n         double[][] array2 = new double[2][2];\n         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testMultiBooleanArray() {\n         boolean[][] array1 = new boolean[2][2];\n         boolean[][] array2 = new boolean[2][2];\n         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testRaggedArray() {\n         long array1[][] = new long[2][];\n         long array2[][] = new long[2][];\n         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testMixedArray() {\n         Object array1[] = new Object[2];\n         Object array2[] = new Object[2];\n         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testObjectArrayHiddenByObject() {\n         TestObject[] array1 = new TestObject[2];\n         array1[0] = new TestObject(4);\n         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testLongArrayHiddenByObject() {\n         long[] array1 = new long[2];\n         array1[0] = 5L;\n         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testIntArrayHiddenByObject() {\n         int[] array1 = new int[2];\n         array1[0] = 5;\n         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testShortArrayHiddenByObject() {\n         short[] array1 = new short[2];\n         array1[0] = 5;\n         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testCharArrayHiddenByObject() {\n         char[] array1 = new char[2];\n         array1[0] = 5;\n         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testByteArrayHiddenByObject() {\n         byte[] array1 = new byte[2];\n         array1[0] = 5;\n         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testDoubleArrayHiddenByObject() {\n         double[] array1 = new double[2];\n         array1[0] = 5;\n         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testFloatArrayHiddenByObject() {\n         float[] array1 = new float[2];\n         array1[0] = 5;\n         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n     }\n \n+    @Test\n     public void testBooleanArrayHiddenByObject() {\n         boolean[] array1 = new boolean[2];\n         array1[0] = true;", "timestamp": 1318950662, "metainfo": ""}