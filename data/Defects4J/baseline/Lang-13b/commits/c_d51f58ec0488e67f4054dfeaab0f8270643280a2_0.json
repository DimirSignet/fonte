{"sha": "d51f58ec0488e67f4054dfeaab0f8270643280a2", "log": "Javadoc and clarify null handling  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/EnumUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/EnumUtils.java\n import java.util.Map;\n \n /**\n- * Utility library to provide helper methods for Java enums.\n+ * <p>Utility library to provide helper methods for Java enums.</p>\n  * \n  * <p>#ThreadSafe#</p>\n+ * \n  * @author Apache Software Foundation\n+ * @since 3.0\n  * @version $Id$\n  */\n public class EnumUtils {\n     }\n \n     /**\n-     * Gets the <code>Map</code> of <code>enums</code> by name.\n-     * <p>\n-     * This method is useful when you need a map of enums by name.\n+     * <p>Gets the {@code Map} of enums by name.</p>\n+     * \n+     * <p>This method is useful when you need a map of enums by name.</p>\n      *\n-     * @param enumClass  the class of the <code>enum</code> to get, not null\n+     * @param enumClass  the class of the enum to query, not null\n      * @return the modifiable map of enum names to enums, never null\n      */\n     public static <E extends Enum<E>> Map<String, E> getEnumMap(Class<E> enumClass) {\n     }\n \n     /**\n-     * Gets the <code>List</code> of <code>enums</code>.\n-     * <p>\n-     * This method is useful when you need a list of enums rather than an array.\n+     * <p>Gets the {@code List} of enums.</p>\n+     * \n+     * <p>This method is useful when you need a list of enums rather than an array.</p>\n      *\n-     * @param enumClass  the class of the <code>enum</code> to get, not null\n+     * @param enumClass  the class of the enum to query, not null\n      * @return the modifiable list of enums, never null\n      */\n     public static <E extends Enum<E>> List<E> getEnumList(Class<E> enumClass) {\n     }\n \n     /**\n-     * Checks if the specified name is a valid <code>enum</code> for the class.\n-     * <p>\n-     * This method differs from {@link Enum#valueOf} in that checks if the name is\n-     * a valid enum without needing to catch the exception.\n+     * <p>Checks if the specified name is a valid enum for the class.</p>\n+     * \n+     * <p>This method differs from {@link Enum#valueOf} in that checks if the name is\n+     * a valid enum without needing to catch the exception.</p>\n      *\n-     * @param enumClass  the class of the <code>enum</code> to get, not null\n-     * @param enumName   the enum name\n+     * @param enumClass  the class of the enum to query, not null\n+     * @param enumName   the enum name, null returns false\n      * @return true if the enum name is valid, otherwise false\n      */\n     public static <E extends Enum<E>> boolean isValidEnum(Class<E> enumClass, String enumName) {\n+        if (enumName == null) {\n+            return false;\n+        }\n         try {\n             Enum.valueOf(enumClass, enumName);\n             return true;\n     }\n \n     /**\n-     * Gets the <code>enum</code> for the class, returning <code>null</code> if not found.\n-     * <p>\n-     * This method differs from {@link Enum#valueOf} in that it does not throw an exception\n-     * for an invalid enum name.\n+     * <p>Gets the enum for the class, returning {@code null} if not found.</p>\n+     * \n+     * <p>This method differs from {@link Enum#valueOf} in that it does not throw an exception\n+     * for an invalid enum name.</p>\n      *\n-     * @param enumClass  the class of the <code>enum</code> to get, not null\n-     * @param enumName   the enum name\n-     * @return the enum or null if not found\n+     * @param enumClass  the class of the enum to query, not null\n+     * @param enumName   the enum name, null returns null\n+     * @return the enum, null if not found\n      */\n     public static <E extends Enum<E>> E getEnum(Class<E> enumClass, String enumName) {\n+        if (enumName == null) {\n+            return null;\n+        }\n         try {\n             return Enum.valueOf(enumClass, enumName);\n         } catch (IllegalArgumentException ex) {\n--- a/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java\n         assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"AMBER\"));\n         assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"GREEN\"));\n         assertEquals(false, EnumUtils.isValidEnum(Traffic.class, \"PURPLE\"));\n+        assertEquals(false, EnumUtils.isValidEnum(Traffic.class, null));\n+    }\n+\n+    public void test_isEnum_nullClass() {\n+        try {\n+            EnumUtils.isValidEnum((Class<Traffic>) null, \"PURPLE\");\n+            fail();\n+        } catch (NullPointerException ex) {\n+            // ok\n+        }\n     }\n \n     public void test_getEnum() {\n         assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, \"AMBER\"));\n         assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, \"GREEN\"));\n         assertEquals(null, EnumUtils.getEnum(Traffic.class, \"PURPLE\"));\n+        assertEquals(null, EnumUtils.getEnum(Traffic.class, null));\n+    }\n+\n+    public void test_getEnum_nullClass() {\n+        try {\n+            EnumUtils.getEnum((Class<Traffic>) null, \"PURPLE\");\n+            fail();\n+        } catch (NullPointerException ex) {\n+            // ok\n+        }\n     }\n \n }", "timestamp": 1299249963, "metainfo": ""}