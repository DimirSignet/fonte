{"sha": "a40957d41f35baa19c357600a435a93986dab578", "log": "formatting  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n             return ((String) cs).indexOf(searchChar, start);\n         } else {\n             int sz = cs.length();\n-            if ( start < 0 ) {\n+            if (start < 0) {\n                 start = 0;\n             }\n-            for ( int i=start; i < sz; i++ ) {\n-                if ( cs.charAt(i) == searchChar) {\n+            for (int i = start; i < sz; i++) {\n+                if (cs.charAt(i) == searchChar) {\n                     return i;\n                 }\n             }\n             // TODO: Do we assume searchChar is usually relatively small;\n             //       If so then calling toString() on it is better than reverting to\n             //       the green implementation in the else block\n-            return ((String) cs).indexOf( (String) searchChar, start);\n+            return ((String) cs).indexOf((String) searchChar, start);\n         } else {\n             // TODO: Implement rather than convert to String\n             return cs.toString().indexOf(searchChar.toString(), start);\n             return ((String) cs).lastIndexOf(searchChar, start);\n         } else {\n             int sz = cs.length();\n-            if ( start < 0 ) {\n+            if (start < 0) {\n                 return -1;\n             }\n-            if ( start >= sz ) {\n+            if (start >= sz) {\n                 start = sz - 1;\n             }\n-            for ( int i=start; i >= 0; --i ) {\n-                if ( cs.charAt(i) == searchChar) {\n+            for (int i = start; i >= 0; --i) {\n+                if (cs.charAt(i) == searchChar) {\n                     return i;\n                 }\n             }\n             // TODO: Do we assume searchChar is usually relatively small;\n             //       If so then calling toString() on it is better than reverting to\n             //       the green implementation in the else block\n-            return ((String) cs).lastIndexOf( (String) searchChar, start);\n+            return ((String) cs).lastIndexOf((String) searchChar, start);\n         } else {\n             // TODO: Implement rather than convert to String\n             return cs.toString().lastIndexOf(searchChar.toString(), start);\n         } else {\n             int sz = cs.length();\n             char[] array = new char[cs.length()];\n-            for (int i=0; i < sz; i++) {\n+            for (int i = 0; i < sz; i++) {\n                 array[i] = cs.charAt(i);\n             }\n             return array;\n      * @param length character length of the region\n      * @return whether the region matched\n      */\n-    static boolean regionMatches(CharSequence cs, boolean ignoreCase, int thisStart, \n-                                         CharSequence substring, int start, int length)\n-    {\n+    static boolean regionMatches(CharSequence cs, boolean ignoreCase, int thisStart,\n+            CharSequence substring, int start, int length)    {\n         if (cs instanceof String && substring instanceof String) {\n-            return ((String) cs).regionMatches(ignoreCase, thisStart, ((String)substring), start, length);\n+            return ((String) cs).regionMatches(ignoreCase, thisStart, ((String) substring), start, length);\n         } else {\n             // TODO: Implement rather than convert to String\n             return cs.toString().regionMatches(ignoreCase, thisStart, substring.toString(), start, length);", "timestamp": 1302205663, "metainfo": ""}