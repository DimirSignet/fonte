{"sha": "30c4fa45e2dd1bf5c0136be21e39d6a93dfcb347", "log": "Initial version of ArrayUtils, includes toMap   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.builder.ToStringBuilder;\n+import org.apache.commons.lang.builder.ToStringStyle;\n+/**\n+ * <code>ArrayUtils</code> contains utility methods for working for\n+ * arrays.\n+ *\n+ * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n+ * @author Moritz Petersen\n+ * @version $Id: ArrayUtils.java,v 1.1 2002/10/13 22:42:06 scolebourne Exp $\n+ */\n+public class ArrayUtils {\n+\n+    /** An empty immutable object array */\n+    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n+    /** An empty immutable class array */\n+    public static final Class[] EMPTY_CLASS_ARRAY = new Class[0];\n+    /** An empty immutable string array */\n+    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+    /** An empty immutable long array */\n+    public static final long[] EMPTY_LONG_ARRAY = new long[0];\n+    /** An empty immutable int array */\n+    public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    /** An empty immutable short array */\n+    public static final short[] EMPTY_SHORT_ARRAY = new short[0];\n+    /** An empty immutable byte array */\n+    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n+    /** An empty immutable double array */\n+    public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];\n+    /** An empty immutable float array */\n+    public static final float[] EMPTY_FLOAT_ARRAY = new float[0];\n+    /** An empty immutable boolean array */\n+    public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];\n+    \n+    /**\n+     * ArrayUtils instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.\n+     * This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.\n+     */\n+    public ArrayUtils() {\n+    }\n+\n+    //--------------------------------------------------------------------------\n+    \n+    /**\n+     * Outputs an array as a String, treating null as an empty array.\n+     * <p>\n+     * Multi-dimensional arrays are handled correctly, including \n+     * multi-dimensional primitive arrays.\n+     * The format is that of Java source code, for example {a,b}.\n+     * \n+     * @param array  the array to get a toString for, may not be null\n+     * @return a String representation of the array, '{}' if null passed in\n+     */\n+    public static String toString(Object array) {\n+        return toString(array, \"{}\");\n+    }\n+    \n+    /**\n+     * Outputs an array as a String handling nulls.\n+     * <p>\n+     * Multi-dimensional arrays are handled correctly, including \n+     * multi-dimensional primitive arrays.\n+     * The format is that of Java source code, for example {a,b}.\n+     * \n+     * @param array  the array to get a toString for, may be null\n+     * @param stringIfNull  the String to return if the array is null\n+     * @return a String representation of the array\n+     */    \n+    public static String toString(Object array, String stringIfNull) {\n+        if (array == null) {\n+            return stringIfNull;\n+        }\n+        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n+    }\n+    \n+    /**\n+     * Converts the given array into a {@link Map}. Each element of the array \n+     * must be either a {@link Map.Entry} or an Array, containing at least two\n+     * elements, where the first element is used as key and the second as\n+     * value. This method can be used to initialize:\n+     * \n+     * <pre>\n+     * // Create a Map mapping colors.\n+     * Map colorMap = MapUtils.toMap(new String[][] {{\n+     *     {\"RED\", \"#FF0000\"},\n+     *     {\"GREEN\", \"#00FF00\"},\n+     *     {\"BLUE\", \"#0000FF\"}});\n+     * </pre>\n+     *\n+     * @param array  an array whose elements are either a {@link Map.Entry} or \n+     *  an Array containing at least two elements\n+     * @return a Map that was created from the array\n+     * @throws IllegalArgumentException  if the array is null\n+     * @throws IllegalArgumentException  if one element of this Array is\n+     *  itself an Array containing less then two elements\n+     * @throws IllegalArgumentException  if the array contains elements other\n+     *  than {@link Map.Entry} and an Array\n+     */\n+    public static Map toMap(Object[] array) {\n+        if (array == null) {\n+            throw new IllegalArgumentException(\"The array must not be null\");            \n+        }\n+        Map map = new HashMap((int) (array.length * 1.5));\n+        for (int i = 0; i < array.length; i++) {\n+            Object object = array[i];\n+            if (object instanceof Map.Entry) {\n+                Map.Entry entry = (Map.Entry) object;\n+                map.put(entry.getKey(), entry.getValue());\n+            } else if (object instanceof Object[]) {\n+                Object[] entry = (Object[]) object;\n+                if (entry.length < 2) {\n+                    throw new IllegalArgumentException(\"Array element \" + i + \", '\" \n+                        + object\n+                        + \"', has a length less than 2\");\n+                }\n+                map.put(entry[0], entry[1]);\n+            } else {\n+                throw new IllegalArgumentException(\"Array element \" + i + \", '\" \n+                        + object\n+                        + \"', is neither of type Map.Entry nor an Array\");\n+            }\n+        }\n+        return map;\n+    }\n+    \n+//    /**\n+//     * Output the array as a String.\n+//     * <p>\n+//     * Multi-dimensional arrays are handled by the Object[] method.\n+//     * The format is that of Java source code, for example {1,2}.\n+//     * \n+//     * @param array  the array to get a toString for, must not be null\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is null\n+//     */\n+//    public static String toString(long[] array) {\n+//        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n+//    }\n+//    \n+//    /**\n+//     * Output the array as a String.\n+//     * <p>\n+//     * Multi-dimensional arrays are handled by the Object[] method.\n+//     * The format is that of Java source code, for example {1,2}.\n+//     * \n+//     * @param array  the array to get a toString for, must not be null\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is null\n+//     */\n+//    public static String toString(int[] array) {\n+//        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n+//    }\n+//    \n+//    /**\n+//     * Output the array as a String.\n+//     * <p>\n+//     * Multi-dimensional arrays are handled by the Object[] method.\n+//     * The format is that of Java source code, for example {1,2}.\n+//     * \n+//     * @param array  the array to get a toString for, must not be null\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is null\n+//     */\n+//    public static String toString(short[] array) {\n+//        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n+//    }\n+//    \n+//    /**\n+//     * Output the array as a String.\n+//     * <p>\n+//     * Multi-dimensional arrays are handled by the Object[] method.\n+//     * The format is that of Java source code, for example {1,2}.\n+//     * \n+//     * @param array  the array to get a toString for, must not be null\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is null\n+//     */\n+//    public static String toString(byte[] array) {\n+//        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n+//    }\n+//    \n+//    /**\n+//     * Output the array as a String.\n+//     * <p>\n+//     * Multi-dimensional arrays are handled by the Object[] method.\n+//     * The format is that of Java source code, for example {1.0,2.0}.\n+//     * \n+//     * @param array  the array to get a toString for, must not be null\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is null\n+//     */\n+//    public static String toString(double[] array) {\n+//        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n+//    }\n+//    \n+//    /**\n+//     * Output the array as a String.\n+//     * <p>\n+//     * Multi-dimensional arrays are handled by the Object[] method.\n+//     * The format is that of Java source code, for example {1.0,2.0}.\n+//     * \n+//     * @param array  the array to get a toString for, must not be null\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is null\n+//     */\n+//    public static String toString(float[] array) {\n+//        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n+//    }\n+//    \n+//    /**\n+//     * Output the array as a String.\n+//     * <p>\n+//     * Multi-dimensional arrays are handled by the Object[] method.\n+//     * The format is that of Java source code, for example {true,false}.\n+//     * \n+//     * @param array  the array to get a toString for, must not be null\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is null\n+//     */\n+//    public static String toString(boolean[] array) {\n+//        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n+//    }\n+    \n+    //--------------------------------------------------------------------------\n+\n+    /**\n+     * Shallow clones an array returning a typecast result and handling null.\n+     * <p>\n+     * The objecs in the array are not cloned.\n+     * \n+     * @param array  the array to shallow clone, may not be null\n+     * @return the cloned array, or null if null passed in\n+     */\n+    public static Object[] clone(Object[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (Object[]) array.clone();\n+    }\n+    \n+    /**\n+     * Clones an array returning a typecast result and handling null.\n+     * \n+     * @param array  the array to clone, may not be null\n+     * @return the cloned array, or null if null passed in\n+     */\n+    public static long[] clone(long[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (long[]) array.clone();\n+    }\n+    \n+    /**\n+     * Clones an array returning a typecast result and handling null.\n+     * \n+     * @param array  the array to clone, may not be null\n+     * @return the cloned array, or null if null passed in\n+     */\n+    public static int[] clone(int[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (int[]) array.clone();\n+    }\n+    \n+    /**\n+     * Clones an array returning a typecast result and handling null.\n+     * \n+     * @param array  the array to clone, may not be null\n+     * @return the cloned array, or null if null passed in\n+     */\n+    public static short[] clone(short[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (short[]) array.clone();\n+    }\n+    \n+    /**\n+     * Clones an array returning a typecast result and handling null.\n+     * \n+     * @param array  the array to clone, may not be null\n+     * @return the cloned array, or null if null passed in\n+     */\n+    public static byte[] clone(byte[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (byte[]) array.clone();\n+    }\n+    \n+    /**\n+     * Clones an array returning a typecast result and handling null.\n+     * \n+     * @param array  the array to clone, may not be null\n+     * @return the cloned array, or null if null passed in\n+     */\n+    public static double[] clone(double[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (double[]) array.clone();\n+    }\n+    \n+    /**\n+     * Clones an array returning a typecast result and handling null.\n+     * \n+     * @param array  the array to clone, may not be null\n+     * @return the cloned array, or null if null passed in\n+     */\n+    public static float[] clone(float[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (float[]) array.clone();\n+    }\n+    \n+    /**\n+     * Clones an array returning a typecast result and handling null.\n+     * \n+     * @param array  the array to clone, may not be null\n+     * @return the cloned array, or null if null passed in\n+     */\n+    public static boolean[] clone(boolean[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (boolean[]) array.clone();\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    /**\n+     * Checks whether two arrays are the same length, treating null arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be null\n+     * @param array2 the second array, may be null\n+     * @param true if length of arrays matches, treating null as an empty array\n+     */    \n+    public static boolean isSameLength(Object[] array1, Object[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Checks whether two arrays are the same length, treating null arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be null\n+     * @param array2 the second array, may be null\n+     * @param true if length of arrays matches, treating null as an empty array\n+     */    \n+    public static boolean isSameLength(long[] array1, long[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Checks whether two arrays are the same length, treating null arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be null\n+     * @param array2 the second array, may be null\n+     * @param true if length of arrays matches, treating null as an empty array\n+     */    \n+    public static boolean isSameLength(int[] array1, int[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Checks whether two arrays are the same length, treating null arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be null\n+     * @param array2 the second array, may be null\n+     * @param true if length of arrays matches, treating null as an empty array\n+     */    \n+    public static boolean isSameLength(short[] array1, short[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Checks whether two arrays are the same length, treating null arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be null\n+     * @param array2 the second array, may be null\n+     * @param true if length of arrays matches, treating null as an empty array\n+     */    \n+    public static boolean isSameLength(byte[] array1, byte[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Checks whether two arrays are the same length, treating null arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be null\n+     * @param array2 the second array, may be null\n+     * @param true if length of arrays matches, treating null as an empty array\n+     */    \n+    public static boolean isSameLength(double[] array1, double[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Checks whether two arrays are the same length, treating null arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be null\n+     * @param array2 the second array, may be null\n+     * @param true if length of arrays matches, treating null as an empty array\n+     */    \n+    public static boolean isSameLength(float[] array1, float[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Checks whether two arrays are the same length, treating null arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be null\n+     * @param array2 the second array, may be null\n+     * @param true if length of arrays matches, treating null as an empty array\n+     */    \n+    public static boolean isSameLength(boolean[] array1, boolean[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Checks whether two arrays are the same type taking into account\n+     * multi-dimensional arrays.\n+     * \n+     * @param array1 the first array, must not be null\n+     * @param array2 the second array, must not be null\n+     * @param true if type of arrays matches\n+     * @throws IllegalArgumentException if either array is null\n+     */    \n+    public static boolean isSameType(Object array1, Object array2) {\n+        if (array1 == null || array2 == null) {\n+            throw new IllegalArgumentException(\"The array must not be null\");\n+        }\n+        return array1.getClass().getName().equals(array2.getClass().getName());\n+    }\n+    \n+}", "timestamp": 1034548926, "metainfo": ""}