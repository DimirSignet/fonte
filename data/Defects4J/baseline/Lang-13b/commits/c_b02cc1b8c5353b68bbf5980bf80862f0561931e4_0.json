{"sha": "b02cc1b8c5353b68bbf5980bf80862f0561931e4", "log": "Adding Nelson Carpentier's patch adding an EnumSet to bit vector (and back again) to EnumUtils. LANG-730  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/EnumUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/EnumUtils.java\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.EnumSet;\n \n /**\n  * <p>Utility library to provide helper methods for Java enums.</p>\n         }\n     }\n \n+    /**\n+     * <p>Creates a long bit vector representation of the given subset of an Enum.</p>\n+     *\n+     * <p>This generates a value that is usable by {@link EnumUtils#processBitVector}.</p>\n+     *\n+     * <p>Do not use this method if you have more than 64 values in your Enum, as this\n+     * would create a value greater than a long can hold.</p>\n+     *\n+     * @param enumClass the class of the enum we are working with, not null\n+     * @param set       the set of enum values we want to convert\n+     * @param <E>       the type of the enumeration\n+     * @return a long whose binary value represents the given set of enum values.\n+     */\n+    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, EnumSet<E> set) {\n+        if (enumClass == null) {\n+            throw new IllegalArgumentException(\"EnumClass must be defined.\");\n+        }\n+        final E[] constants = enumClass.getEnumConstants();\n+        if (constants != null && constants.length > 64) {\n+            throw new IllegalArgumentException(\"EnumClass is too big to be stored in a 64-bit value.\");\n+        }\n+        long total = 0;\n+        if (set != null) {\n+            if (constants != null && constants.length > 0) {\n+                for (E constant : constants) {\n+                    if (set.contains(constant)) {\n+                        total += Math.pow(2, constant.ordinal());\n+                    }\n+                }\n+            }\n+        }\n+        return total;\n+    }\n+\n+    /**\n+     * <p>Convert a long value created by {@link EnumUtils#generateBitVector} into the set of\n+     * enum values that it represents.</p>\n+     *\n+     * <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>\n+     * @param enumClass the class of the enum we are working with, not null\n+     * @param value     the long value representation of a set of enum values\n+     * @param <E>       the type of the enumeration\n+     * @return a set of enum values\n+     */\n+    public static <E extends Enum<E>> EnumSet<E> processBitVector(Class<E> enumClass, long value) {\n+        if (enumClass == null) {\n+            throw new IllegalArgumentException(\"EnumClass must be defined.\");\n+        }\n+        final E[] constants = enumClass.getEnumConstants();\n+        if (constants != null && constants.length > 64) {\n+            throw new IllegalArgumentException(\"EnumClass is too big to be stored in a 64-bit value.\");\n+        }\n+        final EnumSet results = EnumSet.noneOf(enumClass);\n+        if (constants != null && constants.length > 0) {\n+            for (E constant : constants) {\n+                if ((value & (1 << constant.ordinal())) != 0) {\n+                    results.add(constant);\n+                }\n+            }\n+        }\n+        return results;\n+    }\n }\n--- a/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java\n  */\n package org.apache.commons.lang3;\n \n+import java.util.EnumSet;\n import java.util.List;\n import java.util.Map;\n \n         }\n     }\n \n+    public void test_generateBitVector_nullClass() {\n+        try {\n+            EnumUtils.generateBitVector(null, EnumSet.of(Traffic.RED));\n+        } catch (IllegalArgumentException ex) {\n+            // ok\n+        }\n+    }\n+\n+    public void test_generateBitVector_longClass() {\n+        try {\n+            EnumUtils.generateBitVector(TooMany.class, EnumSet.of(TooMany.A1));\n+        } catch (IllegalArgumentException ex) {\n+            // ok\n+        }\n+    }\n+\n+    public void test_generateBitVector() {\n+        assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, null));\n+        assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class)));\n+        assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED)));\n+        assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER)));\n+        assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.GREEN)));\n+        assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)));\n+        assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)));\n+        assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)));\n+        assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)));\n+    }\n+\n+    public void test_processBitVector_nullClass() {\n+        final Class<Traffic> empty = null;\n+        try {\n+            EnumUtils.processBitVector(empty, 0L);\n+        } catch (IllegalArgumentException ex) {\n+            // ok\n+        }\n+    }\n+\n+    public void test_processBitVector_longClass() {\n+        try {\n+            EnumUtils.processBitVector(TooMany.class, 0L);\n+        } catch (IllegalArgumentException ex) {\n+            // ok\n+        }\n+    }\n+\n+    public void test_processBitVector() {\n+        assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L));\n+        assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L));\n+        assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L));\n+        assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L));\n+        assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L));\n+        assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L));\n+        assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L));\n+        assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L));\n+    }\n }\n \n enum Traffic {\n     RED, AMBER, GREEN\n }\n+\n+enum TooMany{\n+    A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,\n+    A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1;\n+\n+}", "timestamp": 1311235228, "metainfo": ""}