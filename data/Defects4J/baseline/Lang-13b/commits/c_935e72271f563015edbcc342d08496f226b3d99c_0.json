{"sha": "935e72271f563015edbcc342d08496f226b3d99c", "log": "Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Pair.java\n+++ b/src/main/java/org/apache/commons/lang3/Pair.java\n \n     /** Serialization version */\n     private static final long serialVersionUID = 4954918890077093841L;\n-\n+    /**\n+     * The default format for the toString method.\n+     */\n     private static final String DEFAULT_FORMAT_STRING = \"(%2$s,%3$s)\";\n \n     /**\n     /**\n      * <p>Returns a String representation of the Pair in the form: (L,R).</p>\n      * \n-     * @return a string for this object\n+     * @return a string describing this object, not null\n      */\n     @Override\n     public String toString() {\n     }\n \n     /**\n-     * Returns a String representation in the given format. The format is in the {@link Formatter} syntax. There are three arguments\n-     * available:\n+     * <p>Returns a String representation in the given format.</p>\n+     * \n+     * <p>The format specified uses the syntax from {@link Formatter}.\n+     * There are three arguments available:</p>\n      * <ol>\n      * <li>The simple class name</li>\n      * <li>The left object</li>\n      * <li>The right object</li>\n      * </ol>\n      * \n-     * @param format\n-     *            a {@link Formatter} String.\n-     * @return a string for this object\n+     * @param format  the format suitable for use with {@code Formatter}, not null\n+     * @return a string describing for this object, not null\n      */\n     public String toString(String format) {\n         return String.format(format, getClass().getSimpleName(), getLeft(), getRight());\n     }\n+\n }", "timestamp": 1302617605, "metainfo": ""}