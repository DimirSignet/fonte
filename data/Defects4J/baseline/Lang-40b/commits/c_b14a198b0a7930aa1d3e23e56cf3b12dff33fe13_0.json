{"sha": "b14a198b0a7930aa1d3e23e56cf3b12dff33fe13", "log": "Document null behaviour   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n /**\n  * <p><code>ArrayUtils</code> contains utility methods for working with\n  * arrays.</p>\n+ * \n+ * <p>This class tries to handle <code>null</code> input gracefully.\n+ * An exception will not be thrown for a <code>null</code>\n+ * array input. However, an Object array that contains a <code>null</code>\n+ * element may throw an exception. Each method documents its behaviour.</p>\n  *\n  * @author Stephen Colebourne\n  * @author Moritz Petersen\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.18 2003/07/14 22:25:02 bayard Exp $\n+ * @version $Id: ArrayUtils.java,v 1.19 2003/07/19 20:17:12 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n      * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n      * \n      * @param array  the array to get a toString for, may be <code>null</code>\n-     * @return a String representation of the array, '{}' if <code>null</code> passed in\n+     * @return a String representation of the array, '{}' if null array input\n      */\n     public static String toString(final Object array) {\n         return toString(array, \"{}\");\n      * <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>\n      * \n      * @param array  the array to get a hashCode for, may be <code>null</code>\n-     * @return a hashCode for the array\n+     * @return a hashCode for the array, zero if null array input\n      */\n     public static int hashCode(final Object array) {\n         return new HashCodeBuilder().append(array).toHashCode();\n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to shallow clone, may be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code>\n-     *  passed in\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n     public static Object[] clone(final Object[] array) {\n         if (array == null) {\n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code>\n-     *  passed in\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n     public static long[] clone(final long[] array) {\n         if (array == null) {\n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code>\n-     *  passed in\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n     public static int[] clone(int[] array) {\n         if (array == null) {\n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code>\n-     *  passed in\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n     public static short[] clone(final short[] array) {\n         if (array == null) {\n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code>\n-     *  passed in\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n     public static char[] clone(final char[] array) {\n         if (array == null) {\n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code>\n-     *  passed in\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n     public static byte[] clone(final byte[] array) {\n         if (array == null) {\n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code>\n-     *  passed in\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n     public static double[] clone(final double[] array) {\n         if (array == null) {\n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code>\n-     *  passed in\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n     public static float[] clone(final float[] array) {\n         if (array == null) {\n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code>\n-     *  passed in\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n     public static boolean[] clone(final boolean[] array) {\n         if (array == null) {\n      *\n      * <p>There is no special handling for multi-dimensional arrays.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method does nothing if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method does nothing if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method does nothing if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method does nothing if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method does nothing if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method does nothing if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method does nothing if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method does nothing if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method does nothing if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n-     * @return the index of the object within the array, or <code>-1</code> if not found\n+     * @return the index of the object within the array, \n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final Object[] array, final Object objectToFind) {\n         return indexOf(array, objectToFind, 0);\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @param startIndex  the index to start searching at\n-     * @return the index of the object within the array starting at the\n-     *  given index, or <code>-1</code> if not found\n+     * @return the index of the object within the array starting at the index,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n-     * @return the last index of the object to find, or <code>-1</code> if not found\n+     * @return the last index of the object within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final Object[] array, final Object objectToFind) {\n         return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the object within the array starting at the given index,\n-     *  or <code>-1</code> if not found\n+     * @return the last index of the object within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n-     * @return the index of the value within the array, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final long[] array, final long valueToFind) {\n         return indexOf(array, valueToFind, 0);\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array starting at the\n-     *  given index, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final long[] array, final long valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n-     * @return the last index of the value to find, or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final long[] array, final long valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array starting at the given index,\n-     *  or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n-     * @return the index of the value within the array, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final int[] array, final int valueToFind) {\n         return indexOf(array, valueToFind, 0);\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array starting at the\n-     *  given index, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final int[] array, final int valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n-     * @return the last index of the value to find, or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final int[] array, final int valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array starting at the given index,\n-     *  or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n-     * @return the index of the value within the array, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final short[] array, final short valueToFind) {\n         return indexOf(array, valueToFind, 0);\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array starting at the\n-     *  given index, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final short[] array, final short valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n-     * @return the last index of the value to find, or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final short[] array, final short valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array starting at the given index,\n-     *  or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n-     * @return the index of the value within the array, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final byte[] array, final byte valueToFind) {\n         return indexOf(array, valueToFind, 0);\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array starting at the\n-     *  given index, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n-     * @return the last index of the value to find, or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final byte[] array, final byte valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array starting at the given index,\n-     *  or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n-     * @return the index of the value within the array, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final double[] array, final double valueToFind) {\n         return indexOf(array, valueToFind, 0);\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array starting at the\n-     *  given index, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final double[] array, final double valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n-     * @return the last index of the value to find, or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final double[] array, final double valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array starting at the given index,\n-     *  or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n-     * @return the index of the value within the array, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final float[] array, final float valueToFind) {\n         return indexOf(array, valueToFind, 0);\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array starting at the\n-     *  given index, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final float[] array, final float valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n-     * @return the last index of the value to find, or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final float[] array, final float valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array starting at the given index,\n-     *  or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n-     * @return the index of the value within the array, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final boolean[] array, final boolean valueToFind) {\n         return indexOf(array, valueToFind, 0);\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array starting at the\n-     *  given index, or -1 if not found\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n         if (array == null) {\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n-     * @return the last index of the value to find, or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array starting at the given index,\n-     *  or -1 if not found\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n         if (array == null) {\n     // Primitive/Object array converters\n     // ----------------------------------------------------------------------\n     \n+    // Long array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Longs to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Long</code> array, may be <code>null</code>\n+     * @return a <code>long</code> array, <code>null</code> if null array input\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static long[] toPrimitive(final Long[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_LONG_ARRAY;\n+        }\n+        final long[] result = new long[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].longValue();\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * <p>Converts an array of object Long to primitives handling <code>null</code>.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Long</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>long</code> array, <code>null</code> if null array input\n+     */\n+    public static long[] toPrimitive(final Long[] array, final long valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_LONG_ARRAY;\n+        }\n+        final long[] result = new long[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Long b = array[i];\n+            result[i] = (b == null ? valueForNull : b.longValue());\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * <p>Converts an array of primitive longs to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>long</code> array\n+     * @return a <code>Long</code> array, <code>null</code> if null array input\n+     */\n+    public static Long[] toObject(final long[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_LONG_OBJECT_ARRAY;\n+        }\n+        final Long[] result = new Long[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Long(array[i]);\n+        }\n+        return result;\n+    }\n+\n+    // Int array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Integers to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Integer</code> array, may be <code>null</code>\n+     * @return an <code>int</code> array, <code>null</code> if null array input\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static int[] toPrimitive(final Integer[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_INT_ARRAY;\n+        }\n+        final int[] result = new int[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].intValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Integer</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return an <code>int</code> array, <code>null</code> if null array input\n+     */\n+    public static int[] toPrimitive(final Integer[] array, final int valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_INT_ARRAY;\n+        }\n+        final int[] result = new int[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Integer b = array[i];\n+            result[i] = (b == null ? valueForNull : b.intValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive ints to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  an <code>int</code> array\n+     * @return an <code>Integer</code> array, <code>null</code> if null array input\n+     */\n+    public static Integer[] toObject(final int[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_INTEGER_OBJECT_ARRAY;\n+        }\n+        final Integer[] result = new Integer[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Integer(array[i]);\n+        }\n+        return result;\n+    }\n+    \n+    // Short array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Shorts to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Short</code> array, may be <code>null</code>\n+     * @return a <code>byte</code> array, <code>null</code> if null array input\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static short[] toPrimitive(final Short[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_SHORT_ARRAY;\n+        }\n+        final short[] result = new short[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].shortValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Short to primitives handling <code>null</code>.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Short</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>byte</code> array, <code>null</code> if null array input\n+     */\n+    public static short[] toPrimitive(final Short[] array, final short valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_SHORT_ARRAY;\n+        }\n+        final short[] result = new short[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Short b = array[i];\n+            result[i] = (b == null ? valueForNull : b.shortValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive shorts to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>short</code> array\n+     * @return a <code>Short</code> array, <code>null</code> if null array input\n+     */\n+    public static Short[] toObject(final short[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_SHORT_OBJECT_ARRAY;\n+        }\n+        final Short[] result = new Short[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Short(array[i]);\n+        }\n+        return result;\n+    }    \n+\n+    // Byte array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Bytes to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Byte</code> array, may be <code>null</code>\n+     * @return a <code>byte</code> array, <code>null</code> if null array input\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static byte[] toPrimitive(final Byte[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        final byte[] result = new byte[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].byteValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Byte</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>byte</code> array, <code>null</code> if null array input\n+     */\n+    public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        final byte[] result = new byte[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Byte b = array[i];\n+            result[i] = (b == null ? valueForNull : b.byteValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive bytes to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>byte</code> array\n+     * @return a <code>Byte</code> array, <code>null</code> if null array input\n+     */\n+    public static Byte[] toObject(final byte[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BYTE_OBJECT_ARRAY;\n+        }\n+        final Byte[] result = new Byte[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Byte(array[i]);\n+        }\n+        return result;\n+    }  \n+    \n+    // Double array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Doubles to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Double</code> array, may be <code>null</code>\n+     * @return a <code>double</code> array, <code>null</code> if null array input\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static double[] toPrimitive(final Double[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_DOUBLE_ARRAY;\n+        }\n+        final double[] result = new double[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].doubleValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Double</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>double</code> array, <code>null</code> if null array input\n+     */\n+    public static double[] toPrimitive(final Double[] array, final double valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_DOUBLE_ARRAY;\n+        }\n+        final double[] result = new double[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Double b = array[i];\n+            result[i] = (b == null ? valueForNull : b.doubleValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive doubles to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>double</code> array\n+     * @return a <code>Double</code> array, <code>null</code> if null array input\n+     */\n+    public static Double[] toObject(final double[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_DOUBLE_OBJECT_ARRAY;\n+        }\n+        final Double[] result = new Double[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Double(array[i]);\n+        }\n+        return result;\n+    }\n+\n+    //   Float array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Floats to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Float</code> array, may be <code>null</code>\n+     * @return a <code>float</code> array, <code>null</code> if null array input\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static float[] toPrimitive(final Float[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_FLOAT_ARRAY;\n+        }\n+        final float[] result = new float[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].floatValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Float</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>float</code> array, <code>null</code> if null array input\n+     */\n+    public static float[] toPrimitive(final Float[] array, final float valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_FLOAT_ARRAY;\n+        }\n+        final float[] result = new float[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Float b = array[i];\n+            result[i] = (b == null ? valueForNull : b.floatValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive floats to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>float</code> array\n+     * @return a <code>Float</code> array, <code>null</code> if null array input\n+     */\n+    public static Float[] toObject(final float[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_FLOAT_OBJECT_ARRAY;\n+        }\n+        final Float[] result = new Float[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Float(array[i]);\n+        }\n+        return result;\n+    }\n+\n     // Boolean array converters\n     // ----------------------------------------------------------------------\n     /**\n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Boolean</code> array, may be <code>null</code>\n-     * @return a <code>boolean</code> array\n+     * @return a <code>boolean</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n      */\n     public static boolean[] toPrimitive(final Boolean[] array) {\n      * \n      * @param array  a <code>Boolean</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>boolean</code> array\n+     * @return a <code>boolean</code> array, <code>null</code> if null array input\n      */\n     public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {\n         if (array == null) {\n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>boolean</code> array\n-     * @return a <code>Boolean</code> array\n+     * @return a <code>Boolean</code> array, <code>null</code> if null array input\n      */\n     public static Boolean[] toObject(final boolean[] array) {\n         if (array == null) {\n         return result;\n     }\n \n-    // Byte array converters\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Converts an array of object Bytes to primitives.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Byte</code> array, may be <code>null</code>\n-     * @return a <code>byte</code> array\n-     * @throws NullPointerException if array content is <code>null</code>\n-     */\n-    public static byte[] toPrimitive(final Byte[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_BYTE_ARRAY;\n-        }\n-        final byte[] result = new byte[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = array[i].byteValue();\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Byte</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>byte</code> array\n-     */\n-    public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_BYTE_ARRAY;\n-        }\n-        final byte[] result = new byte[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            Byte b = array[i];\n-            result[i] = (b == null ? valueForNull : b.byteValue());\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of primitive bytes to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>byte</code> array\n-     * @return a <code>Byte</code> array\n-     */\n-    public static Byte[] toObject(final byte[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_BYTE_OBJECT_ARRAY;\n-        }\n-        final Byte[] result = new Byte[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Byte(array[i]);\n-        }\n-        return result;\n-    }  \n-    \n-    // Short array converters\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Converts an array of object Shorts to primitives.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Short</code> array, may be <code>null</code>\n-     * @return a <code>byte</code> array\n-     * @throws NullPointerException if array content is <code>null</code>\n-     */\n-    public static short[] toPrimitive(final Short[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_SHORT_ARRAY;\n-        }\n-        final short[] result = new short[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = array[i].shortValue();\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of object Short to primitives handling <code>null</code>.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Short</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>byte</code> array\n-     */\n-    public static short[] toPrimitive(final Short[] array, final short valueForNull) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_SHORT_ARRAY;\n-        }\n-        final short[] result = new short[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            Short b = array[i];\n-            result[i] = (b == null ? valueForNull : b.shortValue());\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of primitive shorts to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>short</code> array\n-     * @return a <code>Short</code> array\n-     */\n-    public static Short[] toObject(final short[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_SHORT_OBJECT_ARRAY;\n-        }\n-        final Short[] result = new Short[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Short(array[i]);\n-        }\n-        return result;\n-    }    \n-\n-    // Int array converters\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Converts an array of object Integers to primitives.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Integer</code> array, may be <code>null</code>\n-     * @return an <code>int</code> array\n-     * @throws NullPointerException if array content is <code>null</code>\n-     */\n-    public static int[] toPrimitive(final Integer[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_INT_ARRAY;\n-        }\n-        final int[] result = new int[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = array[i].intValue();\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Integer</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return an <code>int</code> array\n-     */\n-    public static int[] toPrimitive(final Integer[] array, final int valueForNull) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_INT_ARRAY;\n-        }\n-        final int[] result = new int[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            Integer b = array[i];\n-            result[i] = (b == null ? valueForNull : b.intValue());\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of primitive ints to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  an <code>int</code> array\n-     * @return an <code>Integer</code> array\n-     */\n-    public static Integer[] toObject(final int[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_INTEGER_OBJECT_ARRAY;\n-        }\n-        final Integer[] result = new Integer[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Integer(array[i]);\n-        }\n-        return result;\n-    }\n-    \n-    // Long array converters\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Converts an array of object Longs to primitives.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Long</code> array, may be <code>null</code>\n-     * @return a <code>long</code> array\n-     * @throws NullPointerException if array content is <code>null</code>\n-     */\n-    public static long[] toPrimitive(final Long[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_LONG_ARRAY;\n-        }\n-        final long[] result = new long[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = array[i].longValue();\n-        }\n-        return result;\n-    }\n-    \n-    /**\n-     * <p>Converts an array of object Long to primitives handling <code>null</code>.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Long</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>long</code> array\n-     */\n-    public static long[] toPrimitive(final Long[] array, final long valueForNull) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_LONG_ARRAY;\n-        }\n-        final long[] result = new long[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            Long b = array[i];\n-            result[i] = (b == null ? valueForNull : b.longValue());\n-        }\n-        return result;\n-    }\n-    \n-    /**\n-     * <p>Converts an array of primitive longs to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array a <code>long</code> array\n-     * @return a <code>Long</code> array\n-     */\n-    public static Long[] toObject(final long[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_LONG_OBJECT_ARRAY;\n-        }\n-        final Long[] result = new Long[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Long(array[i]);\n-        }\n-        return result;\n-    }\n-\n-    //   Float array converters\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Converts an array of object Floats to primitives.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Float</code> array, may be <code>null</code>\n-     * @return a <code>float</code> array\n-     * @throws NullPointerException if array content is <code>null</code>\n-     */\n-    public static float[] toPrimitive(final Float[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_FLOAT_ARRAY;\n-        }\n-        final float[] result = new float[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = array[i].floatValue();\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Float</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>float</code> array\n-     */\n-    public static float[] toPrimitive(final Float[] array, final float valueForNull) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_FLOAT_ARRAY;\n-        }\n-        final float[] result = new float[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            Float b = array[i];\n-            result[i] = (b == null ? valueForNull : b.floatValue());\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of primitive floats to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array a <code>float</code> array\n-     * @return a <code>Float</code> array\n-     */\n-    public static Float[] toObject(final float[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_FLOAT_OBJECT_ARRAY;\n-        }\n-        final Float[] result = new Float[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Float(array[i]);\n-        }\n-        return result;\n-    }\n-\n-    // Double array converters\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Converts an array of object Doubles to primitives.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Double</code> array, may be <code>null</code>\n-     * @return a <code>double</code> array\n-     * @throws NullPointerException if array content is <code>null</code>\n-     */\n-    public static double[] toPrimitive(final Double[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_DOUBLE_ARRAY;\n-        }\n-        final double[] result = new double[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = array[i].doubleValue();\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Double</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>double</code> array\n-     */\n-    public static double[] toPrimitive(final Double[] array, final double valueForNull) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_DOUBLE_ARRAY;\n-        }\n-        final double[] result = new double[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            Double b = array[i];\n-            result[i] = (b == null ? valueForNull : b.doubleValue());\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of primitive doubles to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array a <code>double</code> array\n-     * @return a <code>Double</code> array\n-     */\n-    public static Double[] toObject(final double[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_DOUBLE_OBJECT_ARRAY;\n-        }\n-        final Double[] result = new Double[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Double(array[i]);\n-        }\n-        return result;\n-    }\n-\n }\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n  * <p><code>BooleanUtils</code> contains utility methods for working for\n  * boolean and Boolean objects.</p>\n  *\n+ * <p>This class tries to handle <code>null</code> input gracefully.\n+ * An exception will not be thrown for a <code>null</code> input.\n+ * Each method documents its behaviour in more detail.</p>\n+ * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: BooleanUtils.java,v 1.7 2003/07/14 22:25:02 bayard Exp $\n+ * @version $Id: BooleanUtils.java,v 1.8 2003/07/19 20:17:12 scolebourne Exp $\n  */\n public class BooleanUtils {\n \n      * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n      * \n      * @param bool  the Boolean to negate, may be null\n-     * @return the negated Boolean, or <code>null</code> if <code>null</code> passed in\n+     * @return the negated Boolean, or <code>null</code> if <code>null</code> input\n      */\n     public static Boolean negate(Boolean bool) {\n         if (bool == null) {\n      * by returning <code>false</code>.</p>\n      * \n      * @param bool  the boolean to convert\n-     * @return <code>true</code> or <code>false</code>\n+     * @return <code>true</code> or <code>false</code>, \n+     *  <code>null</code> returns <code>false</code>\n      */\n     public static boolean toBoolean(Boolean bool) {\n         if (bool == null) {\n      * \n      * @param value  the Integer to convert\n      * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,\n-     *  <code>null</code> if <code>null</code>\n+     *  <code>null</code> if <code>null</code> input\n      */\n     public static Boolean toBooleanObject(Integer value) {\n         if (value == null) {\n      * Otherwise, <code>null</code> is returned.</p>\n      *\n      * @param str  the String to check\n-     * @return the Boolean value of the string, <code>null</code>\n-     *  if no match or <code>null</code> input\n+     * @return the Boolean value of the string,\n+     *  <code>null</code> if no match or <code>null</code> input\n      */\n     public static Boolean toBooleanObject(String str) {\n         if (\"true\".equalsIgnoreCase(str)) {\n      *  (case sensitive), may be <code>null</code>\n      * @param nullString  the String to match for <code>null</code>\n      *  (case sensitive), may be <code>null</code>\n-     * @return the Boolean value of the string, <code>null</code>\n-     *  if no match or <code>null</code> input\n+     * @return the Boolean value of the string,\n+     *  <code>null</code> if no match or <code>null</code> input\n      */\n     public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {\n         if (str == null) {\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n /**\n  * <p>Provides utility methods for working for classes without using reflection.</p>\n  *\n+ * <p>This class throws exceptions for invalid <code>null</code> inputs.\n+ * Each method documents its behaviour in more detail.</p>\n+ *\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.15 2003/07/16 21:19:22 scolebourne Exp $\n+ * @version $Id: ClassUtils.java,v 1.16 2003/07/19 20:17:12 scolebourne Exp $\n  */\n public class ClassUtils {\n \n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n package org.apache.commons.lang;\n \n import java.io.Serializable;\n+\n /**\n  * <p>Common <code>Object</code> manipulation routines.</p>\n+ * \n+ * <p>This class tries to handle <code>null</code> input gracefully.\n+ * An exception will generally not be thrown for a <code>null</code> input.\n+ * Each method documents its behaviour in more detail.</p>\n  *\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n  * @author <a href=\"mailto:janekdb@yahoo.co.uk\">Janek Bogucki</a>\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: ObjectUtils.java,v 1.11 2003/07/16 01:47:39 ggregory Exp $\n+ * @version $Id: ObjectUtils.java,v 1.12 2003/07/19 20:21:39 scolebourne Exp $\n  */\n public class ObjectUtils {\n     \n     \n     /**\n      * <p>Gets the toString that would be produced by <code>Object</code>\n-     * if a class did not override toString itself. <code>Null</code>\n+     * if a class did not override toString itself. <code>null</code>\n      * will return <code>null</code>.</p>\n      *\n      * @param object  the object to create a toString for, may be\n \n     /**\n      * <p>Appends the toString that would be produced by <code>Object</code>\n-     * if a class did not override toString itself. <code>Null</code>\n+     * if a class did not override toString itself. <code>null</code>\n      * will return <code>null</code>.</p>\n      *\n      * @param buffer  the buffer to append to, may not be", "timestamp": 1058646099, "metainfo": ""}