{"sha": "01928b3fa3f6a3228f4603809eb92e0f3a189c21", "log": "A DateUtils class from Ant. Still needs lots of thinking etc, but might as well be doing these things in the cvs head as we're not near an obvious release.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/DateUtils.java\n+/*\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Ant\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.text.ChoiceFormat;\n+import java.text.DateFormat;\n+import java.text.MessageFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+/**\n+ * Helper methods to deal with date/time formatting. [Relies heavily on\n+ * code taken from the DateUtils class of the jakarata-ant project.]\n+ *\n+ * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n+ * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n+ *\n+ * @since Lang 2.0\n+ *\n+ * @version $Revision: 1.1 $\n+ */\n+public final class DateUtils {\n+\n+    /**\n+     * ISO8601-like pattern for date-time. It does not support timezone.\n+     *  <tt>yyyy-MM-ddTHH:mm:ss</tt>\n+     */\n+    public static final String ISO8601_DATETIME_PATTERN\n+            = \"yyyy-MM-dd'T'HH:mm:ss\";\n+\n+    /**\n+     * ISO8601-like pattern for date. <tt>yyyy-MM-dd</tt>\n+     */\n+    public static final String ISO8601_DATE_PATTERN\n+            = \"yyyy-MM-dd\";\n+\n+    /**\n+     * ISO8601-like pattern for time.  <tt>HH:mm:ss</tt>\n+     */\n+    public static final String ISO8601_TIME_PATTERN\n+            = \"HH:mm:ss\";\n+\n+    /**\n+     * Format used for SMTP (and probably other) Date headers.\n+     */\n+    public static final DateFormat DATE_HEADER_FORMAT\n+        = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss \", Locale.US);\n+\n+\n+// code from Magesh moved from DefaultLogger and slightly modified\n+    private static final MessageFormat MINUTE_SECONDS\n+            = new MessageFormat(\"{0}{1}\");\n+\n+    private static final double[] LIMITS = {0, 1, 2};\n+\n+    private static final String[] MINUTES_PART =\n+            {\"\", \"1 minute \", \"{0,number} minutes \"};\n+\n+    private static final String[] SECONDS_PART =\n+            {\"0 seconds\", \"1 second\", \"{1,number} seconds\"};\n+\n+    private static final ChoiceFormat MINUTES_FORMAT =\n+            new ChoiceFormat(LIMITS, MINUTES_PART);\n+\n+    private static final ChoiceFormat SECONDS_FORMAT =\n+            new ChoiceFormat(LIMITS, SECONDS_PART);\n+\n+    static {\n+        MINUTE_SECONDS.setFormat(0, MINUTES_FORMAT);\n+        MINUTE_SECONDS.setFormat(1, SECONDS_FORMAT);\n+    }\n+\n+    /** public constructor */\n+    /// TODO: Insert note that this should not be used\n+    public DateUtils() {\n+    }\n+\n+\n+    /**\n+     * Format a date/time into a specific pattern.\n+     * @param date the date to format expressed in milliseconds.\n+     * @param pattern the pattern to use to format the date.\n+     * @return the formatted date.\n+     */\n+    public static String format(long date, String pattern) {\n+        return format(new Date(date), pattern);\n+    }\n+\n+\n+    /**\n+     * Format a date/time into a specific pattern.\n+     * @param date the date to format expressed in milliseconds.\n+     * @param pattern the pattern to use to format the date.\n+     * @return the formatted date.\n+     */\n+    public static String format(Date date, String pattern) {\n+        DateFormat df = createDateFormat(pattern);\n+        return df.format(date);\n+    }\n+\n+\n+    /**\n+     * Format an elapsed time into a plurialization correct string.\n+     * It is limited only to report elapsed time in minutes and\n+     * seconds and has the following behavior.\n+     * <ul>\n+     * <li>minutes are not displayed when 0. (ie: \"45 seconds\")</li>\n+     * <li>seconds are always displayed in plural form (ie \"0 seconds\" or\n+     * \"10 seconds\") except for 1 (ie \"1 second\")</li>\n+     * </ul>\n+     * @param time the elapsed time to report in milliseconds.\n+     * @return the formatted text in minutes/seconds.\n+     */\n+    public static String formatElapsedTime(long millis) {\n+        long seconds = millis / 1000;\n+        long minutes = seconds / 60;\n+        Object[] args = {new Long(minutes), new Long(seconds % 60)};\n+        return MINUTE_SECONDS.format(args);\n+    }\n+\n+    /**\n+     * return a lenient date format set to GMT time zone.\n+     * @param pattern the pattern used for date/time formatting.\n+     * @return the configured format for this pattern.\n+     */\n+    private static DateFormat createDateFormat(String pattern) {\n+        SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n+        TimeZone gmt = TimeZone.getTimeZone(\"GMT\");\n+        sdf.setTimeZone(gmt);\n+        sdf.setLenient(true);\n+        return sdf;\n+    }\n+\n+    /**\n+     * Calculate the phase of the moon for a given date.\n+     *\n+     * <p>Code heavily influenced by hacklib.c in <a\n+     * href=\"http://www.nethack.org/\">Nethack</a></p>\n+     *\n+     * <p>The Algorithm:\n+     *\n+     * <pre>\n+     * moon period = 29.53058 days ~= 30, year = 365.2422 days\n+     *\n+     * days moon phase advances on first day of year compared to preceding year\n+     *  = 365.2422 - 12*29.53058 ~= 11\n+     *\n+     * years in Metonic cycle (time until same phases fall on the same days of\n+     *  the month) = 18.6 ~= 19\n+     *\n+     * moon phase on first day of year (epact) ~= (11*(year%19) + 18) % 30\n+     *  (18 as initial condition for 1900)\n+     *\n+     * current phase in days = first day phase + days elapsed in year\n+     *\n+     * 6 moons ~= 177 days\n+     * 177 ~= 8 reported phases * 22\n+     * + 11/22 for rounding\n+     * </pre>\n+     *\n+     * @return The phase of the moon as a number between 0 and 7 with\n+     *         0 meaning new moon and 4 meaning full moon.\n+     *\n+     * @since 1.2, Ant 1.5\n+     */\n+    public static int getPhaseOfMoon(Calendar cal) {\n+        int dayOfTheYear = cal.get(Calendar.DAY_OF_YEAR);\n+        int yearInMetonicCycle = ((cal.get(Calendar.YEAR) - 1900) % 19) + 1;\n+        int epact = (11 * yearInMetonicCycle + 18) % 30;\n+        if ((epact == 25 && yearInMetonicCycle > 11) || epact == 24) {\n+            epact++;\n+        }\n+        return (((((dayOfTheYear + epact) * 6) + 11) % 177) / 22) & 7;\n+    }\n+\n+    /**\n+     * Returns the current Date in a format suitable for a SMTP date\n+     * header.\n+     *\n+     * @since Ant 1.5.2\n+     */\n+    public static String getDateForHeader() {\n+        Calendar cal = Calendar.getInstance();\n+        TimeZone tz = cal.getTimeZone();\n+        int offset = tz.getOffset(cal.get(Calendar.ERA),\n+                                  cal.get(Calendar.YEAR),\n+                                  cal.get(Calendar.MONTH),\n+                                  cal.get(Calendar.DAY_OF_MONTH),\n+                                  cal.get(Calendar.DAY_OF_WEEK),\n+                                  cal.get(Calendar.MILLISECOND));\n+        StringBuffer tzMarker = new StringBuffer(offset < 0 ? \"-\" : \"+\");\n+        offset = Math.abs(offset);\n+        int hours = offset / (60 * 60 * 1000);\n+        int minutes = offset / (60 * 1000) - 60 * hours;\n+        if (hours < 10) {\n+            tzMarker.append(\"0\");\n+        }\n+        tzMarker.append(hours);\n+        if (minutes < 10) {\n+            tzMarker.append(\"0\");\n+        }\n+        tzMarker.append(minutes);\n+        return DATE_HEADER_FORMAT.format(cal.getTime()) + tzMarker.toString();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/DateUtilsTest.java\n+/*\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Ant\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.Date;\n+import java.util.Calendar;\n+import java.util.TimeZone;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * TestCase for DateUtils.  [Relies heavily on code taken from the\n+ * DateUtilsTest class of the jakarata-ant project.]\n+ *\n+ * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n+ * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n+ */\n+public class DateUtilsTest extends TestCase {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+    \tTestSuite suite = new TestSuite(DateUtilsTest.class);\n+    \tsuite.setName(\"DateUtils Tests\");\n+        return suite;\n+    }\n+\n+    public DateUtilsTest(String s) {\n+        super(s);\n+    }\n+\n+    public void testElapsedTime(){\n+        String text = DateUtils.formatElapsedTime(50*1000);\n+        assertEquals(\"50 seconds\", text);\n+        text = DateUtils.formatElapsedTime(65*1000);\n+        assertEquals(\"1 minute 5 seconds\", text);\n+        text = DateUtils.formatElapsedTime(120*1000);\n+        assertEquals(\"2 minutes 0 seconds\", text);\n+        text = DateUtils.formatElapsedTime(121*1000);\n+        assertEquals(\"2 minutes 1 second\", text);\n+    }\n+\n+    public void testDateTimeISO(){\n+        TimeZone timeZone = TimeZone.getTimeZone(\"GMT+1\");\n+        Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002,1,23,10,11,12);\n+        String text = DateUtils.format(cal.getTime(),\n+                DateUtils.ISO8601_DATETIME_PATTERN);\n+        assertEquals(\"2002-02-23T09:11:12\", text);\n+    }\n+\n+    public void testDateISO(){\n+        TimeZone timeZone = TimeZone.getTimeZone(\"GMT\");\n+        Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002,1,23);\n+        String text = DateUtils.format(cal.getTime(),\n+                DateUtils.ISO8601_DATE_PATTERN);\n+        assertEquals(\"2002-02-23\", text);\n+    }\n+\n+    public void testTimeISODate(){\n+        // make sure that elapsed time in set via date works\n+        TimeZone timeZone = TimeZone.getTimeZone(\"GMT+1\");\n+        Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002,1,23, 21, 11, 12);\n+        String text = DateUtils.format(cal.getTime(),\n+                DateUtils.ISO8601_TIME_PATTERN);\n+        assertEquals(\"20:11:12\", text);\n+    }\n+\n+    public void testTimeISO(){\n+        // make sure that elapsed time in ms works\n+        long ms = (20*3600 + 11*60 + 12)*1000;\n+        String text = DateUtils.format(ms,\n+                DateUtils.ISO8601_TIME_PATTERN);\n+        assertEquals(\"20:11:12\", text);\n+    }\n+\n+    public void testPhaseOfMoon() {\n+        TimeZone timeZone = TimeZone.getTimeZone(\"GMT\");\n+        Calendar cal = Calendar.getInstance(timeZone);\n+        // should be full moon\n+        cal.set(2002, 2, 27);\n+        assertEquals(4, DateUtils.getPhaseOfMoon(cal));\n+        // should be new moon\n+        cal.set(2002, 2, 12);\n+        assertEquals(0, DateUtils.getPhaseOfMoon(cal));\n+    }\n+}\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: LangTestSuite.java,v 1.8 2002/12/15 19:36:08 scolebourne Exp $\n+ * @version $Id: LangTestSuite.java,v 1.9 2002/12/16 21:48:41 bayard Exp $\n  */\n public class LangTestSuite extends TestCase {\n     \n         suite.addTest(BooleanUtilsTest.suite());\n         suite.addTest(CharSetUtilsTest.suite());\n         suite.addTest(ClassUtilsTest.suite());\n+        suite.addTest(DateUtilsTest.suite());\n         suite.addTest(NumberRangeTest.suite());\n         suite.addTest(NumberUtilsTest.suite());\n         suite.addTest(ObjectUtilsTest.suite());", "timestamp": 1040075321, "metainfo": ""}