{"sha": "3ef1a798b3df0a9a599ea248739d649f48ed5f76", "log": "[LANG-499] Test class for ConcurrentUtils  ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.concurrent;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test class for {@link ConcurrentUtils}.\n+ *\n+ * @version $Id$\n+ */\n+public class ConcurrentUtilsTest extends TestCase {\n+    /**\n+     * Tests creating a ConcurrentException with a runtime exception as cause.\n+     */\n+    public void testConcurrentExceptionCauseUnchecked() {\n+        try {\n+            new ConcurrentException(new RuntimeException());\n+            fail(\"Could create ConcurrentException with unchecked cause!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests creating a ConcurrentException with an error as cause.\n+     */\n+    public void testConcurrentExceptionCauseError() {\n+        try {\n+            new ConcurrentException(\"An error\", new Error());\n+            fail(\"Could create ConcurrentException with an error cause!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests creating a ConcurrentException with null as cause.\n+     */\n+    public void testConcurrentExceptionCauseNull() {\n+        try {\n+            new ConcurrentException(null);\n+            fail(\"Could create ConcurrentException with null cause!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests extractCause() for a null exception.\n+     */\n+    public void testExtractCauseNull() {\n+        assertNull(\"Non null result\", ConcurrentUtils.extractCause(null));\n+    }\n+\n+    /**\n+     * Tests extractCause() if the cause of the passed in exception is null.\n+     */\n+    public void testExtractCauseNullCause() {\n+        assertNull(\"Non null result\", ConcurrentUtils\n+                .extractCause(new ExecutionException(\"Test\", null)));\n+    }\n+\n+    /**\n+     * Tests extractCause() if the cause is an error.\n+     */\n+    public void testExtractCauseError() {\n+        Error err = new AssertionError(\"Test\");\n+        try {\n+            ConcurrentUtils.extractCause(new ExecutionException(err));\n+            fail(\"Error not thrown!\");\n+        } catch (Error e) {\n+            assertEquals(\"Wrong error\", err, e);\n+        }\n+    }\n+\n+    /**\n+     * Tests extractCause() if the cause is an unchecked exception.\n+     */\n+    public void testExtractCauseUnchecked() {\n+        RuntimeException rex = new RuntimeException(\"Test\");\n+        try {\n+            ConcurrentUtils.extractCause(new ExecutionException(rex));\n+            fail(\"Runtime exception not thrown!\");\n+        } catch (RuntimeException r) {\n+            assertEquals(\"Wrong exception\", rex, r);\n+        }\n+    }\n+\n+    /**\n+     * Tests extractCause() if the cause is a checked exception.\n+     */\n+    public void testExtractCauseChecked() {\n+        Exception ex = new Exception(\"Test\");\n+        ConcurrentException cex = ConcurrentUtils\n+                .extractCause(new ExecutionException(ex));\n+        assertSame(\"Wrong cause\", ex, cex.getCause());\n+    }\n+\n+    /**\n+     * Tests handleCause() if the cause is an error.\n+     */\n+    public void testHandleCauseError() throws ConcurrentException {\n+        Error err = new AssertionError(\"Test\");\n+        try {\n+            ConcurrentUtils.handleCause(new ExecutionException(err));\n+            fail(\"Error not thrown!\");\n+        } catch (Error e) {\n+            assertEquals(\"Wrong error\", err, e);\n+        }\n+    }\n+\n+    /**\n+     * Tests handleCause() if the cause is an unchecked exception.\n+     */\n+    public void testHandleCauseUnchecked() throws ConcurrentException {\n+        RuntimeException rex = new RuntimeException(\"Test\");\n+        try {\n+            ConcurrentUtils.handleCause(new ExecutionException(rex));\n+            fail(\"Runtime exception not thrown!\");\n+        } catch (RuntimeException r) {\n+            assertEquals(\"Wrong exception\", rex, r);\n+        }\n+    }\n+\n+    /**\n+     * Tests handleCause() if the cause is a checked exception.\n+     */\n+    public void testHandleCauseChecked() throws ConcurrentException {\n+        Exception ex = new Exception(\"Test\");\n+        try {\n+            ConcurrentUtils.handleCause(new ExecutionException(ex));\n+            fail(\"ConcurrentException not thrown!\");\n+        } catch (ConcurrentException cex) {\n+            assertEquals(\"Wrong cause\", ex, cex.getCause());\n+        }\n+    }\n+\n+    /**\n+     * Tests handleCause() for a null parameter or a null cause. In this case\n+     * the method should do nothing. We can only test that no exception is\n+     * thrown.\n+     */\n+    public void testHandleCauseNull() throws ConcurrentException {\n+        ConcurrentUtils.handleCause(null);\n+        ConcurrentUtils.handleCause(new ExecutionException(\"Test\", null));\n+    }\n+}", "timestamp": 1254251696, "metainfo": ""}