{"sha": "27265c8255bec4f28efb426a4328216fba1caf55", "log": "LANG-459 HashCodeBuilder.reflectionHashCode() can generate incorrect hashcodes  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/IDKey.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \n+ */\n+\n+package org.apache.commons.lang;\n+\n+// adapted from org.apache.axis.utils.IDKey\n+\n+/**\n+* Wrap an identity key (System.identityHashCode()) \n+* so that an object can only be equal() to itself.\n+* \n+* This is necessary to disambiguate the occasional duplicate\n+* identityHashCodes that can occur.\n+*  \n+*/ \n+public final class IDKey {\n+        private final Object value;\n+        private final int id;\n+\n+        /**\n+         * Constructor for IDKey\n+         * @param _value\n+         */ \n+        public IDKey(Object _value) {\n+            // This is the Object hashcode \n+            id = System.identityHashCode(_value);  \n+            // There have been some cases (LANG-459) that return the \n+            // same identity hash code for different objects.  So \n+            // the value is also added to disambiguate these cases.\n+            value = _value;\n+        }\n+\n+        /**\n+         * returns hashcode - i.e. the system identity hashcode.\n+         * @return the hashcode\n+         */ \n+        public int hashCode() {\n+           return id;\n+        }\n+\n+        /**\n+         * checks if instances are equal\n+         * @param other\n+         * @return if the instances are for the same object\n+         */ \n+        public boolean equals(Object other) {\n+            if (!(other instanceof IDKey)) {\n+                return false;\n+            }\n+            IDKey idKey = (IDKey) other;\n+            if (id != idKey.id) {\n+                return false;\n+            }\n+            // Note that identity equals is used.\n+            return value == idKey.value;\n+         }\n+}\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+\n+import org.apache.commons.lang.IDKey;\n \n /**\n  * <p>\n         }\n     };\n \n+    /*\n+     * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()\n+     * we are in the process of calculating.\n+     * \n+     * So we generate a one-to-one mapping from the original object to a new object.\n+     * \n+     * Now HashSet uses equals() to determine if two elements with the same hashcode really\n+     * are equal, so we also need to ensure that the replacement objects are only equal\n+     * if the original objects are identical.\n+     * \n+     * The original implementation (2.4 and before) used the System.indentityHashCode()\n+     * method - however this is not guaranteed to generate unique ids (e.g. LANG-459)\n+     *  \n+     * We now use the IDKey helper class (adapted from org.apache.axis.utils.IDKey)\n+     * to disambiguate the duplicate ids.\n+     */\n+    \n     /**\n      * <p>\n      * Returns the registry of objects being traversed by the reflection methods in the current thread.\n      * @since 2.3\n      */\n     static boolean isRegistered(Object value) {\n-        return getRegistry().contains(toIdentityHashCodeInteger(value));\n+        return getRegistry().contains(new IDKey(value));\n     }\n \n     /**\n      *            The object to register.\n      */\n     static void register(Object value) {\n-        getRegistry().add(toIdentityHashCodeInteger(value));\n-    }\n-\n-    /**\n-     * Returns an Integer for the given object's default hash code.\n-     * \n-     * @see System#identityHashCode(Object)\n-     * @param value\n-     *            object for which the hashCode is to be calculated\n-     * @return Default int hash code\n-     */\n-    private static Integer toIdentityHashCodeInteger(Object value) {\n-        return new Integer(System.identityHashCode(value));\n+        getRegistry().add(new IDKey(value));\n     }\n \n     /**\n      * @since 2.3\n      */\n     static void unregister(Object value) {\n-        getRegistry().remove(toIdentityHashCodeInteger(value));\n+        getRegistry().remove(new IDKey(value));\n     }\n \n     /**", "timestamp": 1221580994, "metainfo": ""}