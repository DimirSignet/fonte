{"sha": "e1c4df4d972df442cae2fcda70ef789845369b7a", "log": "Appying the wished for join(Collection, x) method from Stepan Koltsov in #LANG-266  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n package org.apache.commons.lang;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n \n         return buf.toString();\n     }\n \n+    /**\n+     * <p>Joins the elements of the provided <code>Collection</code> into\n+     * a single String containing the provided elements.</p>\n+     *\n+     * <p>No delimiter is added before or after the list. Null objects or empty\n+     * strings within the iteration are represented by empty strings.</p>\n+     *\n+     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n+     *\n+     * @param collection  the <code>Collection</code> of values to join together, may be null\n+     * @param separator  the separator character to use\n+     * @return the joined String, <code>null</code> if null iterator input\n+     * @since 2.3\n+     */\n+    public static String join(Collection collection, char separator) {\n+        if (collection == null) {\n+            return null;\n+        }\n+        return join(collection.iterator(), separator);\n+    }\n+\n+    /**\n+     * <p>Joins the elements of the provided <code>Collection</code> into\n+     * a single String containing the provided elements.</p>\n+     *\n+     * <p>No delimiter is added before or after the list.\n+     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n+     *\n+     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n+     *\n+     * @param collection  the <code>Collection</code> of values to join together, may be null\n+     * @param separator  the separator character to use, null treated as \"\"\n+     * @return the joined String, <code>null</code> if null iterator input\n+     * @since 2.3\n+     */\n+    public static String join(Collection collection, String separator) {\n+        if (collection == null) {\n+            return null;\n+        }\n+        return join(collection.iterator(), separator);\n+    }\n+\n     // Delete\n     //-----------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Iterator;\n+import java.util.Collection;\n+import java.util.Collections;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n         assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n         assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), 'x'));\n     }\n     \n     public void testJoin_IteratorString() {\n         assertEquals(null, StringUtils.join((Iterator) null, null));\n         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\n         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\n-        \n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \"x\"));\n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), null));\n+\n         assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));\n         \n         assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));\n         \n         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n     }\n-    \n+\n+    public void testJoin_CollectionChar() {\n+        assertEquals(null, StringUtils.join((Collection) null, ','));\n+        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), 'x'));\n+    }\n+\n+    public void testJoin_CollectionString() {\n+        assertEquals(null, StringUtils.join((Collection) null, null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));\n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), null));\n+\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));\n+\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), \"\"));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));\n+\n+        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n+    }\n+\n     public void testConcatenate_Objectarray() {\n         assertEquals(null, StringUtils.concatenate(null));\n         assertEquals(\"\", StringUtils.concatenate(EMPTY_ARRAY_LIST));", "timestamp": 1158706500, "metainfo": ""}