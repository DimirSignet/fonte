{"sha": "7650f715920f91c9d1eeeec6feba0ff02dd95488", "log": "Reverse recent addition of date formatting. Better solution required.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n \n import java.io.Serializable;\n import java.lang.reflect.Array;\n-import java.text.DateFormat;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.Map;\n \n import org.apache.commons.lang.ObjectUtils;\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: ToStringStyle.java,v 1.18 2003/07/21 19:34:10 ggregory Exp $\n+ * @version $Id: ToStringStyle.java,v 1.19 2003/07/21 23:03:53 scolebourne Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n \n      * The summary object text start <code>'&gt;'</code>.\n      */\n     private String summaryObjectEndText = \">\";\n-\n-    /**\n-     * An optional <code>DateFormat</code>.\n-     */\n-    private DateFormat dateFormat = null;\n-\n-    /**\n-     * Gets the <code>DateFormat</code>, which may be <code>null</code>.\n-     */\n-    protected DateFormat getDateFormat() {\n-        return this.dateFormat;\n-    }\n-\n-    /**\n-     * Sets the <code>DateFormat</code>, which may be <code>null</code>.\n-     */\n-    protected void setDateFormat(DateFormat dateFormat) {\n-        this.dateFormat = dateFormat;\n-    }\n \n     //----------------------------------------------------------------------------\n \n                 appendSummary(buffer, fieldName, (boolean[]) value);\n             }\n \n-            } else if (value.getClass().isArray()) {\n-                if (detail) {\n-                    appendDetail(buffer, fieldName, (Object[]) value);\n-                } else {\n-                    appendSummary(buffer, fieldName, (Object[]) value);\n-                }\n-\n-            } else if (value instanceof Date) {\n-                if (detail) {\n-                    appendDetail(buffer, fieldName, (Date) value);\n-                } else {\n-                    appendSummary(buffer, fieldName, (Object) value);\n-                }\n+        } else if (value.getClass().isArray()) {\n+            if (detail) {\n+                appendDetail(buffer, fieldName, (Object[]) value);\n+            } else {\n+                appendSummary(buffer, fieldName, (Object[]) value);\n+            }\n \n         } else {\n             if (detail) {\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n         buffer.append(value);\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>Date</code>\n-     * value, using the optional <code>DateFormat</code>.</p>\n-     *\n-     * @param buffer  the <code>StringBuffer</code> to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the <code>Date</code> to add to the <code>toString</code>,\n-     *  not <code>null</code>\n-     */\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Date value) {\n-        buffer.append(this.getDateFormat() != null ? this.getDateFormat().format(value) : (Object) value);\n     }\n \n     /**\n \n     //----------------------------------------------------------------------------\n \n-    // Removed, as the XML style needs more work for escaping characters, arrays,\n-    // collections, maps and embedded beans.\n-    //    /**\n-    //     * ToStringStyle that outputs in XML style\n-    //     */\n-    //    private static class XMLToStringStyle extends ToStringStyle {\n-    //        \n-    //        /**\n-    //         * Constructor - use the static constant rather than instantiating.\n-    //         */\n-    //        private XMLToStringStyle() {\n-    //            super();\n-    //            nullText = \"null\";\n-    //            sizeStartText = \"size=\";\n-    //            sizeEndText = \"\";\n-    //        }\n-    //        \n-    //        /**\n-    //         * @see ToStringStyle#appendStart(StringBuffer, Object)\n-    //         */\n-    //        public void appendStart(StringBuffer buffer, Object object) {\n-    //            buffer.append('<');\n-    //            buffer.append(getShortClassName(object.getClass()));\n-    //            buffer.append(\" class=\\\"\");\n-    //            appendClassName(buffer, object);\n-    //            buffer.append(\"\\\" hashCode=\\\"\");\n-    //            appendIdentityHashCode(buffer, object);\n-    //            buffer.append(\"\\\">\");\n-    //            buffer.append(SystemUtils.LINE_SEPARATOR);\n-    //            buffer.append(\"  \");\n-    //        }\n-    //\n-    //        /**\n-    //         * @see ToStringStyle#appendFieldStart(StringBuffer, String)\n-    //         */\n-    //        protected void appendFieldStart(StringBuffer buffer, String fieldName) {\n-    //            buffer.append('<');\n-    //            buffer.append(fieldName);\n-    //            buffer.append('>');\n-    //        }\n-    //\n-    //        /**\n-    //         * @see ToStringStyle#appendFieldEnd(StringBuffer, String)\n-    //         */\n-    //        protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\n-    //            buffer.append(\"</\");\n-    //            buffer.append(fieldName);\n-    //            buffer.append('>');\n-    //            buffer.append(SystemUtils.LINE_SEPARATOR);\n-    //            buffer.append(\"  \");\n-    //        }\n-    //\n-    //        /**\n-    //         * @see ToStringStyle#appendEnd(StringBuffer, Object)\n-    //         */\n-    //        public void appendEnd(StringBuffer buffer, Object object) {\n-    //            int len = buffer.length();\n-    //            if (len > 2 && buffer.charAt(len - 1) == ' ' && buffer.charAt(len - 2) == ' ') {\n-    //                buffer.setLength(len - 2);\n-    //            }\n-    //            buffer.append(\"</\");\n-    //            buffer.append(getShortClassName(object.getClass()));\n-    //            buffer.append(\"\\\">\");\n-    //        }\n-    //\n-    //    }\n+// Removed, as the XML style needs more work for escaping characters, arrays,\n+// collections, maps and embedded beans.\n+//    /**\n+//     * ToStringStyle that outputs in XML style\n+//     */\n+//    private static class XMLToStringStyle extends ToStringStyle {\n+//        \n+//        /**\n+//         * Constructor - use the static constant rather than instantiating.\n+//         */\n+//        private XMLToStringStyle() {\n+//            super();\n+//            nullText = \"null\";\n+//            sizeStartText = \"size=\";\n+//            sizeEndText = \"\";\n+//        }\n+//        \n+//        /**\n+//         * @see ToStringStyle#appendStart(StringBuffer, Object)\n+//         */\n+//        public void appendStart(StringBuffer buffer, Object object) {\n+//            buffer.append('<');\n+//            buffer.append(getShortClassName(object.getClass()));\n+//            buffer.append(\" class=\\\"\");\n+//            appendClassName(buffer, object);\n+//            buffer.append(\"\\\" hashCode=\\\"\");\n+//            appendIdentityHashCode(buffer, object);\n+//            buffer.append(\"\\\">\");\n+//            buffer.append(SystemUtils.LINE_SEPARATOR);\n+//            buffer.append(\"  \");\n+//        }\n+//\n+//        /**\n+//         * @see ToStringStyle#appendFieldStart(StringBuffer, String)\n+//         */\n+//        protected void appendFieldStart(StringBuffer buffer, String fieldName) {\n+//            buffer.append('<');\n+//            buffer.append(fieldName);\n+//            buffer.append('>');\n+//        }\n+//\n+//        /**\n+//         * @see ToStringStyle#appendFieldEnd(StringBuffer, String)\n+//         */\n+//        protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\n+//            buffer.append(\"</\");\n+//            buffer.append(fieldName);\n+//            buffer.append('>');\n+//            buffer.append(SystemUtils.LINE_SEPARATOR);\n+//            buffer.append(\"  \");\n+//        }\n+//\n+//        /**\n+//         * @see ToStringStyle#appendEnd(StringBuffer, Object)\n+//         */\n+//        public void appendEnd(StringBuffer buffer, Object object) {\n+//            int len = buffer.length();\n+//            if (len > 2 && buffer.charAt(len - 1) == ' ' && buffer.charAt(len - 2) == ' ') {\n+//                buffer.setLength(len - 2);\n+//            }\n+//            buffer.append(\"</\");\n+//            buffer.append(getShortClassName(object.getClass()));\n+//            buffer.append(\"\\\">\");\n+//        }\n+//\n+//    }\n \n }", "timestamp": 1058828633, "metainfo": ""}