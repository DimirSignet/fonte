{"sha": "c02ab15728e3ea740a67521b222142d5434fd9f6", "log": "Add method to get all tokens as a list as well as an array  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrTokenizer.java\n+++ b/src/java/org/apache/commons/lang/text/StrTokenizer.java\n     }\n \n     /**\n-     * Gets a copy of the full token list.\n+     * Gets a copy of the full token list as an independent modifiable array.\n      *\n      * @return the tokens as a String array\n      */\n-    public String[] getAllTokens() {\n+    public String[] getTokenArray() {\n         tokenize();\n         return (String[]) tokens.clone();\n+    }\n+\n+    /**\n+     * Gets a copy of the full token list as an independent modifiable list.\n+     *\n+     * @return the tokens as a String array\n+     */\n+    public List getTokenList() {\n+        tokenize();\n+        List list = new ArrayList(tokens.length);\n+        for (int i = 0; i < tokens.length; i++) {\n+            list.add(tokens[i]);\n+        }\n+        return list;\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/text/StrTokenizerTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrTokenizerTest.java\n \n package org.apache.commons.lang.text;\n \n+import java.util.Arrays;\n+import java.util.List;\n import java.util.NoSuchElementException;\n \n import junit.framework.Test;\n         tok.setQuoteChar('\"');\n         tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n         tok.setIgnoreEmptyTokens(false);\n-        String tokens[] = tok.getAllTokens();\n+        String tokens[] = tok.getTokenArray();\n \n         String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", \"\", \"\", \"\",};\n \n         tok.setQuoteChar('\"');\n         tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n         tok.setIgnoreEmptyTokens(false);\n-        String tokens[] = tok.getAllTokens();\n+        String tokens[] = tok.getTokenArray();\n \n         String expected[] = new String[]{\"a\", \"b\", \"c \", \"d;\\\"e\", \"f\", \" \", \" \", \"\",};\n \n         tok.setQuoteChar('\"');\n         tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n         tok.setIgnoreEmptyTokens(false);\n-        String tokens[] = tok.getAllTokens();\n+        String tokens[] = tok.getTokenArray();\n \n         String expected[] = new String[]{\"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", \" \", \" \", \"\",};\n \n         tok.setQuoteChar('\"');\n         tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n         tok.setIgnoreEmptyTokens(true);\n-        String tokens[] = tok.getAllTokens();\n+        String tokens[] = tok.getTokenArray();\n \n         String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\",};\n \n         tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n         tok.setIgnoreEmptyTokens(false);\n         tok.setEmptyTokenAsNull(true);\n-        String tokens[] = tok.getAllTokens();\n+        String tokens[] = tok.getTokenArray();\n \n         String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", null, null, null,};\n \n         tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n         tok.setIgnoreEmptyTokens(false);\n         // tok.setTreatingEmptyAsNull(true);\n-        String tokens[] = tok.getAllTokens();\n+        String tokens[] = tok.getTokenArray();\n \n         String expected[] = new String[]{\"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", null, null, null,};\n \n         tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\n         tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n         tok.setIgnoreEmptyTokens(false);\n-        String tokens[] = tok.getAllTokens();\n+        String tokens[] = tok.getTokenArray();\n \n         String expected[] = new String[]{\"a\", \"\", \"\", \"b\", \"c\", \"d e\", \"f\", \"\",};\n \n         tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\n         tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n         tok.setIgnoreEmptyTokens(true);\n-        String tokens[] = tok.getAllTokens();\n+        String tokens[] = tok.getTokenArray();\n \n         String expected[] = new String[]{\"a\", \"b\", \"c\", \"d e\", \"f\",};\n \n         assertEquals(\"bIGNOREcd\", tok.next());\n         assertEquals(null, tok.next());\n         assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testListArray() {\n+        String input = \"a  b c\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        String[] array = tok.getTokenArray();\n+        List list = tok.getTokenList();\n+        \n+        assertEquals(Arrays.asList(array), list);\n+        assertEquals(3, list.size());\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1153584505, "metainfo": ""}