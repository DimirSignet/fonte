{"sha": "2c83b91ca326e54fea4bb4188e1c794e76b5f924", "log": "use existing API to get all interfaces  ", "commit": "\n--- a/src/java/org/apache/commons/lang/reflect/FieldUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/FieldUtils.java\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.util.Iterator;\n+\n+import org.apache.commons.lang.ClassUtils;\n \n /**\n  * Utilities for working with fields by reflection. Adapted and refactored\n         // incase there is a public supersuperclass field hidden by a private/package\n         // superclass field.\n         Field match = null;\n-        for (Class acls = cls; acls != null; acls = acls.getSuperclass()) {\n-            Class[] ints = acls.getInterfaces();\n-            for (int i = 0; i < ints.length; i++) {\n-                // getField is fine here, because everything is public, and thus it works\n-                try {\n-                    Field test = ints[i].getField(fieldName);\n-                    if (match != null) {\n-                        if (match.getDeclaringClass().equals(test.getDeclaringClass())) {\n-                            continue;\n-                        }\n-                        throw new IllegalArgumentException(\n-                                \"Reference to field \"\n-                                        + fieldName\n-                                        + \" is ambiguous relative to \"\n-                                        + cls\n-                                        + \"; a matching field exists on two or more parent interfaces.\");\n-                    }\n-                    match = test;\n-                } catch (NoSuchFieldException ex) {\n-                    // ignore\n+        for (Iterator intf = ClassUtils.getAllInterfaces(cls).iterator(); intf\n+                .hasNext();) {\n+            try {\n+                Field test = ((Class) intf.next()).getField(fieldName);\n+                if (match != null) {\n+                    throw new IllegalArgumentException(\n+                            \"Reference to field \"\n+                                    + fieldName\n+                                    + \" is ambiguous relative to \"\n+                                    + cls\n+                                    + \"; a matching field exists on two or more parent interfaces.\");\n                 }\n+                match = test;\n+            } catch (NoSuchFieldException ex) {\n+                // ignore\n             }\n         }\n         return match;", "timestamp": 1210194408, "metainfo": ""}