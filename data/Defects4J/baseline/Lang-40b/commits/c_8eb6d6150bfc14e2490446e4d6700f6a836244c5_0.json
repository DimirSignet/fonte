{"sha": "8eb6d6150bfc14e2490446e4d6700f6a836244c5", "log": "Fix various Eclipse warnings (casts, unused vars)  ", "commit": "\n--- a/src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java\n     static class ReflectionTestCycleA {\n         ReflectionTestCycleB b;\n \n+        @Override\n         public int hashCode() {\n             return HashCodeBuilder.reflectionHashCode(this);\n         }\n     static class ReflectionTestCycleB {\n         ReflectionTestCycleA a;\n \n+        @Override\n         public int hashCode() {\n             return HashCodeBuilder.reflectionHashCode(this);\n         }\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n             this.a = a;\n         }\n \n+        @Override\n         public boolean equals(Object o) {\n             if (o == this) {\n                 return true;\n     static class TestSubObject extends TestObject {\n         private int b;\n \n+        @SuppressWarnings(\"unused\")\n         transient private int t;\n \n         public TestSubObject() {\n             this.t = t;\n         }\n \n+        @Override\n         public boolean equals(Object o) {\n             if (o == this) {\n                 return true;\n         assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n     }\n \n+    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n     public void testLong() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long) 0L).toHashCode());\n         assertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), new HashCodeBuilder(17, 37).append(\n                 (long) 123456789L).toHashCode());\n     }\n \n+    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n     public void testInt() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int) 0).toHashCode());\n         assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append((int) 123456).toHashCode());\n         assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());\n     }\n \n+    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n     public void testDouble() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double) 0d).toHashCode());\n         double d = 1234567.89;\n         assertEquals(17 * 37 + (int) (l ^ (l >> 32)), new HashCodeBuilder(17, 37).append(d).toHashCode());\n     }\n \n+    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n     public void testFloat() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode());\n         float f = 1234.89f;\n     }\n \n     static class TestObjectWithMultipleFields {\n+        @SuppressWarnings(\"unused\")\n         private int one = 0;\n \n+        @SuppressWarnings(\"unused\")\n         private int two = 0;\n \n+        @SuppressWarnings(\"unused\")\n         private int three = 0;\n \n         public TestObjectWithMultipleFields(int one, int two, int three) {", "timestamp": 1237037841, "metainfo": ""}