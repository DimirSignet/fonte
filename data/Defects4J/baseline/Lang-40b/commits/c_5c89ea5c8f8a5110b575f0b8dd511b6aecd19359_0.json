{"sha": "5c89ea5c8f8a5110b575f0b8dd511b6aecd19359", "log": "Fixed typos in javadoc and some inline comments. Pr #22908. Patch submitted by Janek Bogucki. Reviewed by Phil Steitz.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/BitField.java\n+++ b/src/java/org/apache/commons/lang/BitField.java\n  * @author Pete Gieser\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: BitField.java,v 1.2 2003/08/22 16:57:04 ggregory Exp $\n+ * @version $Id: BitField.java,v 1.3 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class BitField {\n     \n      * <p>Replaces the bits with new values.</p>\n      *\n      * @see #getValue\n-     * @param holder the int data containint the bits we're\n+     * @param holder the int data containing the bits we're\n      *  interested in\n      * @param value the new value for the specified bits\n      * @return the value of holder with the bits from the value\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n  * @author Matthew Hawthorne\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: BooleanUtils.java,v 1.14 2003/08/22 17:25:33 ggregory Exp $\n+ * @version $Id: BooleanUtils.java,v 1.15 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class BooleanUtils {\n \n         try {\n             primitive = ArrayUtils.toPrimitive(array);\n         } catch (NullPointerException ex) {\n-            throw new IllegalArgumentException(\"The array must not conatin any null elements\");\n+            throw new IllegalArgumentException(\"The array must not contain any null elements\");\n         }\n         return (xor(primitive) ? Boolean.TRUE : Boolean.FALSE);\n     }\n--- a/src/java/org/apache/commons/lang/CharRange.java\n+++ b/src/java/org/apache/commons/lang/CharRange.java\n  * @author Chris Feldhacker\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: CharRange.java,v 1.15 2003/08/22 17:25:33 ggregory Exp $\n+ * @version $Id: CharRange.java,v 1.16 2003/09/07 14:32:34 psteitz Exp $\n  */\n public final class CharRange implements Serializable {\n \n     }\n \n     /**\n-     * <p>Gets a hashCode compatable with the equals method.</p>\n+     * <p>Gets a hashCode compatible with the equals method.</p>\n      * \n      * @return a suitable hashCode\n      */\n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n  * @author Pete Gieser\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: CharSet.java,v 1.20 2003/08/22 17:25:33 ggregory Exp $\n+ * @version $Id: CharSet.java,v 1.21 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class CharSet implements Serializable {\n \n     }\n \n     /**\n-     * <p>Gets a hashCode compatable with the equals method.</p>\n+     * <p>Gets a hashCode compatible with the equals method.</p>\n      *\n      * @return a suitable hashCode\n      * @since 2.0\n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n  * @author Phil Steitz\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: CharSetUtils.java,v 1.26 2003/08/22 17:25:33 ggregory Exp $\n+ * @version $Id: CharSetUtils.java,v 1.27 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class CharSetUtils {\n \n     // Squeeze\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Squeezes any repititions of a character that is mentioned in the\n+     * <p>Squeezes any repetitions of a character that is mentioned in the\n      * supplied set.</p>\n      *\n      * <pre>\n     }\n \n     /**\n-     * <p>Squeezes any repititions of a character that is mentioned in the\n+     * <p>Squeezes any repetitions of a character that is mentioned in the\n      * supplied set.</p>\n      *\n      * <p>An example is:</p>\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.21 2003/08/22 17:25:33 ggregory Exp $\n+ * @version $Id: ClassUtils.java,v 1.22 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class ClassUtils {\n \n      * class and its superclasses.</p>\n      *\n      * <p>The order is determined by looking through each interface in turn as\n-     * declared in the source file and following its hieracrchy up. Then each \n+     * declared in the source file and following its hierarchy up. Then each \n      * superclass is considered in the same way. Later duplicates are ignored, \n      * so the order is maintained.</p>\n      * \n      *\n      * <p>This method calls {@link #isAssignable(Class, Class) isAssignable} for each\n      * Class pair in the input arrays. It can be used to check if a set of arguments\n-     * (the first parameter) are suitably compatable with a set of method parameter types\n+     * (the first parameter) are suitably compatible with a set of method parameter types\n      * (the second parameter).</p>\n      *\n      * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: Entities.java,v 1.13 2003/08/18 02:22:22 bayard Exp $\n+ * @version $Id: Entities.java,v 1.14 2003/09/07 14:32:34 psteitz Exp $\n  */\n class Entities {\n \n         {\"ni\", \"8715\"}, //contains as member, U+220B ISOtech -->\n // <!-- should there be a more memorable name than 'ni'? -->\n         {\"prod\", \"8719\"}, //n-ary product = product sign,U+220F ISOamsb -->\n-// <!-- prod is NOT the same character as U+03A0 'greek capital letter pi' thoughthe same glyph might be used for both -->\n-        {\"sum\", \"8721\"}, //n-ary sumation, U+2211 ISOamsb -->\n-// <!-- sum is NOT the same character as U+03A3 'greek capital letter sigma'though the same glyph might be used for both -->\n+// <!-- prod is NOT the same character as U+03A0 'greek capital letter pi' though the same glyph might be used for both -->\n+        {\"sum\", \"8721\"}, //n-ary summation, U+2211 ISOamsb -->\n+// <!-- sum is NOT the same character as U+03A3 'greek capital letter sigma' though the same glyph might be used for both -->\n         {\"minus\", \"8722\"}, //minus sign, U+2212 ISOtech -->\n         {\"lowast\", \"8727\"}, //asterisk operator, U+2217 ISOtech -->\n         {\"radic\", \"8730\"}, //square root = radical sign,U+221A ISOtech -->\n--- a/src/java/org/apache/commons/lang/NotImplementedException.java\n+++ b/src/java/org/apache/commons/lang/NotImplementedException.java\n  * \n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: NotImplementedException.java,v 1.4 2003/08/18 02:22:23 bayard Exp $\n+ * @version $Id: NotImplementedException.java,v 1.5 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class NotImplementedException extends UnsupportedOperationException {\n \n     /**\n-     * <p>Constructes the exception with the specified class.</p>\n+     * <p>Constructs the exception with the specified class.</p>\n      * \n      * @param clazz  the <code>Class</code> that has not implemented the method\n      */\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n  * @author Eric Pugh\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: NumberUtils.java,v 1.14 2003/08/18 02:22:23 bayard Exp $\n+ * @version $Id: NumberUtils.java,v 1.15 2003/09/07 14:32:34 psteitz Exp $\n  * \n  * @deprecated Moved to org.apache.commons.lang.math.\n  *             Class will be removed in Commons Lang 3.0.\n      *\n      * <p>First, the value is examined for a type qualifier on the end\n      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n-     * trying to create succissively larger types from the type specified\n+     * trying to create successively larger types from the type specified\n      * until one is found that can hold the value.</p>\n      *\n      * <p>If a type specifier is not found, it will check for a decimal point\n                         Float f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float doens't have the presision we want\n+                            //has non-zeros in it, then float does not have the precision we want\n                             return f;\n                         }\n \n      *  <li>NaN\n      *  <li>Positive infinity\n      *  <li>Maximum double\n-     *  <li>Normal positve numbers\n+     *  <li>Normal positive numbers\n      *  <li>+0.0\n      *  <li>-0.0\n      *  <li>Normal negative numbers\n     /**\n      * <p>Compares two floats for order.</p>\n      *\n-     * <p>This method is more comprhensive than the standard Java greater than,\n+     * <p>This method is more comprehensive than the standard Java greater than,\n      * less than and equals operators.</p>\n      * <ul>\n      *  <li>It returns <code>-1</code> if the first value is less than the second.\n      * <li>NaN\n      * <li>Positive infinity\n      * <li>Maximum float\n-     * <li>Normal positve numbers\n+     * <li>Normal positive numbers\n      * <li>+0.0\n      * <li>-0.0\n      * <li>Normal negative numbers\n             }\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n-                // not allowing L with an exponoent\n+                // not allowing L with an exponent\n                 return foundDigit && !hasExp;\n             }\n             // last character is illegal\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: ObjectUtils.java,v 1.21 2003/08/22 17:25:33 ggregory Exp $\n+ * @version $Id: ObjectUtils.java,v 1.22 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class ObjectUtils {\n     \n      * cannot be stored.</p>\n      */\n     public static class Null implements Serializable {\n-        // declare serialization compatability with Commons Lang 1.0\n+        // declare serialization compatibility with Commons Lang 1.0\n         private static final long serialVersionUID = 7092611880189329093L;\n         \n         /**\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author Gary Gregory\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.24 2003/08/22 17:25:33 ggregory Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.25 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class RandomStringUtils {\n \n      * @param count  the length of random string to create\n      * @param letters  if <code>true</code>, generated string will include\n      *  alphabetic characters\n-     * @param numbers  if <code>true</code>, generatd string will include\n+     * @param numbers  if <code>true</code>, generated string will include\n      *  numeric characters\n      * @return the random string\n      */\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n  * @author Phil Steitz\n  * @author Pete Gieser\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.25 2003/08/18 02:22:23 bayard Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.26 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class StringEscapeUtils {\n \n      * @param out  Writer to write escaped string into\n      * @param str  String to escape values in, may be null\n      * @throws IllegalArgumentException if the Writer is <code>null</code>\n-     * @throws IOException if error occurs on undelying Writer\n+     * @throws IOException if error occurs on underlying Writer\n      */\n     public static void escapeJava(Writer out, String str) throws IOException {\n         escapeJavaStyleString(out, str, false);\n      * @param out  Writer to write escaped string into\n      * @param str  String to escape values in, may be null\n      * @throws IllegalArgumentException if the Writer is <code>null</code>\n-     * @throws IOException if error occurs on undelying Writer\n+     * @throws IOException if error occurs on underlying Writer\n      **/\n     public static void escapeJavaScript(Writer out, String str) throws IOException {\n         escapeJavaStyleString(out, str, true);\n      * @param out  the <code>Writer</code> used to output unescaped characters\n      * @param str  the <code>String</code> to unescape, may be null\n      * @throws IllegalArgumentException if the Writer is <code>null</code>\n-     * @throws IOException if error occurs on undelying Writer\n+     * @throws IOException if error occurs on underlying Writer\n      */\n     public static void unescapeJava(Writer out, String str) throws IOException {\n         if (out == null) {\n                 unicode.append(ch);\n                 if (unicode.length() == 4) {\n                     // unicode now contains the four hex digits\n-                    // which represents our unicode chacater\n+                    // which represents our unicode character\n                     try {\n                         int value = Integer.parseInt(unicode.toString(), 16);\n                         out.write((char) value);\n      * @param out  the <code>Writer</code> used to output unescaped characters\n      * @param str  the <code>String</code> to unescape, may be null\n      * @throws IllegalArgumentException if the Writer is <code>null</code>\n-     * @throws IOException if error occurs on undelying Writer\n+     * @throws IOException if error occurs on underlying Writer\n      */\n     public static void unescapeJavaScript(Writer out, String str) throws IOException {\n         unescapeJava(out, str);\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n  *      - changes the case of a String</li>\n  *  <li><b>CountMatches</b>\n- *      - counts the number of occurrances of one String in another</li>\n+ *      - counts the number of occurrences of one String in another</li>\n  *  <li><b>IsAlpha/IsNumeric/IsWhitespace</b>\n  *      - checks the characters in a String</li>\n  *  <li><b>DefaultString</b>\n  * @author Gary Gregory\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.108 2003/09/04 18:18:18 ggregory Exp $\n+ * @version $Id: StringUtils.java,v 1.109 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n      * characters from the end of the String.</p>\n      *\n      * <p>The returned substring starts with the character in the <code>start</code>\n-     * position and ends before the <code>end</code> position. All postion counting is \n+     * position and ends before the <code>end</code> position. All position counting is \n      * zero-based -- i.e., to start at the beginning of the string use \n      * <code>start = 0</code>. Negative start and end positions can be used to \n      * specify offsets relative to the end of the String.</p>\n     // SubStringAfter/SubStringBefore\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Gets the substring before the first occurance of a separator.\n+     * <p>Gets the substring before the first occurrence of a separator.\n      * The separator is not returned.</p>\n      *\n      * <p>A <code>null</code> string input will return <code>null</code>.\n      *\n      * @param str  the String to get a substring from, may be null\n      * @param separator  the String to search for, may be null\n-     * @return the substring before the first occurance of the separator,\n+     * @return the substring before the first occurrence of the separator,\n      *  <code>null</code> if null String input\n      * @since 2.0\n      */\n     }\n \n     /**\n-     * <p>Gets the substring after the first occurance of a separator.\n+     * <p>Gets the substring after the first occurrence of a separator.\n      * The separator is not returned.</p>\n      *\n      * <p>A <code>null</code> string input will return <code>null</code>.\n      *\n      * @param str  the String to get a substring from, may be null\n      * @param separator  the String to search for, may be null\n-     * @return the substring after the first occurance of the separator,\n+     * @return the substring after the first occurrence of the separator,\n      *  <code>null</code> if null String input\n      * @since 2.0\n      */\n     }\n \n     /**\n-     * <p>Gets the substring before the last occurance of a separator.\n+     * <p>Gets the substring before the last occurrence of a separator.\n      * The separator is not returned.</p>\n      *\n      * <p>A <code>null</code> string input will return <code>null</code>.\n      *\n      * @param str  the String to get a substring from, may be null\n      * @param separator  the String to search for, may be null\n-     * @return the substring before the last occurance of the separator,\n+     * @return the substring before the last occurrence of the separator,\n      *  <code>null</code> if null String input\n      * @since 2.0\n      */\n     }\n \n     /**\n-     * <p>Gets the substring after the last occurance of a separator.\n+     * <p>Gets the substring after the last occurrence of a separator.\n      * The separator is not returned.</p>\n      *\n      * <p>A <code>null</code> string input will return <code>null</code>.\n      *\n      * @param str  the String to get a substring from, may be null\n      * @param separator  the String to search for, may be null\n-     * @return the substring after the last occurance of the separator,\n+     * @return the substring after the last occurrence of the separator,\n      *  <code>null</code> if null String input\n      * @since 2.0\n      */\n     }\n \n     /**\n-     * <p>Replaces all occurances of a String within another String.</p>\n+     * <p>Replaces all occurrences of a String within another String.</p>\n      *\n      * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n      * \n     // Replace, character based\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Replaces all occurrances of a character in a String with another.\n+     * <p>Replaces all occurrences of a character in a String with another.\n      * This is a null-safe version of {@link String#replace(char, char)}.</p>\n      *\n      * <p>A <code>null</code> string input returns <code>null</code>.\n      * <p>Capitalizes a String changing the first letter to title case as\n      * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n      * \n-     * <p>For a word based alorithm, see {@link WordUtils#capitalize(String)}.\n+     * <p>For a word based algorithm, see {@link WordUtils#capitalize(String)}.\n      * A <code>null</code> input String returns <code>null</code>.</p>\n      * \n      * <pre>\n      * <p>Uncapitalizes a String changing the first letter to title case as\n      * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n      * \n-     * <p>For a word based alorithm, see {@link WordUtils#uncapitalize(String)}.\n+     * <p>For a word based algorithm, see {@link WordUtils#uncapitalize(String)}.\n      * A <code>null</code> input String returns <code>null</code>.</p>\n      * \n      * <pre>\n      *  <li>Lower case character converts to Upper case</li>\n      * </ul>\n      * \n-     * <p>For a word based alorithm, see {@link WordUtils#swapCase(String)}.\n+     * <p>For a word based algorithm, see {@link WordUtils#swapCase(String)}.\n      * A <code>null</code> input String returns <code>null</code>.</p>\n      * \n      * <pre>\n      * </pre>\n      * \n      * <p>NOTE: This method changed in Lang version 2.0.\n-     * It no longer performs a word based alorithm.\n+     * It no longer performs a word based algorithm.\n      * If you only use ASCII, you will notice no change.\n      * That functionality is available in WordUtils.</p>\n      * \n      *\n      * @param str  the String to check, may be null\n      * @param sub  the substring to count, may be null\n-     * @return the number of occurances, 0 if either String is <code>null</code>\n+     * @return the number of occurrences, 0 if either String is <code>null</code>\n      */\n     public static int countMatches(String str, String sub) {\n         if (str == null || str.length() == 0 || sub == null || sub.length() == 0) {\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: CompareToBuilder.java,v 1.23 2003/08/23 00:21:49 ggregory Exp $\n+ * @version $Id: CompareToBuilder.java,v 1.24 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class CompareToBuilder {\n     \n      * <p>Appends to the <code>builder</code> the comparison of\n      * two <code>double</code>s.</p>\n      *\n-     * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n+     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n      *\n      * <p>It is compatible with the hash code generated by\n      * <code>HashCodeBuilder</code>.</p>\n      * <p>Appends to the <code>builder</code> the comparison of\n      * two <code>float</code>s.</p>\n      *\n-     * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n+     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n      *\n      * <p>It is compatible with the hash code generated by\n      * <code>HashCodeBuilder</code>.</p>\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: EqualsBuilder.java,v 1.20 2003/08/23 00:21:49 ggregory Exp $\n+ * @version $Id: EqualsBuilder.java,v 1.21 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class EqualsBuilder {\n     /**\n      * <p>Test if two <code>double</code>s are equal by testing that the\n      * pattern of bits returned by <code>doubleToLong</code> are equal.</p>\n      *\n-     * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n+     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n      *\n      * <p>It is compatible with the hash code generated by\n      * <code>HashCodeBuilder</code>.</p>\n      * <p>Test if two <code>float</code>s are equal byt testing that the\n      * pattern of bits returned by doubleToLong are equal.</p>\n      *\n-     * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n+     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n      *\n      * <p>It is compatible with the hash code generated by\n      * <code>HashCodeBuilder</code>.</p>\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n  * @author Stephen Colebourne\n  * @author Pete Gieser\n  * @since 2.0\n- * @version $Id: ReflectionToStringBuilder.java,v 1.10 2003/08/23 00:21:49 ggregory Exp $\n+ * @version $Id: ReflectionToStringBuilder.java,v 1.11 2003/09/07 14:32:34 psteitz Exp $\n  */\n public class ReflectionToStringBuilder extends ToStringBuilder {\n \n     }\n \n     /**\n-     * <p>Unegisters this builder's source object to avoid infinite\n+     * <p>Unregisters this builder's source object to avoid infinite\n      * loops when processing circular object references.</p>\n      */\n     void unregisterObject() {\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * @author Chris Webb\n  * @author Mike Bowler\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.21 2003/08/21 15:52:55 ggregory Exp $\n+ * @version $Id: Enum.java,v 1.22 2003/09/07 14:32:34 psteitz Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n \n-    /** Lang version 1.0.1 serial compatability */\n+    /** Lang version 1.0.1 serial compatibility */\n     private static final long serialVersionUID = -487045951170455942L;\n     \n     // After discussion, the default size for HashMaps is used, as the\n--- a/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n  * @author Apache Avalon project\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ValuedEnum.java,v 1.13 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: ValuedEnum.java,v 1.14 2003/09/07 14:32:34 psteitz Exp $\n  */\n public abstract class ValuedEnum extends Enum {\n     \n-    /** Lang version 1.0.1 serial compatability */\n+    /** Lang version 1.0.1 serial compatibility */\n     private static final long serialVersionUID = -7129650521543789085L;\n     \n     /**\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ExceptionUtils.java,v 1.34 2003/08/21 15:52:55 ggregory Exp $\n+ * @version $Id: ExceptionUtils.java,v 1.35 2003/09/07 14:32:35 psteitz Exp $\n  */\n public class ExceptionUtils {\n     \n      * <code>Throwable</code> object, decomposing it into a list of\n      * stack frames.</p>\n      *\n-     * @param throwable  the <code>Throwable</code> to exaamine, may be null\n+     * @param throwable  the <code>Throwable</code> to examine, may be null\n      * @return an array of strings describing each stack frame, never null\n      */\n     public static String[] getStackFrames(Throwable throwable) {\n--- a/src/java/org/apache/commons/lang/exception/Nestable.java\n+++ b/src/java/org/apache/commons/lang/exception/Nestable.java\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: Nestable.java,v 1.9 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: Nestable.java,v 1.10 2003/09/07 14:32:35 psteitz Exp $\n  */\n public interface Nestable {\n     \n \n     /**\n      * Returns the error message of the <code>Throwable</code> in the chain\n-     * of <code>Throwable</code>s at the specified index, numbererd from 0.\n+     * of <code>Throwable</code>s at the specified index, numbered from 0.\n      *\n      * @param index the index of the <code>Throwable</code> in the chain of\n      * <code>Throwable</code>s\n \n     /**\n      * Returns the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s at the specified index, numbererd from 0.\n+     * <code>Throwable</code>s at the specified index, numbered from 0.\n      *\n      * @param index the index, numbered from 0, of the <code>Throwable</code> in\n      * the chain of <code>Throwable</code>s\n \n     /**\n      * Prints the stack trace of this exception to the specified print\n-     * stream.  Includes inforamation from the exception, if any,\n+     * stream.  Includes information from the exception, if any,\n      * which caused this exception.\n      *\n      * @param out <code>PrintStream</code> to use for output.\n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n  * @author Sean C. Sullivan\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: NestableDelegate.java,v 1.20 2003/08/23 00:41:29 ggregory Exp $\n+ * @version $Id: NestableDelegate.java,v 1.21 2003/09/07 14:32:35 psteitz Exp $\n  */\n public class NestableDelegate implements Serializable {\n \n \n     /**\n      * Returns the error message of the <code>Throwable</code> in the chain\n-     * of <code>Throwable</code>s at the specified index, numbererd from 0.\n+     * of <code>Throwable</code>s at the specified index, numbered from 0.\n      *\n      * @param index the index of the <code>Throwable</code> in the chain of\n      * <code>Throwable</code>s\n \n     /**\n      * Returns the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s at the specified index, numbererd from 0.\n+     * <code>Throwable</code>s at the specified index, numbered from 0.\n      *\n      * @param index the index, numbered from 0, of the <code>Throwable</code> in\n      * the chain of <code>Throwable</code>s\n--- a/src/java/org/apache/commons/lang/exception/NestableException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableException.java\n  * about the exception which was caught and provoked throwing the\n  * current exception. Catching and rethrowing may occur multiple\n  * times, and provided that all exceptions except the first one\n- * are descendands of <code>NestedException</code>, when the\n+ * are descendants of <code>NestedException</code>, when the\n  * exception is finally printed out using any of the <code>\n  * printStackTrace()</code> methods, the stacktrace will contain\n  * the information about all exceptions thrown and caught on\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @since 1.0\n- * @version $Id: NestableException.java,v 1.9 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: NestableException.java,v 1.10 2003/09/07 14:32:35 psteitz Exp $\n  */\n public class NestableException extends Exception implements Nestable {\n     \n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n  * @author Tim O'Brien\n  * @author Pete Gieser\n  * @since 2.0\n- * @version $Id: Fraction.java,v 1.11 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: Fraction.java,v 1.12 2003/09/07 14:32:35 psteitz Exp $\n  */\n public final class Fraction extends Number implements Serializable, Comparable {\n \n      * <p>Multiplies the value of this fraction by another, returning the result \n      * in reduced form.</p>\n      *\n-     * @param fraction  the fraction to multipy by, must not be <code>null</code>\n+     * @param fraction  the fraction to multiply by, must not be <code>null</code>\n      * @return a <code>Fraction</code> instance with the resulting values\n      * @throws IllegalArgumentException if the fraction is <code>null</code>\n      * @throws ArithmeticException if the resulting numerator or denominator exceeds\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n  * @since 2.0\n- * @version $Id: NumberUtils.java,v 1.12 2003/09/05 15:55:09 psteitz Exp $\n+ * @version $Id: NumberUtils.java,v 1.13 2003/09/07 14:32:35 psteitz Exp $\n  */\n public class NumberUtils {\n     \n                         Float f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float doens't have the presision we want\n+                            //has non-zeros in it, then float does not have the precision we want\n                             return f;\n                         }\n \n      *  <li>NaN\n      *  <li>Positive infinity\n      *  <li>Maximum double\n-     *  <li>Normal positve numbers\n+     *  <li>Normal positive numbers\n      *  <li>+0.0\n      *  <li>-0.0\n      *  <li>Normal negative numbers\n     /**\n      * <p>Compares two floats for order.</p>\n      *\n-     * <p>This method is more comprhensive than the standard Java greater than,\n+     * <p>This method is more comprehensive than the standard Java greater than,\n      * less than and equals operators.</p>\n      * <ul>\n      *  <li>It returns <code>-1</code> if the first value is less than the second.\n      * <li>NaN\n      * <li>Positive infinity\n      * <li>Maximum float\n-     * <li>Normal positve numbers\n+     * <li>Normal positive numbers\n      * <li>+0.0\n      * <li>-0.0\n      * <li>Normal negative numbers\n             }\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n-                // not allowing L with an exponoent\n+                // not allowing L with an exponent\n                 return foundDigit && !hasExp;\n             }\n             // last character is illegal\n--- a/src/java/org/apache/commons/lang/reflect/FieldUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/FieldUtils.java\n  * facility should be used with care.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: FieldUtils.java,v 1.3 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: FieldUtils.java,v 1.4 2003/09/07 14:32:35 psteitz Exp $\n  */\n public class FieldUtils {\n     \n     // -------------------------------------------------------------------------\n     \n     /**\n-     * <p>Gets an accessible <code>Field</code> by name repecting scope.\n+     * <p>Gets an accessible <code>Field</code> by name respecting scope.\n      * Superclasses/interfaces will be considered.</p>\n      *\n      * @param cls  the class to reflect, must not be <code>null</code>\n--- a/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n  * @author Jan Sorensen\n  * @author Robert Burrell Donkin\n  * @author Gary Gregory\n- * @version $Id: MethodUtils.java,v 1.15 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: MethodUtils.java,v 1.16 2003/09/07 14:32:35 psteitz Exp $\n  */\n public class MethodUtils {\n \n                 // modifer is public.\n                 //\n                 // The following workaround solves the problem but will only\n-                // work from sufficiently privilages code. \n+                // work from sufficiently privileges code. \n                 //\n-                // Better workarounds would be greatfully accepted.\n+                // Better workarounds would be gratefully accepted.\n                 //\n                 if (ReflectionUtils.isPublicScope(method)) {\n                     method.setAccessible(true);\n--- a/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n  * reflection.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: ReflectionUtils.java,v 1.10 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: ReflectionUtils.java,v 1.11 2003/09/07 14:32:35 psteitz Exp $\n  */\n public class ReflectionUtils {\n     \n      * @param parameterType the type of parameter accepted by the method\n      * @param requestedType the type of parameter being requested \n      *\n-     * @return <code>true</code> if the assignement is compatible.\n+     * @return <code>true</code> if the assignment is compatible.\n      */\n     public static boolean isCompatible(Class requestedType, Class parameterType) {\n         // try plain assignment\n--- a/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n import java.util.TimeZone;\n \n /**\n- * <p>Date and time formatting utilites and constants.</p>\n+ * <p>Date and time formatting utilities and constants.</p>\n  *\n  * <p>Formatting is performed using the\n  * {@link org.apache.commons.lang.time.FastDateFormat} class.</p>\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: DateFormatUtils.java,v 1.7 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: DateFormatUtils.java,v 1.8 2003/09/07 14:32:35 psteitz Exp $\n  */\n public class DateFormatUtils {\n \n     /**\n-     * ISO8601 formatter for date-time witout time zone.\n+     * ISO8601 formatter for date-time without time zone.\n      * The format used is <tt>yyyy-MM-dd'T'HH:mm:ss</tt>.\n      */\n     public static final FastDateFormat ISO_DATETIME_FORMAT\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n package org.apache.commons.lang.time;\n \n /**\n- * <p>Duration formatting utilites and constants.</p>\n+ * <p>Duration formatting utilities and constants.</p>\n  *\n  * @author Apache Ant - DateUtils\n  * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: DurationFormatUtils.java,v 1.5 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: DurationFormatUtils.java,v 1.6 2003/09/07 14:32:35 psteitz Exp $\n  */\n class DurationFormatUtils {\n     // TODO: Make class public once methods can fully select which fields to output\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n  *\n  * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n  * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n- * This introduces a minor incompatability with Java 1.4, but at a gain of\n+ * This introduces a minor incompatibility with Java 1.4, but at a gain of\n  * useful functionality.</p>\n  *\n  * @author TeaTrove project\n  * @author Gary Gregory\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: FastDateFormat.java,v 1.15 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: FastDateFormat.java,v 1.16 2003/09/07 14:32:35 psteitz Exp $\n  */\n public class FastDateFormat extends Format {\n     // A lot of the speed in this class comes from caching, but some comes\n     /**\n      * <p>A suitable hashcode.</p>\n      * \n-     * @return a hashcode compatable with equals\n+     * @return a hashcode compatible with equals\n      */\n     public int hashCode() {\n         int total = 0;\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n  * @author Henri Yandell\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: StopWatch.java,v 1.6 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: StopWatch.java,v 1.7 2003/09/07 14:32:35 psteitz Exp $\n  */\n public class StopWatch {\n     \n      * <p>Split the time.</p>\n      * \n      * <p>This method sets the stop time of the watch to allow a time to be extracted.\n-     * The start time is unaffected, enabling {@link #unsplit()} to contine the \n+     * The start time is unaffected, enabling {@link #unsplit()} to continue the \n      * timing from the original start point.</p>\n      */\n     public void split() {\n--- a/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: RandomStringUtilsTest.java,v 1.11 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: RandomStringUtilsTest.java,v 1.12 2003/09/07 14:32:35 psteitz Exp $\n  */\n public class RandomStringUtilsTest extends junit.framework.TestCase {\n     /**\n     /**\n      * Computes Chi-Square statistic given observed and expected counts\n      * @param observed array of observed frequency counts\n-     * @param expected array of exptected frequency counts\n+     * @param expected array of expected frequency counts\n      */\n     private double chiSquare(int[] expected, int[] observed) {\n         double sumSq = 0.0d;\n--- a/src/test/org/apache/commons/lang/math/RandomUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/RandomUtilsTest.java\n  * Test cases for the {@link RandomUtils} class.\n  *\n  * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n- * @version $Revision: 1.5 $ $Date: 2003/08/18 02:22:27 $\n+ * @version $Revision: 1.6 $ $Date: 2003/09/07 14:32:35 $\n  */\n \n public final class RandomUtilsTest extends TestCase {\n     /**\n      * Computes Chi-Square statistic given observed and expected counts\n      * @param observed array of observed frequency counts\n-     * @param expected array of exptected frequency counts\n+     * @param expected array of expected frequency counts\n      */\n     private double chiSquare(int[] expected, int[] observed) {\n         double sumSq = 0.0d;\n--- a/src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java\n+++ b/src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java\n \n         } catch (Throwable t) {\n             // ONE\n-            fail(\"Exception in method ONE prevented invokation: \" + t.toString());\n+            fail(\"Exception in method ONE prevented invocation: \" + t.toString());\n         }\n \n         // trickier this one - find a method in a direct interface\n \n         } catch (Throwable t) {\n             // METHOD TWO FAILURE\n-            fail(\"Exception in method TWO prevented invokation: \" + t.toString());\n+            fail(\"Exception in method TWO prevented invocation: \" + t.toString());\n         }\n \n \n \n         } catch (Throwable t) {\n             // METHOD THREE FAILURE\n-            fail(\"Exception in method THREE prevented invokation: \" + t.toString());\n+            fail(\"Exception in method THREE prevented invocation: \" + t.toString());\n \n         }\n     }", "timestamp": 1062945155, "metainfo": ""}