{"sha": "b9ea92e5f483ee95b8be2292fdee04ba4a63ef1a", "log": "Apply patch for bug 17250 (http://issues.apache.org/bugzilla/show_bug.cgi?id=17250) with some additional minor improvements.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n package org.apache.commons.lang.builder;\n \n import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Modifier;\n+\n /**\n  * <p><code>ToString</code> generation routine.</p>\n  *\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: ToStringBuilder.java,v 1.14 2003/01/19 18:49:05 scolebourne Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.15 2003/03/20 05:32:11 ggregory Exp $\n  */\n public class ToStringBuilder {\n-    \n+\n     /**\n      * The default style of output to use\n      */\n      * The object being output\n      */\n     private final Object object;\n-    \n+\n     /**\n      * <p>Constructor for <code>ToStringBuilder</code>.</p>\n      *\n     public ToStringBuilder(Object object) {\n         this(object, getDefaultStyle(), null);\n     }\n-    \n+\n     /**\n      * <p>Constructor for <code>ToStringBuilder</code> specifying the\n      * output style.</p>\n     public ToStringBuilder(Object object, ToStringStyle style) {\n         this(object, style, null);\n     }\n-    \n+\n     /**\n      * <p>Constructor for <code>ToStringBuilder</code>.</p>\n      *\n         this.buffer = buffer;\n         this.style = style;\n         this.object = object;\n-        \n+\n         style.appendStart(buffer, object);\n     }\n-    \n-    //----------------------------------------------------------------------------\n-    \n+\n+    //----------------------------------------------------------------------------\n+\n     /**\n      * <p>Gets the default <code>ToStringStyle</code> to use.</p>\n      *\n     public static ToStringStyle getDefaultStyle() {\n         return defaultStyle;\n     }\n-    \n+\n     /**\n      * <p>Sets the default <code>ToStringStyle</code> to use.</p>\n      * \n         }\n         defaultStyle = style;\n     }\n-    \n+\n     //-------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>This method uses reflection to build a suitable\n      * <code>toString<code> using the default <code>ToStringStyle</code>.\n      * @throws IllegalArgumentException if the Object is <code>null</code>\n      */\n     public static String reflectionToString(Object object, ToStringStyle style, boolean outputTransients, Class reflectUpToClass) {\n+        if (style == null) {\n+            style = getDefaultStyle();\n+        }\n         if (object == null) {\n-            throw new IllegalArgumentException(\"The object must not be null\");\n+            return style.getNullText();\n         }\n         if (style == null) {\n             style = getDefaultStyle();\n      * given Class.\n      * \n      * @param object  the object to append details of\n-     * @param clazz  the class to append details of\n+     * @param clazz  the class of object parameter\n      * @param builder  the builder to append to\n      * @param useTransients  whether to output transient fields\n      */\n     private static void reflectionAppend(Object object, Class clazz, ToStringBuilder builder, boolean useTransients) {\n+        if (clazz.isArray()) {\n+            reflectionAppendArray(object, clazz, builder);\n+            return;\n+        }\n         Field[] fields = clazz.getDeclaredFields();\n         Field.setAccessible(fields, true);\n         for (int i = 0; i < fields.length; i++) {\n             Field f = fields[i];\n-            if ((f.getName().indexOf('$') == -1) &&\n-                (useTransients || !Modifier.isTransient(f.getModifiers())) &&\n-                (!Modifier.isStatic(f.getModifiers()))) {\n+            if ((f.getName().indexOf('$') == -1)\n+                && (useTransients || !Modifier.isTransient(f.getModifiers()))\n+                && (!Modifier.isStatic(f.getModifiers()))) {\n                 try {\n                     builder.append(f.getName(), f.get(object));\n                 } catch (IllegalAccessException ex) {\n                     //this can't happen. Would get a Security exception instead\n                     //throw a runtime exception in case the impossible happens.\n-                    throw new InternalError(\"Unexpected IllegalAccessException\");\n+                    throw new InternalError(\"Unexpected IllegalAccessException: \" + ex.getMessage());\n                 }\n             }\n         }\n-     }\n-     \n-     //----------------------------------------------------------------------------\n-    \n+    }\n+\n+    /**\n+     * Appends the array elements in the given <code>Object</code> of the\n+     * given <code>Class</code> to a <code>ToStringBuilder</code>.\n+     * \n+     * @param object  the array object to append details of\n+     * @param clazz  the array class of the object parameter\n+     * @param builder  the builder to append to\n+     */\n+    private static void reflectionAppendArray(Object object, Class clazz, ToStringBuilder builder) {\n+        try {\n+            // A multi-dimension array invokes the append(Object) method.\n+            // A single-dimension array of primitive type pt invokes the append(pt[]) method.\n+            builder.getClass().getDeclaredMethod(\"append\", new Class[] { clazz.getComponentType().isArray() ? Object.class : clazz }).invoke(\n+                builder,\n+                new Object[] { object });\n+        } catch (SecurityException e) {\n+            // \"This cannot happen\"\n+            throw new InternalError(\"Unexpected SecurityException: \" + e.getMessage());\n+        } catch (NoSuchMethodException e) {\n+            // \"This cannot happen\"\n+            throw new InternalError(\"Unexpected NoSuchMethodException: \" + e.getMessage());\n+        } catch (IllegalArgumentException e) {\n+            // Method.invoke exception\n+            // \"This cannot happen\"\n+            throw new InternalError(\"Unexpected IllegalArgumentException: \" + e.getMessage());\n+        } catch (IllegalAccessException e) {\n+            // Method.invoke exception\n+            // \"This cannot happen\"\n+            throw new InternalError(\"Unexpected IllegalAccessException: \" + e.getMessage());\n+        } catch (InvocationTargetException e) {\n+            // Method.invoke exception\n+            // \"This cannot happen\"\n+            throw new InternalError(\"Unexpected InvocationTargetException: \" + e.getMessage());\n+        }\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n     /**\n      * <p>Append the <code>toString</code> from the superclass.</p>\n      * \n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>Object</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>long</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>int</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>short</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>char</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>byte</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>double</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>float</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>boolean</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>Object</code>\n      * array.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>long</code>\n      * array.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>int</code>\n      * array.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>short</code>\n      * array.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>char</code>\n      * array.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>byte</code>\n      * array.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>double</code>\n      * array.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>float</code>\n      * array.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>boolean</code>\n      * array.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the <code>ToStringStyle</code> being used.</p>\n      * \n      * @return the <code>ToStringStyle</code> being used\n-     */    \n+     */\n     public ToStringStyle getStyle() {\n         return style;\n     }\n      * <p>Gets the <code>StringBuffer</code> being populated.</p>\n      * \n      * @return the <code>StringBuffer</code> being populated\n-     */    \n+     */\n     public StringBuffer getStringBuffer() {\n         return buffer;\n     }\n      * Use {@link #getStringBuffer} to get the current string state.</p>\n      * \n      * @return the String <code>toString</code>\n-     */    \n+     */\n     public String toString() {\n         style.appendEnd(buffer, object);\n         return buffer.toString();", "timestamp": 1048138331, "metainfo": ""}