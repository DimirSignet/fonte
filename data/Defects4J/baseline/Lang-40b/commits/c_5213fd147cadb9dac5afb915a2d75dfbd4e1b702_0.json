{"sha": "5213fd147cadb9dac5afb915a2d75dfbd4e1b702", "log": "Renamed stringTo<Type>-metods to to<Type>. The stringToInt-methods have been deprecated.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n  * @since 2.0\n- * @version $Id: NumberUtils.java,v 1.14 2003/09/13 03:11:30 psteitz Exp $\n+ * @version $Id: NumberUtils.java,v 1.15 2003/09/23 15:46:42 fredrik Exp $\n  */\n public class NumberUtils {\n     \n      * @param str  the string to convert, may be null\n      * @return the int represented by the string, or <code>zero</code> if\n      *  conversion fails\n+     * @deprecated Use {@link #toInt(String)}\n+     *  This method will be removed in Commons Lang 3.0\n      */\n     public static int stringToInt(String str) {\n-        return stringToInt(str, 0);\n+        return toInt(str);\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to an <code>int</code>, returning\n+     * <code>zero</code> if the conversion fails.</p>\n+     *\n+     * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>\n+     *\n+     * <pre>\n+     *   NumberUtils.toInt(null) = 0\n+     *   NumberUtils.toInt(\"\")   = 0\n+     *   NumberUtils.toInt(\"1\")  = 1\n+     * </pre>\n+     *\n+     * @param str  the string to convert, may be null\n+     * @return the int represented by the string, or <code>zero</code> if\n+     *  conversion fails\n+     */\n+    public static int toInt(String str) {\n+        return toInt(str, 0);\n     }\n \n     /**\n      * @param str  the string to convert, may be null\n      * @param defaultValue  the default value\n      * @return the int represented by the string, or the default if conversion fails\n+     * @deprecated Use {@link #toInt(String, int)}\n+     *  This method will be removed in Commons Lang 3.0\n      */\n     public static int stringToInt(String str, int defaultValue) {\n+        return toInt(str, defaultValue);\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to an <code>int</code>, returning a\n+     * default value if the conversion fails.</p>\n+     *\n+     * <p>If the string is <code>null</code>, the default value is returned.</p>\n+     *\n+     * <pre>\n+     *   NumberUtils.toInt(null, 1) = 1\n+     *   NumberUtils.toInt(\"\", 1)   = 1\n+     *   NumberUtils.toInt(\"1\", 0)  = 1\n+     * </pre>\n+     *\n+     * @param str  the string to convert, may be null\n+     * @param defaultValue  the default value\n+     * @return the int represented by the string, or the default if conversion fails\n+     */\n+    public static int toInt(String str, int defaultValue) {\n         try {\n             return Integer.parseInt(str);\n         } catch (NumberFormatException nfe) {\n      * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>\n      *\n      * <pre>\n-     *   NumberUtils.stringToLong(null) = 0L\n-     *   NumberUtils.stringToLong(\"\")   = 0L\n-     *   NumberUtils.stringToLong(\"1\")  = 1L\n+     *   NumberUtils.toLong(null) = 0L\n+     *   NumberUtils.toLong(\"\")   = 0L\n+     *   NumberUtils.toLong(\"1\")  = 1L\n      * </pre>\n      *\n      * @param str  the string to convert, may be null\n      *  conversion fails\n      * @since 2.1\n      */\n-    public static long stringToLong(String str) {\n-        return stringToLong(str, 0L);\n+    public static long toLong(String str) {\n+        return toLong(str, 0L);\n     }\n \n     /**\n      * <p>If the string is <code>null</code>, the default value is returned.</p>\n      *\n      * <pre>\n-     *   NumberUtils.stringToLong(null, 1L) = 1L\n-     *   NumberUtils.stringToLong(\"\", 1L)   = 1L\n-     *   NumberUtils.stringToLong(\"1\", 0L)  = 1L\n+     *   NumberUtils.toLong(null, 1L) = 1L\n+     *   NumberUtils.toLong(\"\", 1L)   = 1L\n+     *   NumberUtils.toLong(\"1\", 0L)  = 1L\n      * </pre>\n      *\n      * @param str  the string to convert, may be null\n      * @return the long represented by the string, or the default if conversion fails\n      * @since 2.1\n      */\n-    public static long stringToLong(String str, long defaultValue) {\n+    public static long toLong(String str, long defaultValue) {\n         try {\n             return Long.parseLong(str);\n         } catch (NumberFormatException nfe) {\n      * <code>0.0f</code> is returned.</p>\n      *\n      * <pre>\n-     *   NumberUtils.stringToFloat(null)   = 0.0f\n-     *   NumberUtils.stringToFloat(\"\")     = 0.0f\n-     *   NumberUtils.stringToFloat(\"1.5\")  = 1.5f\n+     *   NumberUtils.toFloat(null)   = 0.0f\n+     *   NumberUtils.toFloat(\"\")     = 0.0f\n+     *   NumberUtils.toFloat(\"1.5\")  = 1.5f\n      * </pre>\n      *\n      * @param str the string to convert, may be <code>null</code>\n      *  if conversion fails\n      * @since 2.1\n      */\n-    public static float stringToFloat(String str) {\n-        return stringToFloat(str, 0.0f);\n+    public static float toFloat(String str) {\n+        return toFloat(str, 0.0f);\n     }\n \n     /**\n      * value is returned.</p>\n      *\n      * <pre>\n-     *   NumberUtils.stringToFloat(null, 1.1f)   = 1.0f\n-     *   NumberUtils.stringToFloat(\"\", 1.1f)     = 1.1f\n-     *   NumberUtils.stringToFloat(\"1.5\", 0.0f)  = 1.5f\n+     *   NumberUtils.toFloat(null, 1.1f)   = 1.0f\n+     *   NumberUtils.toFloat(\"\", 1.1f)     = 1.1f\n+     *   NumberUtils.toFloat(\"1.5\", 0.0f)  = 1.5f\n      * </pre>\n      *\n      * @param str the string to convert, may be <code>null</code>\n      *  if conversion fails\n      * @since 2.1\n      */\n-    public static float stringToFloat(String str, float defaultValue) {\n+    public static float toFloat(String str, float defaultValue) {\n       if (str == null) {\n           return defaultValue;\n       }     \n      * <code>0.0d</code> is returned.</p>\n      *\n      * <pre>\n-     *   NumberUtils.stringToDouble(null)   = 0.0d\n-     *   NumberUtils.stringToDouble(\"\")     = 0.0d\n-     *   NumberUtils.stringToDouble(\"1.5\")  = 1.5d\n+     *   NumberUtils.toDouble(null)   = 0.0d\n+     *   NumberUtils.toDouble(\"\")     = 0.0d\n+     *   NumberUtils.toDouble(\"1.5\")  = 1.5d\n      * </pre>\n      *\n      * @param str the string to convert, may be <code>null</code>\n      *  if conversion fails\n      * @since 2.1\n      */\n-    public static double stringToDouble(String str) {\n-        return stringToDouble(str, 0.0d);\n+    public static double toDouble(String str) {\n+        return toDouble(str, 0.0d);\n     }\n \n     /**\n      * value is returned.</p>\n      *\n      * <pre>\n-     *   NumberUtils.stringToDouble(null, 1.1d)   = 1.1d\n-     *   NumberUtils.stringToDouble(\"\", 1.1d)     = 1.1d\n-     *   NumberUtils.stringToDouble(\"1.5\", 0.0d)  = 1.5d\n+     *   NumberUtils.toDouble(null, 1.1d)   = 1.1d\n+     *   NumberUtils.toDouble(\"\", 1.1d)     = 1.1d\n+     *   NumberUtils.toDouble(\"1.5\", 0.0d)  = 1.5d\n      * </pre>\n      *\n      * @param str the string to convert, may be <code>null</code>\n      *  if conversion fails\n      * @since 2.1\n      */\n-    public static double stringToDouble(String str, double defaultValue) {\n+    public static double toDouble(String str, double defaultValue) {\n       if (str == null) {\n           return defaultValue;\n       }\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: NumberUtilsTest.java,v 1.9 2003/09/05 15:55:09 psteitz Exp $\n+ * @version $Id: NumberUtilsTest.java,v 1.10 2003/09/23 15:46:41 fredrik Exp $\n  */\n public class NumberUtilsTest extends TestCase {\n \n     //---------------------------------------------------------------------\n \n     /**\n-     * Test for int stringToInt(String)\n+     * Test for {@link NumberUtils#stringToInt(String)}.\n      */\n     public void testStringToIntString() {\n         assertTrue(\"stringToInt(String) 1 failed\", NumberUtils.stringToInt(\"12345\") == 12345);\n     }\n \n     /**\n-     * Test for int stringToInt(String, int)\n+     * Test for {@link NumberUtils#toInt(String)}.\n+     */\n+    public void testToIntString() {\n+        assertTrue(\"toInt(String) 1 failed\", NumberUtils.toInt(\"12345\") == 12345);\n+        assertTrue(\"toInt(String) 2 failed\", NumberUtils.toInt(\"abc\") == 0);\n+        assertTrue(\"toInt(empty) failed\", NumberUtils.toInt(\"\") == 0);\n+        assertTrue(\"toInt(null) failed\", NumberUtils.toInt(null) == 0);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#stringToInt(String, int)}.\n      */\n     public void testStringToIntStringI() {\n         assertTrue(\"stringToInt(String,int) 1 failed\", NumberUtils.stringToInt(\"12345\", 5) == 12345);\n     }\n \n     /**\n-     * Test for long stringToLong(String)\n+     * Test for {@link NumberUtils#toInt(String, int)}.\n      */\n-    public void testStringToLongString() {\n-        assertTrue(\"stringToLong(String) 1 failed\", NumberUtils.stringToLong(\"12345\") == 12345l);\n-        assertTrue(\"stringToLong(String) 2 failed\", NumberUtils.stringToLong(\"abc\") == 0l);\n-        assertTrue(\"stringToLong(String) 3 failed\", NumberUtils.stringToLong(\"1L\") == 0l);\n-        assertTrue(\"stringToLong(String) 4 failed\", NumberUtils.stringToLong(\"1l\") == 0l);\n-        assertTrue(\"stringToLong(Long.MAX_VALUE) failed\", NumberUtils.stringToLong(Long.MAX_VALUE+\"\") == Long.MAX_VALUE);\n-        assertTrue(\"stringToLong(Long.MIN_VALUE) failed\", NumberUtils.stringToLong(Long.MIN_VALUE+\"\") == Long.MIN_VALUE);\n-        assertTrue(\"stringToLong(empty) failed\", NumberUtils.stringToLong(\"\") == 0l);\n-        assertTrue(\"stringToLong(null) failed\", NumberUtils.stringToLong(null) == 0l);\n+    public void testToIntStringI() {\n+        assertTrue(\"toInt(String,int) 1 failed\", NumberUtils.toInt(\"12345\", 5) == 12345);\n+        assertTrue(\"toInt(String,int) 2 failed\", NumberUtils.toInt(\"1234.5\", 5) == 5);\n     }\n \n     /**\n-     * Test for long stringToLong(String, long)\n+     * Test for {@link NumberUtils#toLong(String)}.\n      */\n-    public void testStringToLongStringL() {\n-        assertTrue(\"stringToLong(String,long) 1 failed\", NumberUtils.stringToLong(\"12345\", 5l) == 12345l);\n-        assertTrue(\"stringToLong(String,long) 2 failed\", NumberUtils.stringToLong(\"1234.5\", 5l) == 5l);\n+    public void testToLongString() {\n+        assertTrue(\"toLong(String) 1 failed\", NumberUtils.toLong(\"12345\") == 12345l);\n+        assertTrue(\"toLong(String) 2 failed\", NumberUtils.toLong(\"abc\") == 0l);\n+        assertTrue(\"toLong(String) 3 failed\", NumberUtils.toLong(\"1L\") == 0l);\n+        assertTrue(\"toLong(String) 4 failed\", NumberUtils.toLong(\"1l\") == 0l);\n+        assertTrue(\"toLong(Long.MAX_VALUE) failed\", NumberUtils.toLong(Long.MAX_VALUE+\"\") == Long.MAX_VALUE);\n+        assertTrue(\"toLong(Long.MIN_VALUE) failed\", NumberUtils.toLong(Long.MIN_VALUE+\"\") == Long.MIN_VALUE);\n+        assertTrue(\"toLong(empty) failed\", NumberUtils.toLong(\"\") == 0l);\n+        assertTrue(\"toLong(null) failed\", NumberUtils.toLong(null) == 0l);\n     }\n \n     /**\n-     * Test for float stringToFloat(String)\n+     * Test for {@link NumberUtils#toLong(String, long)}.\n      */\n-    public void testStringToFloatString() {\n-        assertTrue(\"stringToFloat(String) 1 failed\", NumberUtils.stringToFloat(\"-1.2345\") == -1.2345f);\n-        assertTrue(\"stringToFloat(String) 2 failed\", NumberUtils.stringToFloat(\"1.2345\") == 1.2345f);\n-        assertTrue(\"stringToFloat(String) 3 failed\", NumberUtils.stringToFloat(\"abc\") == 0.0f);\n-        assertTrue(\"stringToFloat(Float.MAX_VALUE) failed\", NumberUtils.stringToFloat(Float.MAX_VALUE+\"\") ==  Float.MAX_VALUE);\n-        assertTrue(\"stringToFloat(Float.MIN_VALUE) failed\", NumberUtils.stringToFloat(Float.MIN_VALUE+\"\") == Float.MIN_VALUE);\n-        assertTrue(\"stringToFloat(empty) failed\", NumberUtils.stringToFloat(\"\") == 0.0f);\n-        assertTrue(\"stringToFloat(null) failed\", NumberUtils.stringToFloat(null) == 0.0f);\n+    public void testToLongStringL() {\n+        assertTrue(\"toLong(String,long) 1 failed\", NumberUtils.toLong(\"12345\", 5l) == 12345l);\n+        assertTrue(\"toLong(String,long) 2 failed\", NumberUtils.toLong(\"1234.5\", 5l) == 5l);\n     }\n \n     /**\n-     * Test for float stringToFloat(String, float)\n+     * Test for {@link NumberUtils#toFloat(String)}.\n      */\n-    public void testStringToFloatStringF() {\n-        assertTrue(\"stringToFloat(String,int) 1 failed\", NumberUtils.stringToFloat(\"1.2345\", 5.1f) == 1.2345f);\n-        assertTrue(\"stringToFloat(String,int) 2 failed\", NumberUtils.stringToFloat(\"a\", 5.0f) == 5.0f);\n+    public void testToFloatString() {\n+        assertTrue(\"toFloat(String) 1 failed\", NumberUtils.toFloat(\"-1.2345\") == -1.2345f);\n+        assertTrue(\"toFloat(String) 2 failed\", NumberUtils.toFloat(\"1.2345\") == 1.2345f);\n+        assertTrue(\"toFloat(String) 3 failed\", NumberUtils.toFloat(\"abc\") == 0.0f);\n+        assertTrue(\"toFloat(Float.MAX_VALUE) failed\", NumberUtils.toFloat(Float.MAX_VALUE+\"\") ==  Float.MAX_VALUE);\n+        assertTrue(\"toFloat(Float.MIN_VALUE) failed\", NumberUtils.toFloat(Float.MIN_VALUE+\"\") == Float.MIN_VALUE);\n+        assertTrue(\"toFloat(empty) failed\", NumberUtils.toFloat(\"\") == 0.0f);\n+        assertTrue(\"toFloat(null) failed\", NumberUtils.toFloat(null) == 0.0f);\n     }\n \n     /**\n-     * Test for double stringToDouble(String)\n+     * Test for {@link NumberUtils#toFloat(String, float)}.\n+     */\n+    public void testToFloatStringF() {\n+        assertTrue(\"toFloat(String,int) 1 failed\", NumberUtils.toFloat(\"1.2345\", 5.1f) == 1.2345f);\n+        assertTrue(\"toFloat(String,int) 2 failed\", NumberUtils.toFloat(\"a\", 5.0f) == 5.0f);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toDouble(String)}.\n      */\n     public void testStringToDoubleString() {\n-        assertTrue(\"stringToDouble(String) 1 failed\", NumberUtils.stringToDouble(\"-1.2345\") == -1.2345d);\n-        assertTrue(\"stringToDouble(String) 2 failed\", NumberUtils.stringToDouble(\"1.2345\") == 1.2345d);\n-        assertTrue(\"stringToDouble(String) 3 failed\", NumberUtils.stringToDouble(\"abc\") == 0.0d);\n-        assertTrue(\"stringToDouble(Double.MAX_VALUE) failed\", NumberUtils.stringToDouble(Double.MAX_VALUE+\"\") == Double.MAX_VALUE);\n-        assertTrue(\"stringToDouble(Double.MIN_VALUE) failed\", NumberUtils.stringToDouble(Double.MIN_VALUE+\"\") == Double.MIN_VALUE);\n-        assertTrue(\"stringToDouble(empty) failed\", NumberUtils.stringToDouble(\"\") == 0.0d);\n-        assertTrue(\"stringToDouble(null) failed\", NumberUtils.stringToDouble(null) == 0.0d);\n+        assertTrue(\"toDouble(String) 1 failed\", NumberUtils.toDouble(\"-1.2345\") == -1.2345d);\n+        assertTrue(\"toDouble(String) 2 failed\", NumberUtils.toDouble(\"1.2345\") == 1.2345d);\n+        assertTrue(\"toDouble(String) 3 failed\", NumberUtils.toDouble(\"abc\") == 0.0d);\n+        assertTrue(\"toDouble(Double.MAX_VALUE) failed\", NumberUtils.toDouble(Double.MAX_VALUE+\"\") == Double.MAX_VALUE);\n+        assertTrue(\"toDouble(Double.MIN_VALUE) failed\", NumberUtils.toDouble(Double.MIN_VALUE+\"\") == Double.MIN_VALUE);\n+        assertTrue(\"toDouble(empty) failed\", NumberUtils.toDouble(\"\") == 0.0d);\n+        assertTrue(\"toDouble(null) failed\", NumberUtils.toDouble(null) == 0.0d);\n     }\n \n     /**\n-     * Test for double stringToFloat(String, float)\n+     * Test for {@link NumberUtils#toDouble(String, double)}.\n      */\n     public void testStringToDoubleStringD() {\n-        assertTrue(\"stringToDouble(String,int) 1 failed\", NumberUtils.stringToDouble(\"1.2345\", 5.1d) == 1.2345d);\n-        assertTrue(\"stringToDouble(String,int) 2 failed\", NumberUtils.stringToDouble(\"a\", 5.0d) == 5.0d);\n+        assertTrue(\"toDouble(String,int) 1 failed\", NumberUtils.toDouble(\"1.2345\", 5.1d) == 1.2345d);\n+        assertTrue(\"toDouble(String,int) 2 failed\", NumberUtils.toDouble(\"a\", 5.0d) == 5.0d);\n     }\n \n     public void testCreateNumber() {", "timestamp": 1064332002, "metainfo": ""}