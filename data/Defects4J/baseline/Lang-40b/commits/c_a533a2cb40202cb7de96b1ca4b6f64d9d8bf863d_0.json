{"sha": "a533a2cb40202cb7de96b1ca4b6f64d9d8bf863d", "log": "Update padding to be thread-safe   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.80 2003/07/26 14:34:49 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.81 2003/07/26 15:35:35 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     /**\n      * <p>The maximum size to which the padding constant(s) can expand.</p>\n      */\n-    private static int PAD_LIMIT = 8192;\n+    private static final int PAD_LIMIT = 8192;\n \n     /**\n      * <p>An array of <code>String</code>s used for padding.</p>\n      *\n      * <p>Used for efficient space padding. The length of each String expands as needed.</p>\n      */\n-    private final static String[] padding = new String[Character.MAX_VALUE];\n+    private static final String[] PADDING = new String[Character.MAX_VALUE];\n     \n     static {\n-        padding[32] = \"                                \";\n+        // space padding is most common, start with 64 chars\n+        PADDING[32] = \"                                                                \";\n     }\n \n     /**\n      * @throws IndexOutOfBoundsException if <code>repeat &lt; 0</code>\n      */\n     private static String padding(int repeat, char padChar) {\n-        if (padding[padChar] == null) {\n-            padding[padChar] = String.valueOf(padChar);\n-        }\n-        while (padding[padChar].length() < repeat) {\n-            padding[padChar] = padding[padChar].concat(padding[padChar]);\n-        }\n-        return padding[padChar].substring(0, repeat);\n+        // be careful of synchronization in this method\n+        // we are assuming that get and set from an array index is atomic\n+        String pad = PADDING[padChar];\n+        if (pad == null) {\n+            pad = String.valueOf(padChar);\n+        }\n+        while (pad.length() < repeat) {\n+            pad = pad.concat(pad);\n+        }\n+        PADDING[padChar] = pad;\n+        return pad.substring(0, repeat);\n     }\n \n     /**", "timestamp": 1059233735, "metainfo": ""}