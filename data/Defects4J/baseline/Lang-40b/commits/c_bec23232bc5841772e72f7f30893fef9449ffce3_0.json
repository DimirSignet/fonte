{"sha": "bec23232bc5841772e72f7f30893fef9449ffce3", "log": "Applying Boris' patch in LANG-481 to improve thread safety in the Range classes. The previous code's reuse of the hashCode variable for local operations means it is utterly non-thread-safe. Now uses a local variable so that the worst case should be the hashCode being calculated multiple times, but not ending up with different values.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/DoubleRange.java\n+++ b/src/java/org/apache/commons/lang/math/DoubleRange.java\n      */\n     @Override\n     public int hashCode() {\n-        if (hashCode == 0) {\n-            hashCode = 17;\n-            hashCode = 37 * hashCode + getClass().hashCode();\n+        int temp = hashCode;\n+        if (temp == 0) {\n+            temp = 17;\n+            temp = 37 * temp + getClass().hashCode();\n             long lng = Double.doubleToLongBits(min);\n-            hashCode = 37 * hashCode + ((int) (lng ^ (lng >> 32)));\n+            temp = 37 * temp + ((int) (lng ^ (lng >> 32)));\n             lng = Double.doubleToLongBits(max);\n-            hashCode = 37 * hashCode + ((int) (lng ^ (lng >> 32)));\n+            temp = 37 * temp + ((int) (lng ^ (lng >> 32)));\n+            hashCode = temp;\n         }\n         return hashCode;\n     }\n--- a/src/java/org/apache/commons/lang/math/FloatRange.java\n+++ b/src/java/org/apache/commons/lang/math/FloatRange.java\n      */\n     @Override\n     public int hashCode() {\n-        if (hashCode == 0) {\n-            hashCode = 17;\n-            hashCode = 37 * hashCode + getClass().hashCode();\n-            hashCode = 37 * hashCode + Float.floatToIntBits(min);\n-            hashCode = 37 * hashCode + Float.floatToIntBits(max);\n+        int temp = hashCode;\n+        if (temp == 0) {\n+            temp = 17;\n+            temp = 37 * temp + getClass().hashCode();\n+            temp = 37 * temp + Float.floatToIntBits(min);\n+            temp = 37 * temp + Float.floatToIntBits(max);\n+            hashCode = temp;\n         }\n         return hashCode;\n     }\n--- a/src/java/org/apache/commons/lang/math/IntRange.java\n+++ b/src/java/org/apache/commons/lang/math/IntRange.java\n      */\n     @Override\n     public int hashCode() {\n-        if (hashCode == 0) {\n-            hashCode = 17;\n-            hashCode = 37 * hashCode + getClass().hashCode();\n-            hashCode = 37 * hashCode + min;\n-            hashCode = 37 * hashCode + max;\n+        int temp = hashCode;\n+        if (temp == 0) {\n+            temp = 17;\n+            temp = 37 * temp + getClass().hashCode();\n+            temp = 37 * temp + min;\n+            temp = 37 * temp + max;\n+            hashCode = temp;\n         }\n         return hashCode;\n     }\n--- a/src/java/org/apache/commons/lang/math/LongRange.java\n+++ b/src/java/org/apache/commons/lang/math/LongRange.java\n      */\n     @Override\n     public int hashCode() {\n-        if (hashCode == 0) {\n-            hashCode = 17;\n-            hashCode = 37 * hashCode + getClass().hashCode();\n-            hashCode = 37 * hashCode + ((int) (min ^ (min >> 32)));\n-            hashCode = 37 * hashCode + ((int) (max ^ (max >> 32)));\n+        int temp = hashCode;\n+        if (temp == 0) {\n+            temp = 17;\n+            temp = 37 * temp + getClass().hashCode();\n+            temp = 37 * temp + ((int) (min ^ (min >> 32)));\n+            temp = 37 * temp + ((int) (max ^ (max >> 32)));\n+            hashCode = temp;\n         }\n         return hashCode;\n     }\n--- a/src/java/org/apache/commons/lang/math/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/math/NumberRange.java\n      */\n     @Override\n     public int hashCode() {\n-        if (hashCode == 0) {\n-            hashCode = 17;\n-            hashCode = 37 * hashCode + getClass().hashCode();\n-            hashCode = 37 * hashCode + min.hashCode();\n-            hashCode = 37 * hashCode + max.hashCode();\n+        int temp = hashCode;\n+        if (temp == 0) {\n+            temp = 17;\n+            temp = 37 * temp + getClass().hashCode();\n+            temp = 37 * temp + min.hashCode();\n+            temp = 37 * temp + max.hashCode();\n+            hashCode = temp;\n         }\n         return hashCode;\n     }", "timestamp": 1252346190, "metainfo": ""}