{"sha": "1e168c80af9677b9e36ba33bd1d12b37ada71c02", "log": "File formatting for clarity   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n import org.apache.commons.lang.builder.HashCodeBuilder;\n import org.apache.commons.lang.builder.ToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n+\n /**\n  * <p><code>ArrayUtils</code> contains utility methods for working with\n  * arrays.</p>\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.20 2003/07/31 23:45:28 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.21 2003/08/01 20:45:17 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n         return new EqualsBuilder().append(array1, array2).isEquals();\n     }\n \n+    // To map\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Converts the given array into a {@link java.util.Map}. Each element of the array\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: BooleanUtils.java,v 1.11 2003/07/31 23:55:57 scolebourne Exp $\n+ * @version $Id: BooleanUtils.java,v 1.12 2003/08/01 20:45:17 scolebourne Exp $\n  */\n public class BooleanUtils {\n \n     }\n     \n     // boolean Boolean methods\n-    //--------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Boolean factory that avoids creating new Boolean objecs all the time.</p>\n      * \n     }\n     \n     // Integer to Boolean methods\n-    //--------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Convert an int to a boolean using the convention that <code>zero</code>\n      * is <code>false</code>.</p>\n     }\n     \n     // Boolean to Integer methods\n-    //--------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Convert a boolean to an int using the convention that\n      * <code>zero</code> is <code>false</code>.</p>\n     }\n     \n     // String to Boolean methods\n-    //--------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Converts a String to a Boolean.</p>\n      * \n     }\n \n     // String to boolean methods\n-    //--------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Converts a String to a boolean.</p>\n      * \n     }\n \n     // Boolean to String methods\n-    //--------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Converts a Boolean to a String returning <code>'true'</code>,\n      * <code>'false'</code>, or <code>null</code>.</p>\n     }\n     \n     // boolean to String methods\n-    //--------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Converts a boolean to a String returning <code>'true'</code>\n      * or <code>'false'</code>.</p>\n     }\n     \n     // xor methods\n-    //  --------------------------------------------------------------------------\n+    // ----------------------------------------------------------------------\n     /**\n      * <p>Performs an xor on a set of booleans.</p>\n      * \n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharSetUtils.java,v 1.18 2003/07/31 21:32:47 scolebourne Exp $\n+ * @version $Id: CharSetUtils.java,v 1.19 2003/08/01 20:45:17 scolebourne Exp $\n  */\n public class CharSetUtils {\n \n     public CharSetUtils() {\n     }\n \n+    // Factory\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Creates a <code>CharSetUtils</code> object which allows a certain amount of\n         return new CharSet(set); \n     }\n \n+    // Squeeze\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Squeezes any repititions of a character that is mentioned in the\n         return buffer.toString();\n     }\n \n+    // Count\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Takes an argument in set-syntax, see evaluateSet,\n         return count;\n     }\n \n+    // Keep\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Takes an argument in set-syntax, see evaluateSet,\n         return modify(str, set, true);\n     }\n \n+    // Delete\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Takes an argument in set-syntax, see evaluateSet,\n         return buffer.toString();\n     }\n \n+    // Translate\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Translate characters in a String.\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.18 2003/07/31 23:47:20 scolebourne Exp $\n+ * @version $Id: ClassUtils.java,v 1.19 2003/08/01 20:45:17 scolebourne Exp $\n  */\n public class ClassUtils {\n \n     public ClassUtils() {\n     }\n \n-    // -------------------------------------------------------------------------\n-    \n+    // Short class name\n+    // ----------------------------------------------------------------------\n     /**\n      * <p>Gets the class name minus the package name for an <code>Object</code>.</p>\n      * \n         return new String(chars, lastDot, chars.length - lastDot);\n     }\n     \n-    // -------------------------------------------------------------------------\n-    \n+    // Package name\n+    // ----------------------------------------------------------------------\n     /**\n      * <p>Gets the package name of an <code>Object</code>.</p>\n      * \n         return className.substring(0, i);\n     }\n     \n-    // -------------------------------------------------------------------------\n-    \n+    // Superclasses/Superinterfaces\n+    // ----------------------------------------------------------------------\n     /**\n      * <p>Gets a <code>List</code> of superclasses for the given class.</p>\n      * \n //        return null;\n //    }\n \n-    // -------------------------------------------------------------------------\n-    \n+    // Convert list\n+    // ----------------------------------------------------------------------\n     /**\n      * <p>Given a <code>List</code> of class names, this method converts them into classes.</p>\n      *\n         return classNames;\n     }\n     \n-    // -------------------------------------------------------------------------\n-    \n+    // Is assignable\n+    // ----------------------------------------------------------------------\n     /**\n      * <p>Checks if an array of Classes can be assigned to another array of Classes.</p>\n      *\n         return toClass.isAssignableFrom(cls);\n     }\n     \n+    // Inner class\n+    // ----------------------------------------------------------------------\n     /**\n      * <p>Is the specified class an inner class or static nested class.</p>\n      * \n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: ObjectUtils.java,v 1.15 2003/07/26 00:45:27 ggregory Exp $\n+ * @version $Id: ObjectUtils.java,v 1.16 2003/08/01 20:45:17 scolebourne Exp $\n  */\n public class ObjectUtils {\n     \n     public ObjectUtils() {\n     }\n \n+    // Defaulting\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Returns a default value if the object passed is\n         return object1.equals(object2);\n     }\n     \n+    // Identity ToString\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Gets the toString that would be produced by <code>Object</code>\n             .append(Integer.toHexString(System.identityHashCode(object)));\n     }\n \n+    // ToString\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Gets the <code>toString</code> of an <code>Object</code> returning\n         return (obj == null ? nullStr : obj.toString());\n     }\n \n+    // Null\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Class used as a null placeholder where <code>null</code>\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.20 2003/07/31 23:24:35 scolebourne Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.21 2003/08/01 20:45:17 scolebourne Exp $\n  */\n public class RandomStringUtils {\n \n     public RandomStringUtils() {\n     }\n \n+    // Random\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Creates a random string whose length is the number of characters\n      * specified.</p>\n--- a/src/java/org/apache/commons/lang/SerializationUtils.java\n+++ b/src/java/org/apache/commons/lang/SerializationUtils.java\n  * @author Stephen Colebourne\n  * @author Jeff Varszegi\n  * @since 1.0\n- * @version $Id: SerializationUtils.java,v 1.8 2003/07/31 23:45:28 scolebourne Exp $\n+ * @version $Id: SerializationUtils.java,v 1.9 2003/08/01 20:45:17 scolebourne Exp $\n  */\n public class SerializationUtils {\n     \n         super();\n     }\n \n+    // Clone\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Deep clone an <code>Object</code> using serialization.</p>\n      *\n         return deserialize(serialize(object));\n     }\n     \n+    // Serialize\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Serializes an <code>Object</code> to the specified stream.</p>\n      *\n         return baos.toByteArray();\n     }\n \n+    // Deserialize\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Deserializes an <code>Object</code> from the specified stream.</p>\n      *\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.22 2003/07/31 23:45:28 scolebourne Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.23 2003/08/01 20:45:17 scolebourne Exp $\n  */\n public class StringEscapeUtils {\n \n \n     // HTML and XML\n     //--------------------------------------------------------------------------\n-\n     /**\n      * <p>Escapes the characters in a <code>String</code> using HTML entities.</p>\n      *\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  *      - does String contain only/none of these characters\n  *  <li><b>SubString/Left/Right/Mid/SubStringBefore/SubStringAfter</b>\n  *      - null-safe substring extraction\n- *  <li><b>Split</b>\n- *      - splits a String into an array of subtrings based on a separator\n- *  <li><b>Join/Concatenate</b>\n- *      - joins an array of Strings into one with optional separator\n+ *  <li><b>Split/Join</b>\n+ *      - splits a String into an array of substrings and vice versa\n  *  <li><b>Replace/Delete/Overlay</b>\n  *      - Searches a String and replaces one String with another\n  *  <li><b>Chomp/Chop</b>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.83 2003/07/31 20:38:26 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.84 2003/08/01 20:45:17 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n \n     // Empty checks\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Checks if a String is empty (\"\") or null.</p>\n      * \n \n     // Trim\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Removes control characters (char &lt;= 32) from both\n      * ends of this String, handling <code>null</code> by returning\n     \n     // Stripping\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Strips whitespace from the start and end of a String.</p>\n      * \n \n     // StripAll\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Strips whitespace from the start and end of every String in an array.\n      * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n \n     // Equals\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Compares two Strings, returning <code>true</code> if they are equal.</p>\n      *\n \n     // IndexOf\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Finds the first index within a String, handling <code>null</code>.\n      * This method uses {@link String#indexOf(int)}.</p>\n     \n     // LastIndexOf\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Finds the last index within a String, handling <code>null</code>.\n      * This method uses {@link String#lastIndexOf(int)}.</p>\n     \n     // Contains\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Checks if String contains a search character, handling <code>null</code>.\n      * This method uses {@link String#indexOf(int)}.</p>\n     \n     // IndexOfAny\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Find the first index of any of a set of potential substrings.</p>\n      *\n \n     // IndexOfAnyBut\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Search a String to find the first index of any\n      * character not in the given set of characters.</p>\n \n     // ContainsOnly\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Checks if the String contains only certain characters.</p>\n      *\n     \n     // ContainsNone\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Checks that the String does not contain certain characters.</p>\n      *\n     \n     // Substring\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Gets a substring from the specified String avoiding exceptions.</p>\n      *\n \n     // Left/Right/Mid\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Gets the leftmost <code>len</code> characters of a String.</p>\n      *\n \n     // SubStringAfter/SubStringBefore\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Gets the substring before the first occurance of a separator.\n      * The separator is not returned.</p>\n \n     // Splitting\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Splits the provided text into an array, using whitespace as the\n      * separator.\n \n     // Delete\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Deletes all 'space' characters from a String as defined by\n      * {@link Character#isSpace(char)}.</p>\n \n     // Replacing\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Replaces a String with another String inside a larger String, once.</p>\n      * \n     \n     // Replace, character based\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Replaces all occurrances of a character in a String with another.\n      * This is a null-safe version of {@link String#replace(char, char)}.</p>\n \n     // Overlay\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Overlays part of a String with another String.</p>\n      *\n \n     // Chomping\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Removes one newline from end of a String if it's there,\n      * otherwise leave it alone.  A newline is &quot;<code>\\n</code>&quot;,\n \n     // Chopping\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Remove the last character from a String.</p>\n      *\n \n     // Conversion\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Escapes any values it finds into their String form.</p>\n      *\n \n     // Padding\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Repeat a String <code>repeat</code> times to form a\n      * new String.</p>\n \n     // Centering\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Centers a String in a larger String of size <code>size</code>\n      * using the space character (' ').<p>\n \n     // Case conversion\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Converts a String to upper case as per {@link String#toUpperCase()}.</p>\n      * \n \n     // Nested extraction\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Gets the String that is nested in between two instances of the\n      * same String.</p>\n \n     // Count matches\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Counts how many times the substring appears in the larger String.</p>\n      *\n \n     // Character Tests\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Checks if the String contains only unicode letters.</p>\n      *\n \n     // Defaults\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Returns either the passed in String, \n      * or if the String is <code>null</code>, an empty String (\"\").</p>\n \n     // Reversing\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Reverses a String as per {@link StringBuffer#reverse()}.</p>\n      *\n \n     // Abbreviating\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Abbreviates a String using ellipses. This will turn \n      * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n \n     // Difference\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Compares two Strings, and returns the portion where they differ.\n      * (More precisely, return the remainder of the second String,\n \n     // Misc\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Find the Levenshtein distance between two Strings.</p>\n      *\n--- a/src/java/org/apache/commons/lang/WordWrapUtils.java\n+++ b/src/java/org/apache/commons/lang/WordWrapUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: WordWrapUtils.java,v 1.7 2003/07/19 20:22:36 scolebourne Exp $\n+ * @version $Id: WordWrapUtils.java,v 1.8 2003/08/01 20:45:17 scolebourne Exp $\n  */\n public class WordWrapUtils {\n \n \n     // Wrapping\n     //--------------------------------------------------------------------------\n-\n     /**\n      * <p>Wraps a block of text to a specified line length.</p>\n      *", "timestamp": 1059770717, "metainfo": ""}