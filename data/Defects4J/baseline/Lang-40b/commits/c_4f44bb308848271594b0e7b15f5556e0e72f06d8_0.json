{"sha": "4f44bb308848271594b0e7b15f5556e0e72f06d8", "log": "[LANG-499] Added ConcurrentException and ConcurrentUtils classes.  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/concurrent/ConcurrentException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.concurrent;\n+\n+/**\n+ * <p>\n+ * An exception class used for reporting error conditions related to accessing\n+ * data of background tasks.\n+ * </p>\n+ * <p>\n+ * The purpose of this exception class is analogous to the default JDK exception\n+ * class {@link java.util.concurrent.ExecutionException}, i.e. it wraps an\n+ * exception that occurred during the execution of a task. However, in contrast\n+ * to {@code ExecutionException}, it wraps only checked exceptions. Runtime\n+ * exceptions are thrown directly.\n+ * </p>\n+ *\n+ * @version $Id$\n+ */\n+public class ConcurrentException extends Exception {\n+    /**\n+     * The serial version UID.\n+     */\n+    private static final long serialVersionUID = 6622707671812226130L;\n+\n+    /**\n+     * Creates a new, uninitialized instance of {@code ConcurrentException}.\n+     */\n+    protected ConcurrentException() {\n+        super();\n+    }\n+\n+    /**\n+     * Creates a new instance of {@code ConcurrentException} and initializes it\n+     * with the given cause.\n+     *\n+     * @param cause the cause of this exception\n+     * @throws IllegalArgumentException if the cause is not a checked exception\n+     */\n+    public ConcurrentException(Throwable cause) {\n+        super(ConcurrentUtils.checkedException(cause));\n+    }\n+\n+    /**\n+     * Creates a new instance of {@code ConcurrentException} and initializes it\n+     * with the given message and cause.\n+     *\n+     * @param msg the error message\n+     * @param cause the cause of this exception\n+     * @throws IllegalArgumentException if the cause is not a checked exception\n+     */\n+    public ConcurrentException(String msg, Throwable cause) {\n+        super(msg, ConcurrentUtils.checkedException(cause));\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.concurrent;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * <p>\n+ * An utility class providing functionality related to the {@code\n+ * java.util.concurrent} package.\n+ * </p>\n+ *\n+ * @version $Id$\n+ */\n+public class ConcurrentUtils {\n+    /**\n+     * Private constructor so that no instances can be created. This class\n+     * contains only static utility methods.\n+     */\n+    private ConcurrentUtils() {\n+    }\n+\n+    /**\n+     * Inspects the cause of the specified {@code ExecutionException} and\n+     * creates a {@code ConcurrentException} with the checked cause if\n+     * necessary. This method performs the following checks on the cause of the\n+     * passed in exception:\n+     * <ul>\n+     * <li>If the passed in exception is <b>null</b> or the cause is\n+     * <b>null</b>, this method returns <b>null</b>.</li>\n+     * <li>If the cause is a runtime exception, it is directly thrown.</li>\n+     * <li>If the cause is an error, it is directly thrown, too.</li>\n+     * <li>In any other case the cause is a checked exception. The method then\n+     * creates a {@link ConcurrentException}, initializes it with the cause, and\n+     * returns it.</li>\n+     * </ul>\n+     *\n+     * @param ex the exception to be processed\n+     * @return a {@code ConcurrentException} with the checked cause\n+     */\n+    public static ConcurrentException extractCause(ExecutionException ex) {\n+        if (ex == null || ex.getCause() == null) {\n+            return null;\n+        }\n+\n+        throwCause(ex);\n+        return new ConcurrentException(ex.getMessage(), ex.getCause());\n+    }\n+\n+    /**\n+     * Handles the specified {@code ExecutionException}. This method calls\n+     * {@link #extractCause(ExecutionException)} for obtaining the cause of the\n+     * exception - which might already cause an unchecked exception or an error\n+     * being thrown. If the cause is a checked exception however, it is wrapped\n+     * in a {@code ConcurrentException}, which is thrown. If the passed in\n+     * exception is <b>null</b> or has no cause, the method simply returns\n+     * without throwing an exception.\n+     *\n+     * @param ex the exception to be handled\n+     * @throws ConcurrentException if the cause of the {@code\n+     * ExecutionException} is a checked exception\n+     */\n+    public static void handleCause(ExecutionException ex)\n+            throws ConcurrentException {\n+        ConcurrentException cex = extractCause(ex);\n+\n+        if (cex != null) {\n+            throw cex;\n+        }\n+    }\n+\n+    /**\n+     * Tests whether the specified {@code Throwable} is a checked exception. If\n+     * not, an exception is thrown.\n+     *\n+     * @param ex the {@code Throwable} to check\n+     * @return a flag whether the passed in exception is a checked exception\n+     * @throws IllegalArgumentException if the {@code Throwable} is not a\n+     * checked exception\n+     */\n+    static Throwable checkedException(Throwable ex) {\n+        if (ex != null && !(ex instanceof RuntimeException)\n+                && !(ex instanceof Error)) {\n+            return ex;\n+        } else {\n+            throw new IllegalArgumentException(\"Not a checked exception: \" + ex);\n+        }\n+    }\n+\n+    /**\n+     * Tests whether the cause of the specified {@code ExecutionException}\n+     * should be thrown and does it if necessary.\n+     *\n+     * @param ex the exception in question\n+     */\n+    private static void throwCause(ExecutionException ex) {\n+        if (ex.getCause() instanceof RuntimeException) {\n+            throw (RuntimeException) ex.getCause();\n+        }\n+\n+        if (ex.getCause() instanceof Error) {\n+            throw (Error) ex.getCause();\n+        }\n+    }\n+}", "timestamp": 1254251657, "metainfo": ""}