{"sha": "296cf9fb940c094ce29ff6061ea5ff5cac4d23c0", "log": "Bugzilla Bug 27877 [lang][patch] Make ClassUtils methods null-safe and not throw an IAE. http://issues.apache.org/bugzilla/show_bug.cgi?id=27877   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Gary Gregory\n  * @author Norm Deane\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.29 2004/06/27 04:42:54 bayard Exp $\n+ * @version $Id: ClassUtils.java,v 1.30 2004/06/30 18:33:58 ggregory Exp $\n  */\n public class ClassUtils {\n \n     /**\n      * <p>Gets the class name minus the package name from a <code>Class</code>.</p>\n      * \n-     * @param cls  the class to get the short name for, must not be\n-     *  <code>null</code>\n-     * @return the class name without the package name\n-     * @throws IllegalArgumentException if the class is <code>null</code>\n+     * @param cls  the class to get the short name for.\n+     * @return the class name without the package name or an empty string\n      */\n     public static String getShortClassName(Class cls) {\n         if (cls == null) {\n-            throw new IllegalArgumentException(\"The class must not be null\");\n+            return StringUtils.EMPTY;\n         }\n         return getShortClassName(cls.getName());\n     }\n      *\n      * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n      * \n-     * @param className  the className to get the short name for,\n-     *  must not be empty or <code>null</code>\n-     * @return the class name of the class without the package name\n-     * @throws IllegalArgumentException if the className is empty\n+     * @param className  the className to get the short name for\n+     * @return the class name of the class without the package name or an empty string\n      */\n     public static String getShortClassName(String className) {\n-        if (StringUtils.isEmpty(className)) {\n-            throw new IllegalArgumentException(\"The class name must not be empty\");\n+        if (className == null) {\n+            return StringUtils.EMPTY;\n+        }\n+        if (className.length() == 0) {\n+            return StringUtils.EMPTY;\n         }\n         char[] chars = className.toCharArray();\n         int lastDot = 0;\n     /**\n      * <p>Gets the package name of a <code>Class</code>.</p>\n      * \n-     * @param cls  the class to get the package name for,\n-     *  must not be <code>null</code>\n-     * @return the package name\n-     * @throws IllegalArgumentException if the class is <code>null</code>\n+     * @param cls  the class to get the package name for, may be <code>null</code>.\n+     * @return the package name or an empty string\n      */\n     public static String getPackageName(Class cls) {\n         if (cls == null) {\n-            throw new IllegalArgumentException(\"The class must not be null\");\n+            return StringUtils.EMPTY;\n         }\n         return getPackageName(cls.getName());\n     }\n      * <p>Gets the package name from a <code>String</code>.</p>\n      *\n      * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n-     * \n-     * @param className  the className to get the package name for,\n-     *  must not be empty or <code>null</code>\n-     * @return the package name\n-     * @throws IllegalArgumentException if the className is empty\n+\t * <p>If the class is unpackaged, return an empty string.</p>\n+     * \n+     * @param className  the className to get the package name for, may be <code>null</code>\n+     * @return the package name or an empty string\n      */\n     public static String getPackageName(String className) {\n-        if (StringUtils.isEmpty(className)) {\n-            throw new IllegalArgumentException(\"The class name must not be empty\");\n+        if (className == null) {\n+            return StringUtils.EMPTY;\n         }\n         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         if (i == -1) {\n-            return \"\";\n+            return StringUtils.EMPTY;\n         }\n         return className.substring(0, i);\n     }\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n  *\n  * @author Stephen Colebourne\n  * @author Gary D. Gregory\n- * @version $Id: ClassUtilsTest.java,v 1.12 2004/06/27 04:42:54 bayard Exp $\n+ * @version $Id: ClassUtilsTest.java,v 1.13 2004/06/30 18:33:58 ggregory Exp $\n  */\n public class ClassUtilsTest extends TestCase {\n \n     public void test_getShortClassName_Class() {\n         assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n         assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n-        try {\n-            ClassUtils.getShortClassName((Class) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"\", ClassUtils.getShortClassName((Class) null));\n     }\n     \n     public void test_getShortClassName_String() {\n         assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class.getName()));\n         assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class.getName()));\n-        try {\n-            ClassUtils.getShortClassName((String) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            ClassUtils.getShortClassName(\"\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"\", ClassUtils.getShortClassName((String) null));\n+        assertEquals(\"\", ClassUtils.getShortClassName(\"\"));\n     }\n     \n     // -------------------------------------------------------------------------\n     public void test_getPackageName_Class() {\n         assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\n         assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\n-        try {\n-            ClassUtils.getPackageName((Class) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"\", ClassUtils.getPackageName((Class)null));\n     }\n     \n     public void test_getPackageName_String() {\n         assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageName(ClassUtils.class.getName()));\n         assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class.getName()));\n-        try {\n-            ClassUtils.getPackageName((String) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            ClassUtils.getPackageName(\"\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"\", ClassUtils.getPackageName((String)null));\n+        assertEquals(\"\", ClassUtils.getPackageName(\"\"));\n     }\n     \n     // -------------------------------------------------------------------------", "timestamp": 1088620438, "metainfo": ""}