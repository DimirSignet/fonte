{"sha": "27ea6707d2d2f588e32faeb67cc33a0103dd2db0", "log": "reformatted to match other Lang code   ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/MappedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/MappedMessageFormat.java\n  * support any \"format\" operations applied to the objects before substitution \n  * into the target string.\n  *\n+ * Originally org.apache.commons.digester.substitution.MultiVariableExpander\n+ *\n  * @since 2.1\n  */\n+public class MappedMessageFormat {\n \n-public class MappedMessageFormat {\n     private int nEntries = 0;\n     private ArrayList markers = new ArrayList(2);\n     private ArrayList sources = new ArrayList(2);\n      * strings passed to the \"format\" methods.\n      */\n     public void addSource(String marker, Map source) {\n-        ++nEntries;\n+        nEntries++;\n         markers.add(marker);\n         sources.add(source);\n     }\n      * a variable which is not known to the specified source.\n      */\n     public String format(String param) {\n-        for(int i=0; i<nEntries; ++i) {\n-            param = format(\n-                param, \n-                (String) markers.get(i), \n-                (Map) sources.get(i));\n+        for(int i=0; i<nEntries; i++) {\n+            param = format( param, (String) markers.get(i), (Map) sources.get(i));\n         }\n         return param;\n     }\n         int markLen = startMark.length();\n         \n         int index = 0;\n-        for(;;)\n-        {\n+        while(true) {\n             index = str.indexOf(startMark, index);\n-            if (index == -1)\n-            {\n+            if (index == -1) {\n                 return str;\n             }\n             \n             int startIndex = index + markLen;\n-            if (startIndex > str.length())\n-            {\n-                throw new IllegalArgumentException(\n-                    \"var expression starts at end of string\");\n+            if (startIndex > str.length()) {\n+                throw new IllegalArgumentException(\"var expression starts at end of string\");\n             }\n             \n             int endIndex = str.indexOf(\"}\", index + markLen);\n-            if (endIndex == -1)\n-            {\n-                throw new IllegalArgumentException(\n-                    \"var expression starts but does not end\");\n+            if (endIndex == -1) {\n+                throw new IllegalArgumentException(\"var expression starts but does not end\");\n             }\n             \n             String key = str.substring(index+markLen, endIndex);\n             Object value =  source.get(key);\n             if (value == null) {\n-                throw new IllegalArgumentException(\n-                    \"parameter [\" + key + \"] is not defined.\");\n+                throw new IllegalArgumentException(\"parameter [\" + key + \"] is not defined.\");\n             }\n             String varValue = value.toString();\n             ", "timestamp": 1094344934, "metainfo": ""}